
progetto_embedded_control_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b50  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08008d20  08008d20  00009d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090d8  080090d8  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  080090d8  080090d8  0000a0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090e0  080090e0  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e0  080090e0  0000a0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090e4  080090e4  0000a0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080090e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001e8  080092cc  0000b1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  080092cc  0000b4e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106d5  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dce  00000000  00000000  0001b8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0001e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aac  00000000  00000000  0001f4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f88  00000000  00000000  0001ff4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147c7  00000000  00000000  00044ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dad26  00000000  00000000  0005969b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001343c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004864  00000000  00000000  00134404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00138c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008d08 	.word	0x08008d08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08008d08 	.word	0x08008d08

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fca:	4b36      	ldr	r3, [pc, #216]	@ (80010a4 <MX_ADC1_Init+0xec>)
 8000fcc:	4a36      	ldr	r2, [pc, #216]	@ (80010a8 <MX_ADC1_Init+0xf0>)
 8000fce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd0:	4b34      	ldr	r3, [pc, #208]	@ (80010a4 <MX_ADC1_Init+0xec>)
 8000fd2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd8:	4b32      	ldr	r3, [pc, #200]	@ (80010a4 <MX_ADC1_Init+0xec>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fde:	4b31      	ldr	r3, [pc, #196]	@ (80010a4 <MX_ADC1_Init+0xec>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80010a4 <MX_ADC1_Init+0xec>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fea:	4b2e      	ldr	r3, [pc, #184]	@ (80010a4 <MX_ADC1_Init+0xec>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80010a4 <MX_ADC1_Init+0xec>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80010a4 <MX_ADC1_Init+0xec>)
 8000ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80010ac <MX_ADC1_Init+0xf4>)
 8000ffc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffe:	4b29      	ldr	r3, [pc, #164]	@ (80010a4 <MX_ADC1_Init+0xec>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001004:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <MX_ADC1_Init+0xec>)
 8001006:	2204      	movs	r2, #4
 8001008:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800100a:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <MX_ADC1_Init+0xec>)
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001012:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <MX_ADC1_Init+0xec>)
 8001014:	2201      	movs	r2, #1
 8001016:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001018:	4822      	ldr	r0, [pc, #136]	@ (80010a4 <MX_ADC1_Init+0xec>)
 800101a:	f001 f9e5 	bl	80023e8 <HAL_ADC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001024:	f000 fd60 	bl	8001ae8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001028:	2300      	movs	r3, #0
 800102a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	481a      	ldr	r0, [pc, #104]	@ (80010a4 <MX_ADC1_Init+0xec>)
 800103a:	f001 fb47 	bl	80026cc <HAL_ADC_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001044:	f000 fd50 	bl	8001ae8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001048:	2301      	movs	r3, #1
 800104a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	4813      	ldr	r0, [pc, #76]	@ (80010a4 <MX_ADC1_Init+0xec>)
 8001056:	f001 fb39 	bl	80026cc <HAL_ADC_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001060:	f000 fd42 	bl	8001ae8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001064:	2304      	movs	r3, #4
 8001066:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001068:	2303      	movs	r3, #3
 800106a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <MX_ADC1_Init+0xec>)
 8001072:	f001 fb2b 	bl	80026cc <HAL_ADC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800107c:	f000 fd34 	bl	8001ae8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001080:	2306      	movs	r3, #6
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001084:	2304      	movs	r3, #4
 8001086:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_ADC1_Init+0xec>)
 800108e:	f001 fb1d 	bl	80026cc <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001098:	f000 fd26 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000204 	.word	0x20000204
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	@ 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a33      	ldr	r2, [pc, #204]	@ (800119c <HAL_ADC_MspInit+0xec>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d160      	bne.n	8001194 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b32      	ldr	r3, [pc, #200]	@ (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010da:	4a31      	ldr	r2, [pc, #196]	@ (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e2:	4b2f      	ldr	r3, [pc, #188]	@ (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b2b      	ldr	r3, [pc, #172]	@ (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a2a      	ldr	r2, [pc, #168]	@ (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b28      	ldr	r3, [pc, #160]	@ (80011a0 <HAL_ADC_MspInit+0xf0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 800110a:	2353      	movs	r3, #83	@ 0x53
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4821      	ldr	r0, [pc, #132]	@ (80011a4 <HAL_ADC_MspInit+0xf4>)
 800111e:	f002 fa07 	bl	8003530 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001124:	4a21      	ldr	r2, [pc, #132]	@ (80011ac <HAL_ADC_MspInit+0xfc>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 800113c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001140:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001144:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001148:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800114a:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 800114c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001150:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001154:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001158:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800115a:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001162:	2204      	movs	r2, #4
 8001164:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001168:	2203      	movs	r2, #3
 800116a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800116c:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 800116e:	2200      	movs	r2, #0
 8001170:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001172:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001174:	2200      	movs	r2, #0
 8001176:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001178:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 800117a:	f001 fe69 	bl	8002e50 <HAL_DMA_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8001184:	f000 fcb0 	bl	8001ae8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a07      	ldr	r2, [pc, #28]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 800118c:	639a      	str	r2, [r3, #56]	@ 0x38
 800118e:	4a06      	ldr	r2, [pc, #24]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	@ 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40012000 	.word	0x40012000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	2000024c 	.word	0x2000024c
 80011ac:	40026410 	.word	0x40026410

080011b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <MX_DMA_Init+0x3c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a0b      	ldr	r2, [pc, #44]	@ (80011ec <MX_DMA_Init+0x3c>)
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <MX_DMA_Init+0x3c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 3, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2103      	movs	r1, #3
 80011d6:	2038      	movs	r0, #56	@ 0x38
 80011d8:	f001 fe03 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011dc:	2038      	movs	r0, #56	@ 0x38
 80011de:	f001 fe1c 	bl	8002e1a <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b38      	ldr	r3, [pc, #224]	@ (80012ec <MX_GPIO_Init+0xfc>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a37      	ldr	r2, [pc, #220]	@ (80012ec <MX_GPIO_Init+0xfc>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b35      	ldr	r3, [pc, #212]	@ (80012ec <MX_GPIO_Init+0xfc>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <MX_GPIO_Init+0xfc>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a30      	ldr	r2, [pc, #192]	@ (80012ec <MX_GPIO_Init+0xfc>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <MX_GPIO_Init+0xfc>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b2a      	ldr	r3, [pc, #168]	@ (80012ec <MX_GPIO_Init+0xfc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a29      	ldr	r2, [pc, #164]	@ (80012ec <MX_GPIO_Init+0xfc>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <MX_GPIO_Init+0xfc>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <MX_GPIO_Init+0xfc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a22      	ldr	r2, [pc, #136]	@ (80012ec <MX_GPIO_Init+0xfc>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <MX_GPIO_Init+0xfc>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2120      	movs	r1, #32
 800127a:	481d      	ldr	r0, [pc, #116]	@ (80012f0 <MX_GPIO_Init+0x100>)
 800127c:	f002 faec 	bl	8003858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001280:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001286:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4817      	ldr	r0, [pc, #92]	@ (80012f4 <MX_GPIO_Init+0x104>)
 8001298:	f002 f94a 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800129c:	2301      	movs	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012a0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4810      	ldr	r0, [pc, #64]	@ (80012f4 <MX_GPIO_Init+0x104>)
 80012b2:	f002 f93d 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012b6:	2320      	movs	r3, #32
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4808      	ldr	r0, [pc, #32]	@ (80012f0 <MX_GPIO_Init+0x100>)
 80012ce:	f002 f92f 	bl	8003530 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2103      	movs	r1, #3
 80012d6:	2006      	movs	r0, #6
 80012d8:	f001 fd83 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012dc:	2006      	movs	r0, #6
 80012de:	f001 fd9c 	bl	8002e1a <HAL_NVIC_EnableIRQ>

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	@ 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020800 	.word	0x40020800

080012f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <MX_I2C1_Init+0x50>)
 80012fe:	4a13      	ldr	r2, [pc, #76]	@ (800134c <MX_I2C1_Init+0x54>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001304:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <MX_I2C1_Init+0x58>)
 8001306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_I2C1_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001316:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800131a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <MX_I2C1_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001334:	4804      	ldr	r0, [pc, #16]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001336:	f002 fac1 	bl	80038bc <HAL_I2C_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001340:	f000 fbd2 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200002ac 	.word	0x200002ac
 800134c:	40005400 	.word	0x40005400
 8001350:	00061a80 	.word	0x00061a80

08001354 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	@ 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a19      	ldr	r2, [pc, #100]	@ (80013d8 <HAL_I2C_MspInit+0x84>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d12b      	bne.n	80013ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a17      	ldr	r2, [pc, #92]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001392:	23c0      	movs	r3, #192	@ 0xc0
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001396:	2312      	movs	r3, #18
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013a2:	2304      	movs	r3, #4
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <HAL_I2C_MspInit+0x8c>)
 80013ae:	f002 f8bf 	bl	8003530 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	4a08      	ldr	r2, [pc, #32]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 80013bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	@ 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40005400 	.word	0x40005400
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020400 	.word	0x40020400
 80013e4:	00000000 	.word	0x00000000

080013e8 <INA219_Init>:

HAL_StatusTypeDef INA219_I2C_Status;


uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address, double maxCurrent)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	@ 0x30
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6178      	str	r0, [r7, #20]
 80013f0:	6139      	str	r1, [r7, #16]
 80013f2:	4613      	mov	r3, r2
 80013f4:	ed87 0b00 	vstr	d0, [r7]
 80013f8:	73fb      	strb	r3, [r7, #15]
	ina219->ina219_i2c = i2c;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	711a      	strb	r2, [r3, #4]

	HAL_StatusTypeDef ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	b29b      	uxth	r3, r3
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	b299      	uxth	r1, r3
 800140e:	2302      	movs	r3, #2
 8001410:	2203      	movs	r2, #3
 8001412:	6938      	ldr	r0, [r7, #16]
 8001414:	f002 ffc0 	bl	8004398 <HAL_I2C_IsDeviceReady>
 8001418:	4603      	mov	r3, r0
 800141a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if(ina219_isReady == HAL_OK)
 800141e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001422:	2b00      	cmp	r3, #0
 8001424:	d13a      	bne.n	800149c <INA219_Init+0xb4>
	{
		INA219_Reset(ina219);	// Reset the INA219
 8001426:	6978      	ldr	r0, [r7, #20]
 8001428:	f000 f877 	bl	800151a <INA219_Reset>

		ina219->current_LSB = maxCurrent/pow(2.0, 15.0);
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <INA219_Init+0xd0>)
 8001432:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001436:	f7ff fa29 	bl	800088c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	6979      	ldr	r1, [r7, #20]
 8001440:	e9c1 2302 	strd	r2, r3, [r1, #8]

		double resistor = ((double)SHUNT_RESISTOR)/1000.0;
 8001444:	a318      	add	r3, pc, #96	@ (adr r3, 80014a8 <INA219_Init+0xc0>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		// Using datasheet formula
		uint16_t cal =  (uint16_t) floor(0.04096/(ina219->current_LSB * resistor));
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001454:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001458:	f7ff f8ee 	bl	8000638 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	a113      	add	r1, pc, #76	@ (adr r1, 80014b0 <INA219_Init+0xc8>)
 8001462:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001466:	f7ff fa11 	bl	800088c <__aeabi_ddiv>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	ec43 2b17 	vmov	d7, r2, r3
 8001472:	eeb0 0a47 	vmov.f32	s0, s14
 8001476:	eef0 0a67 	vmov.f32	s1, s15
 800147a:	f007 fbc9 	bl	8008c10 <floor>
 800147e:	ec53 2b10 	vmov	r2, r3, d0
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fbaf 	bl	8000be8 <__aeabi_d2uiz>
 800148a:	4603      	mov	r3, r0
 800148c:	83fb      	strh	r3, [r7, #30]

		INA219_setCalibration(ina219, cal);
 800148e:	8bfb      	ldrh	r3, [r7, #30]
 8001490:	4619      	mov	r1, r3
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f000 f84f 	bl	8001536 <INA219_setCalibration>

		return 1;
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <INA219_Init+0xb6>
	}

	return 0;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3730      	adds	r7, #48	@ 0x30
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	9999999a 	.word	0x9999999a
 80014ac:	3fb99999 	.word	0x3fb99999
 80014b0:	88e368f1 	.word	0x88e368f1
 80014b4:	3fa4f8b5 	.word	0x3fa4f8b5
 80014b8:	40e00000 	.word	0x40e00000

080014bc <INA219_ReadRawCurrent>:
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
	return ((result >> 3  ) * 4);
}

uint16_t INA219_ReadRawCurrent(INA219_t *ina219)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	return Read16(ina219, INA219_REG_CURRENT);
 80014c4:	2104      	movs	r1, #4
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f846 	bl	8001558 <Read16>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <INA219_ReadCurrent>:

double INA219_ReadCurrent(INA219_t *ina219)
{
 80014d6:	b5b0      	push	{r4, r5, r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadRawCurrent(ina219);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffec 	bl	80014bc <INA219_ReadRawCurrent>
 80014e4:	4603      	mov	r3, r0
 80014e6:	81fb      	strh	r3, [r7, #14]

	return ina219->current_LSB * result;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80014ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f836 	bl	8000564 <__aeabi_i2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4620      	mov	r0, r4
 80014fe:	4629      	mov	r1, r5
 8001500:	f7ff f89a 	bl	8000638 <__aeabi_dmul>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	ec43 2b17 	vmov	d7, r2, r3
}
 800150c:	eeb0 0a47 	vmov.f32	s0, s14
 8001510:	eef0 0a67 	vmov.f32	s1, s15
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bdb0      	pop	{r4, r5, r7, pc}

0800151a <INA219_Reset>:


/* === Configuration functions === */

void INA219_Reset(INA219_t *ina219)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001522:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001526:	2100      	movs	r1, #0
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f841 	bl	80015b0 <Write16>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <INA219_setCalibration>:
{
	Write16(ina219, INA219_REG_CONFIG, Config);
}

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	461a      	mov	r2, r3
 8001546:	2105      	movs	r1, #5
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f831 	bl	80015b0 <Write16>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <Read16>:


/* === Read/Write register I2C functions === */

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af04      	add	r7, sp, #16
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	INA219_I2C_Status = HAL_I2C_Mem_Read(ina219->ina219_i2c, (ina219->Address << 1), Register, 1, Value, 2, HAL_MAX_DELAY);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	791b      	ldrb	r3, [r3, #4]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	b299      	uxth	r1, r3
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	b29a      	uxth	r2, r3
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2302      	movs	r3, #2
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2301      	movs	r3, #1
 8001588:	f002 fcd4 	bl	8003f34 <HAL_I2C_Mem_Read>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <Read16+0x54>)
 8001592:	701a      	strb	r2, [r3, #0]

	return ((Value[0] << 8) | Value[1]);
 8001594:	7b3b      	ldrb	r3, [r7, #12]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	7b7b      	ldrb	r3, [r7, #13]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	b29b      	uxth	r3, r3
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000300 	.word	0x20000300

080015b0 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af04      	add	r7, sp, #16
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
 80015bc:	4613      	mov	r3, r2
 80015be:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // MSByte
 80015c0:	883b      	ldrh	r3, [r7, #0]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // LSByte
 80015ca:	883b      	ldrh	r3, [r7, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	737b      	strb	r3, [r7, #13]
	INA219_I2C_Status = HAL_I2C_Mem_Write(ina219->ina219_i2c, (ina219->Address << 1), Register, 1, (uint8_t*)addr, 2, HAL_MAX_DELAY);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	791b      	ldrb	r3, [r3, #4]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	b299      	uxth	r1, r3
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	9302      	str	r3, [sp, #8]
 80015e8:	2302      	movs	r3, #2
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2301      	movs	r3, #1
 80015f4:	f002 fba4 	bl	8003d40 <HAL_I2C_Mem_Write>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b02      	ldr	r3, [pc, #8]	@ (8001608 <Write16+0x58>)
 80015fe:	701a      	strb	r2, [r3, #0]
}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000300 	.word	0x20000300

0800160c <HAL_GPIO_EXTI_Callback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == Button_Pin) {
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d10a      	bne.n	8001632 <HAL_GPIO_EXTI_Callback+0x26>
    	if(gripper == 0){
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <HAL_GPIO_EXTI_Callback+0x34>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d103      	bne.n	800162c <HAL_GPIO_EXTI_Callback+0x20>
    		gripper = 1;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_GPIO_EXTI_Callback+0x34>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
    	}
    	else{
    		gripper = 0;
    	}
    }
}
 800162a:	e002      	b.n	8001632 <HAL_GPIO_EXTI_Callback+0x26>
    		gripper = 0;
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <HAL_GPIO_EXTI_Callback+0x34>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000310 	.word	0x20000310

08001644 <PI_Control>:

// PID control loop
float PI_Control(float setpoint, float current_value) {
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	ed87 0a01 	vstr	s0, [r7, #4]
 800164e:	edc7 0a00 	vstr	s1, [r7]
    error = setpoint - current_value;
 8001652:	ed97 7a01 	vldr	s14, [r7, #4]
 8001656:	edd7 7a00 	vldr	s15, [r7]
 800165a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165e:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <PI_Control+0xdc>)
 8001660:	edc3 7a00 	vstr	s15, [r3]
    integral += error;
 8001664:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <PI_Control+0xe0>)
 8001666:	ed93 7a00 	vldr	s14, [r3]
 800166a:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <PI_Control+0xdc>)
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001674:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <PI_Control+0xe0>)
 8001676:	edc3 7a00 	vstr	s15, [r3]
    derivative = error - previous_error;  // Derivata dell'errore
 800167a:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <PI_Control+0xdc>)
 800167c:	ed93 7a00 	vldr	s14, [r3]
 8001680:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <PI_Control+0xe4>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168a:	4b28      	ldr	r3, [pc, #160]	@ (800172c <PI_Control+0xe8>)
 800168c:	edc3 7a00 	vstr	s15, [r3]
    previous_error = error;                    // Aggiorna l'errore precedente
 8001690:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <PI_Control+0xdc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a24      	ldr	r2, [pc, #144]	@ (8001728 <PI_Control+0xe4>)
 8001696:	6013      	str	r3, [r2, #0]

    // Calcola il valore di uscita PID
    float output = (Kp * error) + (Ki * integral) + (Kd * derivative);
 8001698:	4b25      	ldr	r3, [pc, #148]	@ (8001730 <PI_Control+0xec>)
 800169a:	ed93 7a00 	vldr	s14, [r3]
 800169e:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <PI_Control+0xdc>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a8:	4b22      	ldr	r3, [pc, #136]	@ (8001734 <PI_Control+0xf0>)
 80016aa:	edd3 6a00 	vldr	s13, [r3]
 80016ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <PI_Control+0xe0>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001738 <PI_Control+0xf4>)
 80016be:	edd3 6a00 	vldr	s13, [r3]
 80016c2:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <PI_Control+0xe8>)
 80016c4:	edd3 7a00 	vldr	s15, [r3]
 80016c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d0:	edc7 7a03 	vstr	s15, [r7, #12]

    // Limita l'output tra i valori massimi e minimi del PWM
    if (output > pwm_max) {
 80016d4:	4b19      	ldr	r3, [pc, #100]	@ (800173c <PI_Control+0xf8>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ed97 7a03 	vldr	s14, [r7, #12]
 80016de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	dd03      	ble.n	80016f0 <PI_Control+0xac>
        output = pwm_max;
 80016e8:	4b14      	ldr	r3, [pc, #80]	@ (800173c <PI_Control+0xf8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e00c      	b.n	800170a <PI_Control+0xc6>
    } else if (output < pwm_min) {
 80016f0:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <PI_Control+0xfc>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80016fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	d502      	bpl.n	800170a <PI_Control+0xc6>
        output = pwm_min;
 8001704:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <PI_Control+0xfc>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]
    /*
    if (output == pwm_max || output == pwm_min) {
    	integral -= error; // riduci l'accumulo integrale
    }
    */
    return output;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	ee07 3a90 	vmov	s15, r3
}
 8001710:	eeb0 0a67 	vmov.f32	s0, s15
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	2000033c 	.word	0x2000033c
 8001724:	2000032c 	.word	0x2000032c
 8001728:	20000328 	.word	0x20000328
 800172c:	20000330 	.word	0x20000330
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004
 8001738:	20000008 	.word	0x20000008
 800173c:	2000000c 	.word	0x2000000c
 8001740:	20000334 	.word	0x20000334

08001744 <Control_Loop>:

void Control_Loop(float setpoint) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	ed87 0a01 	vstr	s0, [r7, #4]

    // Leggi la corrente attuale dal sensore
    current_value = INA219_ReadCurrent(&ina219);
 800174e:	4815      	ldr	r0, [pc, #84]	@ (80017a4 <Control_Loop+0x60>)
 8001750:	f7ff fec1 	bl	80014d6 <INA219_ReadCurrent>
 8001754:	ec53 2b10 	vmov	r2, r3, d0
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff fa64 	bl	8000c28 <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	4a11      	ldr	r2, [pc, #68]	@ (80017a8 <Control_Loop+0x64>)
 8001764:	6013      	str	r3, [r2, #0]

    // Applica il controllo PID per regolare il PWM in base alla corrente
    pwm_value = PI_Control(setpoint, current_value);
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <Control_Loop+0x64>)
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	eef0 0a67 	vmov.f32	s1, s15
 8001770:	ed97 0a01 	vldr	s0, [r7, #4]
 8001774:	f7ff ff66 	bl	8001644 <PI_Control>
 8001778:	eef0 7a40 	vmov.f32	s15, s0
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <Control_Loop+0x68>)
 800177e:	edc3 7a00 	vstr	s15, [r3]

    // Imposta il valore di PWM calcolato per il servo
    PCA9685_SetPin(4, pwm_value, 0);
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <Control_Loop+0x68>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800178c:	ee17 3a90 	vmov	r3, s15
 8001790:	b29b      	uxth	r3, r3
 8001792:	2200      	movs	r2, #0
 8001794:	4619      	mov	r1, r3
 8001796:	2004      	movs	r0, #4
 8001798:	f000 fb08 	bl	8001dac <PCA9685_SetPin>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000318 	.word	0x20000318
 80017a8:	20000344 	.word	0x20000344
 80017ac:	20000338 	.word	0x20000338

080017b0 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80017b8:	1d39      	adds	r1, r7, #4
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	2201      	movs	r2, #1
 80017c0:	4803      	ldr	r0, [pc, #12]	@ (80017d0 <__io_putchar+0x20>)
 80017c2:	f004 f9d5 	bl	8005b70 <HAL_UART_Transmit>
  return ch;
 80017c6:	687b      	ldr	r3, [r7, #4]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000350 	.word	0x20000350
 80017d4:	00000000 	.word	0x00000000

080017d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017dc:	f000 fd92 	bl	8002304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e0:	f000 f910 	bl	8001a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e4:	f7ff fd04 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80017e8:	f7ff fce2 	bl	80011b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017ec:	f000 fcee 	bl	80021cc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80017f0:	f7ff fd82 	bl	80012f8 <MX_I2C1_Init>
  MX_ADC1_Init();
 80017f4:	f7ff fbe0 	bl	8000fb8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcValues, 4);  // Avvia l'ADC in modalità DMA
 80017f8:	2204      	movs	r2, #4
 80017fa:	4973      	ldr	r1, [pc, #460]	@ (80019c8 <main+0x1f0>)
 80017fc:	4873      	ldr	r0, [pc, #460]	@ (80019cc <main+0x1f4>)
 80017fe:	f000 fe37 	bl	8002470 <HAL_ADC_Start_DMA>

  PCA9685_Init(&hi2c1);
 8001802:	4873      	ldr	r0, [pc, #460]	@ (80019d0 <main+0x1f8>)
 8001804:	f000 fb8c 	bl	8001f20 <PCA9685_Init>
  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS, 0.500)){}
 8001808:	bf00      	nop
 800180a:	ed9f 0b6d 	vldr	d0, [pc, #436]	@ 80019c0 <main+0x1e8>
 800180e:	2241      	movs	r2, #65	@ 0x41
 8001810:	496f      	ldr	r1, [pc, #444]	@ (80019d0 <main+0x1f8>)
 8001812:	4870      	ldr	r0, [pc, #448]	@ (80019d4 <main+0x1fc>)
 8001814:	f7ff fde8 	bl	80013e8 <INA219_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f5      	beq.n	800180a <main+0x32>

  // Debug I2C
  if (HAL_I2C_IsDeviceReady(&hi2c1, PCA9685_ADDRESS, 1, HAL_MAX_DELAY) != HAL_OK) {
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	2201      	movs	r2, #1
 8001824:	2180      	movs	r1, #128	@ 0x80
 8001826:	486a      	ldr	r0, [pc, #424]	@ (80019d0 <main+0x1f8>)
 8001828:	f002 fdb6 	bl	8004398 <HAL_I2C_IsDeviceReady>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <main+0x5e>
        // Errore: il dispositivo non risponde
        Error_Handler();
 8001832:	f000 f959 	bl	8001ae8 <Error_Handler>
    }

  if (HAL_I2C_IsDeviceReady(&hi2c1, INA219_ADDRESS<<1, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	2201      	movs	r2, #1
 800183c:	2182      	movs	r1, #130	@ 0x82
 800183e:	4864      	ldr	r0, [pc, #400]	@ (80019d0 <main+0x1f8>)
 8001840:	f002 fdaa 	bl	8004398 <HAL_I2C_IsDeviceReady>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <main+0x76>
      // Errore: il dispositivo non risponde
      Error_Handler();
 800184a:	f000 f94d 	bl	8001ae8 <Error_Handler>
  }

  PCA9685_SetServoAngle(0, 0);
 800184e:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80019d8 <main+0x200>
 8001852:	2000      	movs	r0, #0
 8001854:	f000 fb08 	bl	8001e68 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(1, 0);
 8001858:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 80019d8 <main+0x200>
 800185c:	2001      	movs	r0, #1
 800185e:	f000 fb03 	bl	8001e68 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(2, 0);
 8001862:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 80019d8 <main+0x200>
 8001866:	2002      	movs	r0, #2
 8001868:	f000 fafe 	bl	8001e68 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(3, 0);
 800186c:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 80019d8 <main+0x200>
 8001870:	2003      	movs	r0, #3
 8001872:	f000 faf9 	bl	8001e68 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(4, 0);
 8001876:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 80019d8 <main+0x200>
 800187a:	2004      	movs	r0, #4
 800187c:	f000 faf4 	bl	8001e68 <PCA9685_SetServoAngle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  angles[0] = (uint8_t)((adcValues[0]*180)/4096);
 8001880:	4b51      	ldr	r3, [pc, #324]	@ (80019c8 <main+0x1f0>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	23b4      	movs	r3, #180	@ 0xb4
 8001888:	fb02 f303 	mul.w	r3, r2, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	da01      	bge.n	8001894 <main+0xbc>
 8001890:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001894:	131b      	asrs	r3, r3, #12
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b50      	ldr	r3, [pc, #320]	@ (80019dc <main+0x204>)
 800189a:	701a      	strb	r2, [r3, #0]
	  angles[1] = (uint8_t)((adcValues[1]*180)/4096);
 800189c:	4b4a      	ldr	r3, [pc, #296]	@ (80019c8 <main+0x1f0>)
 800189e:	885b      	ldrh	r3, [r3, #2]
 80018a0:	461a      	mov	r2, r3
 80018a2:	23b4      	movs	r3, #180	@ 0xb4
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da01      	bge.n	80018b0 <main+0xd8>
 80018ac:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80018b0:	131b      	asrs	r3, r3, #12
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	4b49      	ldr	r3, [pc, #292]	@ (80019dc <main+0x204>)
 80018b6:	705a      	strb	r2, [r3, #1]
	  angles[2] = (uint8_t)((adcValues[2]*180)/4096);
 80018b8:	4b43      	ldr	r3, [pc, #268]	@ (80019c8 <main+0x1f0>)
 80018ba:	889b      	ldrh	r3, [r3, #4]
 80018bc:	461a      	mov	r2, r3
 80018be:	23b4      	movs	r3, #180	@ 0xb4
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da01      	bge.n	80018cc <main+0xf4>
 80018c8:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80018cc:	131b      	asrs	r3, r3, #12
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b42      	ldr	r3, [pc, #264]	@ (80019dc <main+0x204>)
 80018d2:	709a      	strb	r2, [r3, #2]
	  angles[3] = (uint8_t)((adcValues[3]*180)/4096);
 80018d4:	4b3c      	ldr	r3, [pc, #240]	@ (80019c8 <main+0x1f0>)
 80018d6:	88db      	ldrh	r3, [r3, #6]
 80018d8:	461a      	mov	r2, r3
 80018da:	23b4      	movs	r3, #180	@ 0xb4
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	da01      	bge.n	80018e8 <main+0x110>
 80018e4:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80018e8:	131b      	asrs	r3, r3, #12
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b3b      	ldr	r3, [pc, #236]	@ (80019dc <main+0x204>)
 80018ee:	70da      	strb	r2, [r3, #3]

	  PCA9685_SetServoAngle(0, angles[0]);
 80018f0:	4b3a      	ldr	r3, [pc, #232]	@ (80019dc <main+0x204>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	ee07 3a90 	vmov	s15, r3
 80018f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001900:	2000      	movs	r0, #0
 8001902:	f000 fab1 	bl	8001e68 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(1, angles[1]);
 8001906:	4b35      	ldr	r3, [pc, #212]	@ (80019dc <main+0x204>)
 8001908:	785b      	ldrb	r3, [r3, #1]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	2001      	movs	r0, #1
 8001918:	f000 faa6 	bl	8001e68 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(2, angles[2]);
 800191c:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <main+0x204>)
 800191e:	789b      	ldrb	r3, [r3, #2]
 8001920:	ee07 3a90 	vmov	s15, r3
 8001924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001928:	eeb0 0a67 	vmov.f32	s0, s15
 800192c:	2002      	movs	r0, #2
 800192e:	f000 fa9b 	bl	8001e68 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(3, angles[3]);
 8001932:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <main+0x204>)
 8001934:	78db      	ldrb	r3, [r3, #3]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800193e:	eeb0 0a67 	vmov.f32	s0, s15
 8001942:	2003      	movs	r0, #3
 8001944:	f000 fa90 	bl	8001e68 <PCA9685_SetServoAngle>


	  if(gripper == 1){
 8001948:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <main+0x208>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d10a      	bne.n	8001966 <main+0x18e>
		  setpoint = 0.300;
 8001950:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <main+0x20c>)
 8001952:	4a25      	ldr	r2, [pc, #148]	@ (80019e8 <main+0x210>)
 8001954:	601a      	str	r2, [r3, #0]
		  Control_Loop(setpoint);
 8001956:	4b23      	ldr	r3, [pc, #140]	@ (80019e4 <main+0x20c>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	eeb0 0a67 	vmov.f32	s0, s15
 8001960:	f7ff fef0 	bl	8001744 <Control_Loop>
 8001964:	e00c      	b.n	8001980 <main+0x1a8>
	  }
	  else if (gripper == 0){
 8001966:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <main+0x208>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d108      	bne.n	8001980 <main+0x1a8>
		  setpoint = 0;
 800196e:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <main+0x20c>)
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
		  PCA9685_SetServoAngle(4, 0);
 8001976:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80019d8 <main+0x200>
 800197a:	2004      	movs	r0, #4
 800197c:	f000 fa74 	bl	8001e68 <PCA9685_SetServoAngle>
	  }

	  printf("PWM: %f\n", pwm_value);
 8001980:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <main+0x214>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fdff 	bl	8000588 <__aeabi_f2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4818      	ldr	r0, [pc, #96]	@ (80019f0 <main+0x218>)
 8001990:	f005 f9c4 	bl	8006d1c <iprintf>
	  printf("ERROR: %f\n", error);
 8001994:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <main+0x21c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fdf5 	bl	8000588 <__aeabi_f2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4815      	ldr	r0, [pc, #84]	@ (80019f8 <main+0x220>)
 80019a4:	f005 f9ba 	bl	8006d1c <iprintf>
	  printf("CURRENT: %f\n", current_value);
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <main+0x224>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdeb 	bl	8000588 <__aeabi_f2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4812      	ldr	r0, [pc, #72]	@ (8001a00 <main+0x228>)
 80019b8:	f005 f9b0 	bl	8006d1c <iprintf>
	  angles[0] = (uint8_t)((adcValues[0]*180)/4096);
 80019bc:	e760      	b.n	8001880 <main+0xa8>
 80019be:	bf00      	nop
 80019c0:	00000000 	.word	0x00000000
 80019c4:	3fe00000 	.word	0x3fe00000
 80019c8:	20000304 	.word	0x20000304
 80019cc:	20000204 	.word	0x20000204
 80019d0:	200002ac 	.word	0x200002ac
 80019d4:	20000318 	.word	0x20000318
 80019d8:	00000000 	.word	0x00000000
 80019dc:	2000030c 	.word	0x2000030c
 80019e0:	20000310 	.word	0x20000310
 80019e4:	20000340 	.word	0x20000340
 80019e8:	3e99999a 	.word	0x3e99999a
 80019ec:	20000338 	.word	0x20000338
 80019f0:	08008d20 	.word	0x08008d20
 80019f4:	2000033c 	.word	0x2000033c
 80019f8:	08008d2c 	.word	0x08008d2c
 80019fc:	20000344 	.word	0x20000344
 8001a00:	08008d38 	.word	0x08008d38

08001a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b094      	sub	sp, #80	@ 0x50
 8001a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	2234      	movs	r2, #52	@ 0x34
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f005 f9d7 	bl	8006dc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae0 <SystemClock_Config+0xdc>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	4a2b      	ldr	r2, [pc, #172]	@ (8001ae0 <SystemClock_Config+0xdc>)
 8001a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a38:	4b29      	ldr	r3, [pc, #164]	@ (8001ae0 <SystemClock_Config+0xdc>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a44:	2300      	movs	r3, #0
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	4b26      	ldr	r3, [pc, #152]	@ (8001ae4 <SystemClock_Config+0xe0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ae4 <SystemClock_Config+0xe0>)
 8001a4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b23      	ldr	r3, [pc, #140]	@ (8001ae4 <SystemClock_Config+0xe0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a60:	2301      	movs	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a74:	2304      	movs	r3, #4
 8001a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001a78:	23b4      	movs	r3, #180	@ 0xb4
 8001a7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a80:	2302      	movs	r3, #2
 8001a82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 fd81 	bl	8005594 <HAL_RCC_OscConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a98:	f000 f826 	bl	8001ae8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a9c:	f003 f9e0 	bl	8004e60 <HAL_PWREx_EnableOverDrive>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001aa6:	f000 f81f 	bl	8001ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aaa:	230f      	movs	r3, #15
 8001aac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ab6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001abc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	2105      	movs	r1, #5
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 fa19 	bl	8004f00 <HAL_RCC_ClockConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ad4:	f000 f808 	bl	8001ae8 <Error_Handler>
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3750      	adds	r7, #80	@ 0x50
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40007000 	.word	0x40007000

08001ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aec:	b672      	cpsid	i
}
 8001aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <Error_Handler+0x8>

08001af4 <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af04      	add	r7, sp, #16
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
 8001afe:	460b      	mov	r3, r1
 8001b00:	71bb      	strb	r3, [r7, #6]
 8001b02:	4613      	mov	r3, r2
 8001b04:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 8001b06:	797b      	ldrb	r3, [r7, #5]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <PCA9685_SetBit+0x1c>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001b10:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <PCA9685_SetBit+0xb0>)
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	230a      	movs	r3, #10
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	f107 030f 	add.w	r3, r7, #15
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2301      	movs	r3, #1
 8001b28:	2180      	movs	r1, #128	@ 0x80
 8001b2a:	f002 fa03 	bl	8003f34 <HAL_I2C_Mem_Read>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e031      	b.n	8001b9c <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8001b38:	79bb      	ldrb	r3, [r7, #6]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	b25b      	sxtb	r3, r3
 8001b42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	b25a      	sxtb	r2, r3
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	4013      	ands	r3, r2
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8001b58:	797b      	ldrb	r3, [r7, #5]
 8001b5a:	f003 0201 	and.w	r2, r3, #1
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	b25a      	sxtb	r2, r3
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	b25b      	sxtb	r3, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001b72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <PCA9685_SetBit+0xb0>)
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	230a      	movs	r3, #10
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	f107 030f 	add.w	r3, r7, #15
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	2180      	movs	r1, #128	@ 0x80
 8001b8c:	f002 f8d8 	bl	8003d40 <HAL_I2C_Mem_Write>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000348 	.word	0x20000348

08001ba8 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001bae:	2306      	movs	r3, #6
 8001bb0:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <PCA9685_SoftwareReset+0x30>)
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	1dfa      	adds	r2, r7, #7
 8001bb8:	230a      	movs	r3, #10
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	f001 ffc0 	bl	8003b44 <HAL_I2C_Master_Transmit>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000348 	.word	0x20000348

08001bdc <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	461a      	mov	r2, r3
 8001bea:	2104      	movs	r1, #4
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff ff81 	bl	8001af4 <PCA9685_SetBit>
 8001bf2:	4603      	mov	r3, r0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2107      	movs	r1, #7
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f7ff ff71 	bl	8001af4 <PCA9685_SetBit>
 8001c12:	4603      	mov	r3, r0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2105      	movs	r1, #5
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff ff61 	bl	8001af4 <PCA9685_SetBit>
 8001c32:	4603      	mov	r3, r0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	0000      	movs	r0, r0
	...

08001c40 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af04      	add	r7, sp, #16
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d902      	bls.n	8001c5a <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8001c54:	2303      	movs	r3, #3
 8001c56:	72fb      	strb	r3, [r7, #11]
 8001c58:	e046      	b.n	8001ce8 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	2b18      	cmp	r3, #24
 8001c5e:	d802      	bhi.n	8001c66 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001c60:	23ff      	movs	r3, #255	@ 0xff
 8001c62:	72fb      	strb	r3, [r7, #11]
 8001c64:	e040      	b.n	8001ce8 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c70:	ee17 0a90 	vmov	r0, s15
 8001c74:	f7fe fc88 	bl	8000588 <__aeabi_f2d>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d28 <PCA9685_SetPwmFrequency+0xe8>)
 8001c7e:	f7fe fcdb 	bl	8000638 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	a126      	add	r1, pc, #152	@ (adr r1, 8001d20 <PCA9685_SetPwmFrequency+0xe0>)
 8001c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c8c:	f7fe fdfe 	bl	800088c <__aeabi_ddiv>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <PCA9685_SetPwmFrequency+0xec>)
 8001c9e:	f7fe fb13 	bl	80002c8 <__aeabi_dsub>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7fe ffbd 	bl	8000c28 <__aeabi_d2f>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7fe fc68 	bl	8000588 <__aeabi_f2d>
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d30 <PCA9685_SetPwmFrequency+0xf0>)
 8001cbe:	f7fe fb05 	bl	80002cc <__adddf3>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	ec43 2b17 	vmov	d7, r2, r3
 8001cca:	eeb0 0a47 	vmov.f32	s0, s14
 8001cce:	eef0 0a67 	vmov.f32	s1, s15
 8001cd2:	f006 ff9d 	bl	8008c10 <floor>
 8001cd6:	ec53 2b10 	vmov	r2, r3, d0
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe ff83 	bl	8000be8 <__aeabi_d2uiz>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff ff77 	bl	8001bdc <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <PCA9685_SetPwmFrequency+0xf4>)
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	230a      	movs	r3, #10
 8001cf4:	9302      	str	r3, [sp, #8]
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	f107 030b 	add.w	r3, r7, #11
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2301      	movs	r3, #1
 8001d02:	22fe      	movs	r2, #254	@ 0xfe
 8001d04:	2180      	movs	r1, #128	@ 0x80
 8001d06:	f002 f81b 	bl	8003d40 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f7ff ff66 	bl	8001bdc <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f7ff ff73 	bl	8001bfc <PCA9685_RestartMode>
	return PCA9685_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	00000000 	.word	0x00000000
 8001d24:	4177d784 	.word	0x4177d784
 8001d28:	40b00000 	.word	0x40b00000
 8001d2c:	3ff00000 	.word	0x3ff00000
 8001d30:	3fe00000 	.word	0x3fe00000
 8001d34:	20000348 	.word	0x20000348

08001d38 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af04      	add	r7, sp, #16
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	460b      	mov	r3, r1
 8001d44:	80bb      	strh	r3, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3306      	adds	r3, #6
 8001d52:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8001d54:	88bb      	ldrh	r3, [r7, #4]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8001d6a:	887b      	ldrh	r3, [r7, #2]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001d74:	4b0c      	ldr	r3, [pc, #48]	@ (8001da8 <PCA9685_SetPwm+0x70>)
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	230a      	movs	r3, #10
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	2304      	movs	r3, #4
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	2180      	movs	r1, #128	@ 0x80
 8001d8e:	f001 ffd7 	bl	8003d40 <HAL_I2C_Mem_Write>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000348 	.word	0x20000348

08001dac <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
 8001db6:	460b      	mov	r3, r1
 8001db8:	80bb      	strh	r3, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 8001dbe:	88bb      	ldrh	r3, [r7, #4]
 8001dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dc4:	d302      	bcc.n	8001dcc <PCA9685_SetPin+0x20>
 8001dc6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001dca:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 8001dcc:	79bb      	ldrb	r3, [r7, #6]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d025      	beq.n	8001e1e <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8001dd2:	88bb      	ldrh	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d108      	bne.n	8001dea <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ffa9 	bl	8001d38 <PCA9685_SetPwm>
 8001de6:	4603      	mov	r3, r0
 8001de8:	e03a      	b.n	8001e60 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8001dea:	88bb      	ldrh	r3, [r7, #4]
 8001dec:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d108      	bne.n	8001e06 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff9b 	bl	8001d38 <PCA9685_SetPwm>
 8001e02:	4603      	mov	r3, r0
 8001e04:	e02c      	b.n	8001e60 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8001e06:	88bb      	ldrh	r3, [r7, #4]
 8001e08:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001e0c:	330f      	adds	r3, #15
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff8f 	bl	8001d38 <PCA9685_SetPwm>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	e020      	b.n	8001e60 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8001e1e:	88bb      	ldrh	r3, [r7, #4]
 8001e20:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d108      	bne.n	8001e3a <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff81 	bl	8001d38 <PCA9685_SetPwm>
 8001e36:	4603      	mov	r3, r0
 8001e38:	e012      	b.n	8001e60 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8001e3a:	88bb      	ldrh	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d108      	bne.n	8001e52 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e46:	2100      	movs	r1, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff75 	bl	8001d38 <PCA9685_SetPwm>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	e006      	b.n	8001e60 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8001e52:	88ba      	ldrh	r2, [r7, #4]
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff6d 	bl	8001d38 <PCA9685_SetPwm>
 8001e5e:	4603      	mov	r3, r0
    }
  }
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	ed87 0a00 	vstr	s0, [r7]
 8001e74:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8001e76:	edd7 7a00 	vldr	s15, [r7]
 8001e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	d502      	bpl.n	8001e8a <PCA9685_SetServoAngle+0x22>
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8001e8a:	edd7 7a00 	vldr	s15, [r7]
 8001e8e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001f10 <PCA9685_SetServoAngle+0xa8>
 8001e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	dd01      	ble.n	8001ea0 <PCA9685_SetServoAngle+0x38>
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <PCA9685_SetServoAngle+0xac>)
 8001e9e:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001ea0:	6838      	ldr	r0, [r7, #0]
 8001ea2:	f7fe fb71 	bl	8000588 <__aeabi_f2d>
 8001ea6:	a318      	add	r3, pc, #96	@ (adr r3, 8001f08 <PCA9685_SetServoAngle+0xa0>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	f7fe fbc4 	bl	8000638 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <PCA9685_SetServoAngle+0xb0>)
 8001ebe:	f7fe fce5 	bl	800088c <__aeabi_ddiv>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <PCA9685_SetServoAngle+0xb4>)
 8001ed0:	f7fe f9fc 	bl	80002cc <__adddf3>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fea4 	bl	8000c28 <__aeabi_d2f>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8001ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eec:	ee17 3a90 	vmov	r3, s15
 8001ef0:	b299      	uxth	r1, r3
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff58 	bl	8001dac <PCA9685_SetPin>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	00000000 	.word	0x00000000
 8001f0c:	40786000 	.word	0x40786000
 8001f10:	43340000 	.word	0x43340000
 8001f14:	43340000 	.word	0x43340000
 8001f18:	40668000 	.word	0x40668000
 8001f1c:	405b8000 	.word	0x405b8000

08001f20 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001f28:	4a07      	ldr	r2, [pc, #28]	@ (8001f48 <PCA9685_Init+0x28>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8001f2e:	f7ff fe3b 	bl	8001ba8 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8001f32:	2030      	movs	r0, #48	@ 0x30
 8001f34:	f7ff fe84 	bl	8001c40 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f7ff fe6f 	bl	8001c1c <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000348 	.word	0x20000348

08001f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <HAL_MspInit+0x4c>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f98 <HAL_MspInit+0x4c>)
 8001f5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f62:	4b0d      	ldr	r3, [pc, #52]	@ (8001f98 <HAL_MspInit+0x4c>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_MspInit+0x4c>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	4a08      	ldr	r2, [pc, #32]	@ (8001f98 <HAL_MspInit+0x4c>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_MspInit+0x4c>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001f8a:	2005      	movs	r0, #5
 8001f8c:	f000 ff1e 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800

08001f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <NMI_Handler+0x4>

08001fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <HardFault_Handler+0x4>

08001fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <MemManage_Handler+0x4>

08001fb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <BusFault_Handler+0x4>

08001fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <UsageFault_Handler+0x4>

08001fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff2:	f000 f9d9 	bl	80023a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001ffe:	2001      	movs	r0, #1
 8002000:	f001 fc44 	bl	800388c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800200c:	4802      	ldr	r0, [pc, #8]	@ (8002018 <DMA2_Stream0_IRQHandler+0x10>)
 800200e:	f001 f825 	bl	800305c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000024c 	.word	0x2000024c

0800201c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return 1;
 8002020:	2301      	movs	r3, #1
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_kill>:

int _kill(int pid, int sig)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002036:	f004 ff19 	bl	8006e6c <__errno>
 800203a:	4603      	mov	r3, r0
 800203c:	2216      	movs	r2, #22
 800203e:	601a      	str	r2, [r3, #0]
  return -1;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_exit>:

void _exit (int status)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ffe7 	bl	800202c <_kill>
  while (1) {}    /* Make sure we hang here */
 800205e:	bf00      	nop
 8002060:	e7fd      	b.n	800205e <_exit+0x12>

08002062 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	e00a      	b.n	800208a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002074:	f3af 8000 	nop.w
 8002078:	4601      	mov	r1, r0
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	60ba      	str	r2, [r7, #8]
 8002080:	b2ca      	uxtb	r2, r1
 8002082:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3301      	adds	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	429a      	cmp	r2, r3
 8002090:	dbf0      	blt.n	8002074 <_read+0x12>
  }

  return len;
 8002092:	687b      	ldr	r3, [r7, #4]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	e009      	b.n	80020c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	60ba      	str	r2, [r7, #8]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fb7a 	bl	80017b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3301      	adds	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	dbf1      	blt.n	80020ae <_write+0x12>
  }
  return len;
 80020ca:	687b      	ldr	r3, [r7, #4]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_close>:

int _close(int file)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020fc:	605a      	str	r2, [r3, #4]
  return 0;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <_isatty>:

int _isatty(int file)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002114:	2301      	movs	r3, #1
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002144:	4a14      	ldr	r2, [pc, #80]	@ (8002198 <_sbrk+0x5c>)
 8002146:	4b15      	ldr	r3, [pc, #84]	@ (800219c <_sbrk+0x60>)
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002150:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002158:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <_sbrk+0x64>)
 800215a:	4a12      	ldr	r2, [pc, #72]	@ (80021a4 <_sbrk+0x68>)
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215e:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d207      	bcs.n	800217c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800216c:	f004 fe7e 	bl	8006e6c <__errno>
 8002170:	4603      	mov	r3, r0
 8002172:	220c      	movs	r2, #12
 8002174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	e009      	b.n	8002190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002182:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	4a05      	ldr	r2, [pc, #20]	@ (80021a0 <_sbrk+0x64>)
 800218c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218e:	68fb      	ldr	r3, [r7, #12]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20020000 	.word	0x20020000
 800219c:	00000400 	.word	0x00000400
 80021a0:	2000034c 	.word	0x2000034c
 80021a4:	200004e8 	.word	0x200004e8

080021a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <SystemInit+0x20>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b2:	4a05      	ldr	r2, [pc, #20]	@ (80021c8 <SystemInit+0x20>)
 80021b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <MX_USART2_UART_Init+0x4c>)
 80021d2:	4a12      	ldr	r2, [pc, #72]	@ (800221c <MX_USART2_UART_Init+0x50>)
 80021d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <MX_USART2_UART_Init+0x4c>)
 80021d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <MX_USART2_UART_Init+0x4c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <MX_USART2_UART_Init+0x4c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <MX_USART2_UART_Init+0x4c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021f0:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <MX_USART2_UART_Init+0x4c>)
 80021f2:	220c      	movs	r2, #12
 80021f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <MX_USART2_UART_Init+0x4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <MX_USART2_UART_Init+0x4c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002202:	4805      	ldr	r0, [pc, #20]	@ (8002218 <MX_USART2_UART_Init+0x4c>)
 8002204:	f003 fc64 	bl	8005ad0 <HAL_UART_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800220e:	f7ff fc6b 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000350 	.word	0x20000350
 800221c:	40004400 	.word	0x40004400

08002220 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	@ 0x28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a19      	ldr	r2, [pc, #100]	@ (80022a4 <HAL_UART_MspInit+0x84>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d12b      	bne.n	800229a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	4b18      	ldr	r3, [pc, #96]	@ (80022a8 <HAL_UART_MspInit+0x88>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	4a17      	ldr	r2, [pc, #92]	@ (80022a8 <HAL_UART_MspInit+0x88>)
 800224c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002250:	6413      	str	r3, [r2, #64]	@ 0x40
 8002252:	4b15      	ldr	r3, [pc, #84]	@ (80022a8 <HAL_UART_MspInit+0x88>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_UART_MspInit+0x88>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	4a10      	ldr	r2, [pc, #64]	@ (80022a8 <HAL_UART_MspInit+0x88>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6313      	str	r3, [r2, #48]	@ 0x30
 800226e:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <HAL_UART_MspInit+0x88>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800227a:	230c      	movs	r3, #12
 800227c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800228a:	2307      	movs	r3, #7
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4619      	mov	r1, r3
 8002294:	4805      	ldr	r0, [pc, #20]	@ (80022ac <HAL_UART_MspInit+0x8c>)
 8002296:	f001 f94b 	bl	8003530 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800229a:	bf00      	nop
 800229c:	3728      	adds	r7, #40	@ 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40004400 	.word	0x40004400
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020000 	.word	0x40020000

080022b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022b4:	f7ff ff78 	bl	80021a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b8:	480c      	ldr	r0, [pc, #48]	@ (80022ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ba:	490d      	ldr	r1, [pc, #52]	@ (80022f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022bc:	4a0d      	ldr	r2, [pc, #52]	@ (80022f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c0:	e002      	b.n	80022c8 <LoopCopyDataInit>

080022c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c6:	3304      	adds	r3, #4

080022c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022cc:	d3f9      	bcc.n	80022c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ce:	4a0a      	ldr	r2, [pc, #40]	@ (80022f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022d0:	4c0a      	ldr	r4, [pc, #40]	@ (80022fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d4:	e001      	b.n	80022da <LoopFillZerobss>

080022d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d8:	3204      	adds	r2, #4

080022da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022dc:	d3fb      	bcc.n	80022d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022de:	f004 fdcb 	bl	8006e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e2:	f7ff fa79 	bl	80017d8 <main>
  bx  lr    
 80022e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80022f4:	080090e8 	.word	0x080090e8
  ldr r2, =_sbss
 80022f8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80022fc:	200004e8 	.word	0x200004e8

08002300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <ADC_IRQHandler>
	...

08002304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002308:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0d      	ldr	r2, [pc, #52]	@ (8002344 <HAL_Init+0x40>)
 800230e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_Init+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <HAL_Init+0x40>)
 800231a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800231e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002320:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <HAL_Init+0x40>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a07      	ldr	r2, [pc, #28]	@ (8002344 <HAL_Init+0x40>)
 8002326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800232a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f000 fd4d 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002332:	2000      	movs	r0, #0
 8002334:	f000 f808 	bl	8002348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002338:	f7ff fe08 	bl	8001f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023c00 	.word	0x40023c00

08002348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002350:	4b12      	ldr	r3, [pc, #72]	@ (800239c <HAL_InitTick+0x54>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <HAL_InitTick+0x58>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800235e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fd65 	bl	8002e36 <HAL_SYSTICK_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e00e      	b.n	8002394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d80a      	bhi.n	8002392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237c:	2200      	movs	r2, #0
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f000 fd2d 	bl	8002de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002388:	4a06      	ldr	r2, [pc, #24]	@ (80023a4 <HAL_InitTick+0x5c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e000      	b.n	8002394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000010 	.word	0x20000010
 80023a0:	20000018 	.word	0x20000018
 80023a4:	20000014 	.word	0x20000014

080023a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <HAL_IncTick+0x20>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_IncTick+0x24>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <HAL_IncTick+0x24>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000018 	.word	0x20000018
 80023cc:	20000398 	.word	0x20000398

080023d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return uwTick;
 80023d4:	4b03      	ldr	r3, [pc, #12]	@ (80023e4 <HAL_GetTick+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000398 	.word	0x20000398

080023e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e033      	b.n	8002466 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fe52 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800242e:	f023 0302 	bic.w	r3, r3, #2
 8002432:	f043 0202 	orr.w	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fa78 	bl	8002930 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	f023 0303 	bic.w	r3, r3, #3
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40
 8002456:	e001      	b.n	800245c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_ADC_Start_DMA+0x1e>
 800248a:	2302      	movs	r3, #2
 800248c:	e0e9      	b.n	8002662 <HAL_ADC_Start_DMA+0x1f2>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d018      	beq.n	80024d6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024b4:	4b6d      	ldr	r3, [pc, #436]	@ (800266c <HAL_ADC_Start_DMA+0x1fc>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a6d      	ldr	r2, [pc, #436]	@ (8002670 <HAL_ADC_Start_DMA+0x200>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0c9a      	lsrs	r2, r3, #18
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024c8:	e002      	b.n	80024d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f9      	bne.n	80024ca <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024e4:	d107      	bne.n	80024f6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024f4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	f040 80a1 	bne.w	8002648 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800250e:	f023 0301 	bic.w	r3, r3, #1
 8002512:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002530:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002544:	d106      	bne.n	8002554 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	f023 0206 	bic.w	r2, r3, #6
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	645a      	str	r2, [r3, #68]	@ 0x44
 8002552:	e002      	b.n	800255a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002562:	4b44      	ldr	r3, [pc, #272]	@ (8002674 <HAL_ADC_Start_DMA+0x204>)
 8002564:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256a:	4a43      	ldr	r2, [pc, #268]	@ (8002678 <HAL_ADC_Start_DMA+0x208>)
 800256c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002572:	4a42      	ldr	r2, [pc, #264]	@ (800267c <HAL_ADC_Start_DMA+0x20c>)
 8002574:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257a:	4a41      	ldr	r2, [pc, #260]	@ (8002680 <HAL_ADC_Start_DMA+0x210>)
 800257c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002586:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002596:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025a6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	334c      	adds	r3, #76	@ 0x4c
 80025b2:	4619      	mov	r1, r3
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f000 fcf8 	bl	8002fac <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d12a      	bne.n	800261e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002684 <HAL_ADC_Start_DMA+0x214>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d015      	beq.n	80025fe <HAL_ADC_Start_DMA+0x18e>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002688 <HAL_ADC_Start_DMA+0x218>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d105      	bne.n	80025e8 <HAL_ADC_Start_DMA+0x178>
 80025dc:	4b25      	ldr	r3, [pc, #148]	@ (8002674 <HAL_ADC_Start_DMA+0x204>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a27      	ldr	r2, [pc, #156]	@ (800268c <HAL_ADC_Start_DMA+0x21c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d136      	bne.n	8002660 <HAL_ADC_Start_DMA+0x1f0>
 80025f2:	4b20      	ldr	r3, [pc, #128]	@ (8002674 <HAL_ADC_Start_DMA+0x204>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d130      	bne.n	8002660 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d129      	bne.n	8002660 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	e020      	b.n	8002660 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a18      	ldr	r2, [pc, #96]	@ (8002684 <HAL_ADC_Start_DMA+0x214>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d11b      	bne.n	8002660 <HAL_ADC_Start_DMA+0x1f0>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d114      	bne.n	8002660 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	e00b      	b.n	8002660 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	f043 0210 	orr.w	r2, r3, #16
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002658:	f043 0201 	orr.w	r2, r3, #1
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000010 	.word	0x20000010
 8002670:	431bde83 	.word	0x431bde83
 8002674:	40012300 	.word	0x40012300
 8002678:	08002b29 	.word	0x08002b29
 800267c:	08002be3 	.word	0x08002be3
 8002680:	08002bff 	.word	0x08002bff
 8002684:	40012000 	.word	0x40012000
 8002688:	40012100 	.word	0x40012100
 800268c:	40012200 	.word	0x40012200

08002690 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1c>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e113      	b.n	8002910 <HAL_ADC_ConfigChannel+0x244>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b09      	cmp	r3, #9
 80026f6:	d925      	bls.n	8002744 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68d9      	ldr	r1, [r3, #12]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	3b1e      	subs	r3, #30
 800270e:	2207      	movs	r2, #7
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43da      	mvns	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	400a      	ands	r2, r1
 800271c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68d9      	ldr	r1, [r3, #12]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	b29b      	uxth	r3, r3
 800272e:	4618      	mov	r0, r3
 8002730:	4603      	mov	r3, r0
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4403      	add	r3, r0
 8002736:	3b1e      	subs	r3, #30
 8002738:	409a      	lsls	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	e022      	b.n	800278a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6919      	ldr	r1, [r3, #16]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	2207      	movs	r2, #7
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43da      	mvns	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	400a      	ands	r2, r1
 8002766:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6919      	ldr	r1, [r3, #16]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	4618      	mov	r0, r3
 800277a:	4603      	mov	r3, r0
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4403      	add	r3, r0
 8002780:	409a      	lsls	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b06      	cmp	r3, #6
 8002790:	d824      	bhi.n	80027dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	3b05      	subs	r3, #5
 80027a4:	221f      	movs	r2, #31
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	400a      	ands	r2, r1
 80027b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	4618      	mov	r0, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	3b05      	subs	r3, #5
 80027ce:	fa00 f203 	lsl.w	r2, r0, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80027da:	e04c      	b.n	8002876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b0c      	cmp	r3, #12
 80027e2:	d824      	bhi.n	800282e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	3b23      	subs	r3, #35	@ 0x23
 80027f6:	221f      	movs	r2, #31
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43da      	mvns	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	400a      	ands	r2, r1
 8002804:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	4618      	mov	r0, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	3b23      	subs	r3, #35	@ 0x23
 8002820:	fa00 f203 	lsl.w	r2, r0, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30
 800282c:	e023      	b.n	8002876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	3b41      	subs	r3, #65	@ 0x41
 8002840:	221f      	movs	r2, #31
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	400a      	ands	r2, r1
 800284e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	4618      	mov	r0, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	3b41      	subs	r3, #65	@ 0x41
 800286a:	fa00 f203 	lsl.w	r2, r0, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002876:	4b29      	ldr	r3, [pc, #164]	@ (800291c <HAL_ADC_ConfigChannel+0x250>)
 8002878:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a28      	ldr	r2, [pc, #160]	@ (8002920 <HAL_ADC_ConfigChannel+0x254>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d10f      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1d8>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b12      	cmp	r3, #18
 800288a:	d10b      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002920 <HAL_ADC_ConfigChannel+0x254>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d12b      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x23a>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002924 <HAL_ADC_ConfigChannel+0x258>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d003      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0x1f4>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b11      	cmp	r3, #17
 80028be:	d122      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a11      	ldr	r2, [pc, #68]	@ (8002924 <HAL_ADC_ConfigChannel+0x258>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d111      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028e2:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HAL_ADC_ConfigChannel+0x25c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a11      	ldr	r2, [pc, #68]	@ (800292c <HAL_ADC_ConfigChannel+0x260>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	0c9a      	lsrs	r2, r3, #18
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028f8:	e002      	b.n	8002900 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f9      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	40012300 	.word	0x40012300
 8002920:	40012000 	.word	0x40012000
 8002924:	10000012 	.word	0x10000012
 8002928:	20000010 	.word	0x20000010
 800292c:	431bde83 	.word	0x431bde83

08002930 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002938:	4b79      	ldr	r3, [pc, #484]	@ (8002b20 <ADC_Init+0x1f0>)
 800293a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	431a      	orrs	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	021a      	lsls	r2, r3, #8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6899      	ldr	r1, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	4a58      	ldr	r2, [pc, #352]	@ (8002b24 <ADC_Init+0x1f4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d022      	beq.n	8002a0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6899      	ldr	r1, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6899      	ldr	r1, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	e00f      	b.n	8002a2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0202 	bic.w	r2, r2, #2
 8002a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6899      	ldr	r1, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7e1b      	ldrb	r3, [r3, #24]
 8002a48:	005a      	lsls	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01b      	beq.n	8002a94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a6a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	3b01      	subs	r3, #1
 8002a88:	035a      	lsls	r2, r3, #13
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	e007      	b.n	8002aa4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aa2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	051a      	lsls	r2, r3, #20
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ad8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6899      	ldr	r1, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ae6:	025a      	lsls	r2, r3, #9
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002afe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6899      	ldr	r1, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	029a      	lsls	r2, r3, #10
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	609a      	str	r2, [r3, #8]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40012300 	.word	0x40012300
 8002b24:	0f000001 	.word	0x0f000001

08002b28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d13c      	bne.n	8002bbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d12b      	bne.n	8002bb4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d127      	bne.n	8002bb4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d119      	bne.n	8002bb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0220 	bic.w	r2, r2, #32
 8002b8e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	f043 0201 	orr.w	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f7ff fd6b 	bl	8002690 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bba:	e00e      	b.n	8002bda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f7ff fd75 	bl	80026b8 <HAL_ADC_ErrorCallback>
}
 8002bce:	e004      	b.n	8002bda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff fd57 	bl	80026a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2240      	movs	r2, #64	@ 0x40
 8002c10:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f043 0204 	orr.w	r2, r3, #4
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f7ff fd4a 	bl	80026b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5e:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	60d3      	str	r3, [r2, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	@ (8002cc8 <__NVIC_EnableIRQ+0x38>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	@ (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	@ (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	@ 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
         );
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	@ 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f7ff ff8e 	bl	8002ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff29 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df4:	f7ff ff3e 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff8e 	bl	8002d20 <NVIC_EncodePriority>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff5d 	bl	8002ccc <__NVIC_SetPriority>
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff31 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ffa2 	bl	8002d88 <SysTick_Config>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff fab8 	bl	80023d0 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e099      	b.n	8002fa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8c:	e00f      	b.n	8002eae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8e:	f7ff fa9f 	bl	80023d0 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d908      	bls.n	8002eae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e078      	b.n	8002fa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e8      	bne.n	8002e8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4b38      	ldr	r3, [pc, #224]	@ (8002fa8 <HAL_DMA_Init+0x158>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d107      	bne.n	8002f18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f10:	4313      	orrs	r3, r2
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f023 0307 	bic.w	r3, r3, #7
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d117      	bne.n	8002f72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00e      	beq.n	8002f72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fa6f 	bl	8003438 <DMA_CheckFifoParam>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2240      	movs	r2, #64	@ 0x40
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e016      	b.n	8002fa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa26 	bl	80033cc <DMA_CalcBaseAndBitshift>
 8002f80:	4603      	mov	r3, r0
 8002f82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f88:	223f      	movs	r2, #63	@ 0x3f
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	f010803f 	.word	0xf010803f

08002fac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_DMA_Start_IT+0x26>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e040      	b.n	8003054 <HAL_DMA_Start_IT+0xa8>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d12f      	bne.n	8003046 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f9b8 	bl	8003370 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003004:	223f      	movs	r2, #63	@ 0x3f
 8003006:	409a      	lsls	r2, r3
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0216 	orr.w	r2, r2, #22
 800301a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0208 	orr.w	r2, r2, #8
 8003032:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e005      	b.n	8003052 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800304e:	2302      	movs	r3, #2
 8003050:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003052:	7dfb      	ldrb	r3, [r7, #23]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003068:	4b8e      	ldr	r3, [pc, #568]	@ (80032a4 <HAL_DMA_IRQHandler+0x248>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a8e      	ldr	r2, [pc, #568]	@ (80032a8 <HAL_DMA_IRQHandler+0x24c>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0a9b      	lsrs	r3, r3, #10
 8003074:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003086:	2208      	movs	r2, #8
 8003088:	409a      	lsls	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d01a      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0204 	bic.w	r2, r2, #4
 80030ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b4:	2208      	movs	r2, #8
 80030b6:	409a      	lsls	r2, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030cc:	2201      	movs	r2, #1
 80030ce:	409a      	lsls	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d012      	beq.n	80030fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ea:	2201      	movs	r2, #1
 80030ec:	409a      	lsls	r2, r3
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f6:	f043 0202 	orr.w	r2, r3, #2
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003102:	2204      	movs	r2, #4
 8003104:	409a      	lsls	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d012      	beq.n	8003134 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003120:	2204      	movs	r2, #4
 8003122:	409a      	lsls	r2, r3
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312c:	f043 0204 	orr.w	r2, r3, #4
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003138:	2210      	movs	r2, #16
 800313a:	409a      	lsls	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d043      	beq.n	80031cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d03c      	beq.n	80031cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003156:	2210      	movs	r2, #16
 8003158:	409a      	lsls	r2, r3
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d018      	beq.n	800319e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d108      	bne.n	800318c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d024      	beq.n	80031cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
 800318a:	e01f      	b.n	80031cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01b      	beq.n	80031cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4798      	blx	r3
 800319c:	e016      	b.n	80031cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0208 	bic.w	r2, r2, #8
 80031ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d0:	2220      	movs	r2, #32
 80031d2:	409a      	lsls	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 808f 	beq.w	80032fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8087 	beq.w	80032fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f2:	2220      	movs	r2, #32
 80031f4:	409a      	lsls	r2, r3
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b05      	cmp	r3, #5
 8003204:	d136      	bne.n	8003274 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0216 	bic.w	r2, r2, #22
 8003214:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003224:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d103      	bne.n	8003236 <HAL_DMA_IRQHandler+0x1da>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0208 	bic.w	r2, r2, #8
 8003244:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324a:	223f      	movs	r2, #63	@ 0x3f
 800324c:	409a      	lsls	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003266:	2b00      	cmp	r3, #0
 8003268:	d07e      	beq.n	8003368 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
        }
        return;
 8003272:	e079      	b.n	8003368 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01d      	beq.n	80032be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10d      	bne.n	80032ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003294:	2b00      	cmp	r3, #0
 8003296:	d031      	beq.n	80032fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
 80032a0:	e02c      	b.n	80032fc <HAL_DMA_IRQHandler+0x2a0>
 80032a2:	bf00      	nop
 80032a4:	20000010 	.word	0x20000010
 80032a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d023      	beq.n	80032fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
 80032bc:	e01e      	b.n	80032fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10f      	bne.n	80032ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0210 	bic.w	r2, r2, #16
 80032da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003300:	2b00      	cmp	r3, #0
 8003302:	d032      	beq.n	800336a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d022      	beq.n	8003356 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2205      	movs	r2, #5
 8003314:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	3301      	adds	r3, #1
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	429a      	cmp	r2, r3
 8003332:	d307      	bcc.n	8003344 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f2      	bne.n	8003328 <HAL_DMA_IRQHandler+0x2cc>
 8003342:	e000      	b.n	8003346 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003344:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
 8003366:	e000      	b.n	800336a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003368:	bf00      	nop
    }
  }
}
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800338c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b40      	cmp	r3, #64	@ 0x40
 800339c:	d108      	bne.n	80033b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033ae:	e007      	b.n	80033c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	3b10      	subs	r3, #16
 80033dc:	4a14      	ldr	r2, [pc, #80]	@ (8003430 <DMA_CalcBaseAndBitshift+0x64>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033e6:	4a13      	ldr	r2, [pc, #76]	@ (8003434 <DMA_CalcBaseAndBitshift+0x68>)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d909      	bls.n	800340e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003402:	f023 0303 	bic.w	r3, r3, #3
 8003406:	1d1a      	adds	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	659a      	str	r2, [r3, #88]	@ 0x58
 800340c:	e007      	b.n	800341e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003416:	f023 0303 	bic.w	r3, r3, #3
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	aaaaaaab 	.word	0xaaaaaaab
 8003434:	08008d60 	.word	0x08008d60

08003438 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003448:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d11f      	bne.n	8003492 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d856      	bhi.n	8003506 <DMA_CheckFifoParam+0xce>
 8003458:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <DMA_CheckFifoParam+0x28>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003471 	.word	0x08003471
 8003464:	08003483 	.word	0x08003483
 8003468:	08003471 	.word	0x08003471
 800346c:	08003507 	.word	0x08003507
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d046      	beq.n	800350a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003480:	e043      	b.n	800350a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800348a:	d140      	bne.n	800350e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003490:	e03d      	b.n	800350e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800349a:	d121      	bne.n	80034e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d837      	bhi.n	8003512 <DMA_CheckFifoParam+0xda>
 80034a2:	a201      	add	r2, pc, #4	@ (adr r2, 80034a8 <DMA_CheckFifoParam+0x70>)
 80034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a8:	080034b9 	.word	0x080034b9
 80034ac:	080034bf 	.word	0x080034bf
 80034b0:	080034b9 	.word	0x080034b9
 80034b4:	080034d1 	.word	0x080034d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      break;
 80034bc:	e030      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d025      	beq.n	8003516 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ce:	e022      	b.n	8003516 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034d8:	d11f      	bne.n	800351a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034de:	e01c      	b.n	800351a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d903      	bls.n	80034ee <DMA_CheckFifoParam+0xb6>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d003      	beq.n	80034f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034ec:	e018      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
      break;
 80034f2:	e015      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00e      	beq.n	800351e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      break;
 8003504:	e00b      	b.n	800351e <DMA_CheckFifoParam+0xe6>
      break;
 8003506:	bf00      	nop
 8003508:	e00a      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      break;
 800350a:	bf00      	nop
 800350c:	e008      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      break;
 800350e:	bf00      	nop
 8003510:	e006      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      break;
 8003512:	bf00      	nop
 8003514:	e004      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      break;
 8003516:	bf00      	nop
 8003518:	e002      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      break;   
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      break;
 800351e:	bf00      	nop
    }
  } 
  
  return status; 
 8003520:	7bfb      	ldrb	r3, [r7, #15]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop

08003530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003530:	b480      	push	{r7}
 8003532:	b089      	sub	sp, #36	@ 0x24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	e165      	b.n	8003818 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800354c:	2201      	movs	r2, #1
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	429a      	cmp	r2, r3
 8003566:	f040 8154 	bne.w	8003812 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d005      	beq.n	8003582 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800357e:	2b02      	cmp	r3, #2
 8003580:	d130      	bne.n	80035e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	2203      	movs	r2, #3
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035b8:	2201      	movs	r2, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 0201 	and.w	r2, r3, #1
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d017      	beq.n	8003620 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	2203      	movs	r2, #3
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d123      	bne.n	8003674 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	08da      	lsrs	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3208      	adds	r2, #8
 8003634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	220f      	movs	r2, #15
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	08da      	lsrs	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3208      	adds	r2, #8
 800366e:	69b9      	ldr	r1, [r7, #24]
 8003670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	2203      	movs	r2, #3
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 0203 	and.w	r2, r3, #3
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80ae 	beq.w	8003812 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003830 <HAL_GPIO_Init+0x300>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036be:	4a5c      	ldr	r2, [pc, #368]	@ (8003830 <HAL_GPIO_Init+0x300>)
 80036c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80036c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003830 <HAL_GPIO_Init+0x300>)
 80036c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036d2:	4a58      	ldr	r2, [pc, #352]	@ (8003834 <HAL_GPIO_Init+0x304>)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	089b      	lsrs	r3, r3, #2
 80036d8:	3302      	adds	r3, #2
 80036da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	220f      	movs	r2, #15
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4013      	ands	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003838 <HAL_GPIO_Init+0x308>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d025      	beq.n	800374a <HAL_GPIO_Init+0x21a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a4e      	ldr	r2, [pc, #312]	@ (800383c <HAL_GPIO_Init+0x30c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01f      	beq.n	8003746 <HAL_GPIO_Init+0x216>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4d      	ldr	r2, [pc, #308]	@ (8003840 <HAL_GPIO_Init+0x310>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d019      	beq.n	8003742 <HAL_GPIO_Init+0x212>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4c      	ldr	r2, [pc, #304]	@ (8003844 <HAL_GPIO_Init+0x314>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_GPIO_Init+0x20e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4b      	ldr	r2, [pc, #300]	@ (8003848 <HAL_GPIO_Init+0x318>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00d      	beq.n	800373a <HAL_GPIO_Init+0x20a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4a      	ldr	r2, [pc, #296]	@ (800384c <HAL_GPIO_Init+0x31c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d007      	beq.n	8003736 <HAL_GPIO_Init+0x206>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a49      	ldr	r2, [pc, #292]	@ (8003850 <HAL_GPIO_Init+0x320>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <HAL_GPIO_Init+0x202>
 800372e:	2306      	movs	r3, #6
 8003730:	e00c      	b.n	800374c <HAL_GPIO_Init+0x21c>
 8003732:	2307      	movs	r3, #7
 8003734:	e00a      	b.n	800374c <HAL_GPIO_Init+0x21c>
 8003736:	2305      	movs	r3, #5
 8003738:	e008      	b.n	800374c <HAL_GPIO_Init+0x21c>
 800373a:	2304      	movs	r3, #4
 800373c:	e006      	b.n	800374c <HAL_GPIO_Init+0x21c>
 800373e:	2303      	movs	r3, #3
 8003740:	e004      	b.n	800374c <HAL_GPIO_Init+0x21c>
 8003742:	2302      	movs	r3, #2
 8003744:	e002      	b.n	800374c <HAL_GPIO_Init+0x21c>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_GPIO_Init+0x21c>
 800374a:	2300      	movs	r3, #0
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	f002 0203 	and.w	r2, r2, #3
 8003752:	0092      	lsls	r2, r2, #2
 8003754:	4093      	lsls	r3, r2
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800375c:	4935      	ldr	r1, [pc, #212]	@ (8003834 <HAL_GPIO_Init+0x304>)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	3302      	adds	r3, #2
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800376a:	4b3a      	ldr	r3, [pc, #232]	@ (8003854 <HAL_GPIO_Init+0x324>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800378e:	4a31      	ldr	r2, [pc, #196]	@ (8003854 <HAL_GPIO_Init+0x324>)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003794:	4b2f      	ldr	r3, [pc, #188]	@ (8003854 <HAL_GPIO_Init+0x324>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037b8:	4a26      	ldr	r2, [pc, #152]	@ (8003854 <HAL_GPIO_Init+0x324>)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037be:	4b25      	ldr	r3, [pc, #148]	@ (8003854 <HAL_GPIO_Init+0x324>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003854 <HAL_GPIO_Init+0x324>)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003854 <HAL_GPIO_Init+0x324>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800380c:	4a11      	ldr	r2, [pc, #68]	@ (8003854 <HAL_GPIO_Init+0x324>)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3301      	adds	r3, #1
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b0f      	cmp	r3, #15
 800381c:	f67f ae96 	bls.w	800354c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	3724      	adds	r7, #36	@ 0x24
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	40013800 	.word	0x40013800
 8003838:	40020000 	.word	0x40020000
 800383c:	40020400 	.word	0x40020400
 8003840:	40020800 	.word	0x40020800
 8003844:	40020c00 	.word	0x40020c00
 8003848:	40021000 	.word	0x40021000
 800384c:	40021400 	.word	0x40021400
 8003850:	40021800 	.word	0x40021800
 8003854:	40013c00 	.word	0x40013c00

08003858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
 8003864:	4613      	mov	r3, r2
 8003866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003868:	787b      	ldrb	r3, [r7, #1]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003874:	e003      	b.n	800387e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003876:	887b      	ldrh	r3, [r7, #2]
 8003878:	041a      	lsls	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	619a      	str	r2, [r3, #24]
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003896:	4b08      	ldr	r3, [pc, #32]	@ (80038b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d006      	beq.n	80038b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038a2:	4a05      	ldr	r2, [pc, #20]	@ (80038b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd feae 	bl	800160c <HAL_GPIO_EXTI_Callback>
  }
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40013c00 	.word	0x40013c00

080038bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e12b      	b.n	8003b26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd fd36 	bl	8001354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	@ 0x24
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800390e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800391e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003920:	f001 fbe0 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 8003924:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4a81      	ldr	r2, [pc, #516]	@ (8003b30 <HAL_I2C_Init+0x274>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d807      	bhi.n	8003940 <HAL_I2C_Init+0x84>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a80      	ldr	r2, [pc, #512]	@ (8003b34 <HAL_I2C_Init+0x278>)
 8003934:	4293      	cmp	r3, r2
 8003936:	bf94      	ite	ls
 8003938:	2301      	movls	r3, #1
 800393a:	2300      	movhi	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e006      	b.n	800394e <HAL_I2C_Init+0x92>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a7d      	ldr	r2, [pc, #500]	@ (8003b38 <HAL_I2C_Init+0x27c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	bf94      	ite	ls
 8003948:	2301      	movls	r3, #1
 800394a:	2300      	movhi	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0e7      	b.n	8003b26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a78      	ldr	r2, [pc, #480]	@ (8003b3c <HAL_I2C_Init+0x280>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0c9b      	lsrs	r3, r3, #18
 8003960:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a6a      	ldr	r2, [pc, #424]	@ (8003b30 <HAL_I2C_Init+0x274>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d802      	bhi.n	8003990 <HAL_I2C_Init+0xd4>
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	3301      	adds	r3, #1
 800398e:	e009      	b.n	80039a4 <HAL_I2C_Init+0xe8>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	4a69      	ldr	r2, [pc, #420]	@ (8003b40 <HAL_I2C_Init+0x284>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	099b      	lsrs	r3, r3, #6
 80039a2:	3301      	adds	r3, #1
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	495c      	ldr	r1, [pc, #368]	@ (8003b30 <HAL_I2C_Init+0x274>)
 80039c0:	428b      	cmp	r3, r1
 80039c2:	d819      	bhi.n	80039f8 <HAL_I2C_Init+0x13c>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e59      	subs	r1, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d2:	1c59      	adds	r1, r3, #1
 80039d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039d8:	400b      	ands	r3, r1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_I2C_Init+0x138>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1e59      	subs	r1, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ec:	3301      	adds	r3, #1
 80039ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f2:	e051      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 80039f4:	2304      	movs	r3, #4
 80039f6:	e04f      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d111      	bne.n	8003a24 <HAL_I2C_Init+0x168>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e58      	subs	r0, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	440b      	add	r3, r1
 8003a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a12:	3301      	adds	r3, #1
 8003a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e012      	b.n	8003a4a <HAL_I2C_Init+0x18e>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1e58      	subs	r0, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	0099      	lsls	r1, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Init+0x196>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e022      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10e      	bne.n	8003a78 <HAL_I2C_Init+0x1bc>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1e58      	subs	r0, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6859      	ldr	r1, [r3, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	440b      	add	r3, r1
 8003a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a76:	e00f      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1e58      	subs	r0, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	0099      	lsls	r1, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8e:	3301      	adds	r3, #1
 8003a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	6809      	ldr	r1, [r1, #0]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69da      	ldr	r2, [r3, #28]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ac6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6911      	ldr	r1, [r2, #16]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68d2      	ldr	r2, [r2, #12]
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	000186a0 	.word	0x000186a0
 8003b34:	001e847f 	.word	0x001e847f
 8003b38:	003d08ff 	.word	0x003d08ff
 8003b3c:	431bde83 	.word	0x431bde83
 8003b40:	10624dd3 	.word	0x10624dd3

08003b44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	607a      	str	r2, [r7, #4]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	460b      	mov	r3, r1
 8003b52:	817b      	strh	r3, [r7, #10]
 8003b54:	4613      	mov	r3, r2
 8003b56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7fe fc3a 	bl	80023d0 <HAL_GetTick>
 8003b5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	f040 80e0 	bne.w	8003d2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	2319      	movs	r3, #25
 8003b72:	2201      	movs	r2, #1
 8003b74:	4970      	ldr	r1, [pc, #448]	@ (8003d38 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 ff3c 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b82:	2302      	movs	r3, #2
 8003b84:	e0d3      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_I2C_Master_Transmit+0x50>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e0cc      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ea>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d007      	beq.n	8003bba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0201 	orr.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2221      	movs	r2, #33	@ 0x21
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	893a      	ldrh	r2, [r7, #8]
 8003bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a50      	ldr	r2, [pc, #320]	@ (8003d3c <HAL_I2C_Master_Transmit+0x1f8>)
 8003bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bfc:	8979      	ldrh	r1, [r7, #10]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	6a3a      	ldr	r2, [r7, #32]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fcf6 	bl	80045f4 <I2C_MasterRequestWrite>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e08d      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c28:	e066      	b.n	8003cf8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	6a39      	ldr	r1, [r7, #32]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fffa 	bl	8004c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d107      	bne.n	8003c52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e06b      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	781a      	ldrb	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d11b      	bne.n	8003ccc <HAL_I2C_Master_Transmit+0x188>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d017      	beq.n	8003ccc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	781a      	ldrb	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	6a39      	ldr	r1, [r7, #32]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fff1 	bl	8004cb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d107      	bne.n	8003cf4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cf2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e01a      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d194      	bne.n	8003c2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e000      	b.n	8003d2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	00100002 	.word	0x00100002
 8003d3c:	ffff0000 	.word	0xffff0000

08003d40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	4608      	mov	r0, r1
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	817b      	strh	r3, [r7, #10]
 8003d52:	460b      	mov	r3, r1
 8003d54:	813b      	strh	r3, [r7, #8]
 8003d56:	4613      	mov	r3, r2
 8003d58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d5a:	f7fe fb39 	bl	80023d0 <HAL_GetTick>
 8003d5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	f040 80d9 	bne.w	8003f20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	2319      	movs	r3, #25
 8003d74:	2201      	movs	r2, #1
 8003d76:	496d      	ldr	r1, [pc, #436]	@ (8003f2c <HAL_I2C_Mem_Write+0x1ec>)
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fe3b 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
 8003d86:	e0cc      	b.n	8003f22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_I2C_Mem_Write+0x56>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e0c5      	b.n	8003f22 <HAL_I2C_Mem_Write+0x1e2>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d007      	beq.n	8003dbc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2221      	movs	r2, #33	@ 0x21
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2240      	movs	r2, #64	@ 0x40
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4a4d      	ldr	r2, [pc, #308]	@ (8003f30 <HAL_I2C_Mem_Write+0x1f0>)
 8003dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dfe:	88f8      	ldrh	r0, [r7, #6]
 8003e00:	893a      	ldrh	r2, [r7, #8]
 8003e02:	8979      	ldrh	r1, [r7, #10]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fc72 	bl	80046f8 <I2C_RequestMemoryWrite>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d052      	beq.n	8003ec0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e081      	b.n	8003f22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 ff00 	bl	8004c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00d      	beq.n	8003e4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d107      	bne.n	8003e46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e06b      	b.n	8003f22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d11b      	bne.n	8003ec0 <HAL_I2C_Mem_Write+0x180>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d017      	beq.n	8003ec0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	781a      	ldrb	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1aa      	bne.n	8003e1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fef3 	bl	8004cb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00d      	beq.n	8003ef4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d107      	bne.n	8003ef0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e016      	b.n	8003f22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e000      	b.n	8003f22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
  }
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	00100002 	.word	0x00100002
 8003f30:	ffff0000 	.word	0xffff0000

08003f34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08c      	sub	sp, #48	@ 0x30
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	461a      	mov	r2, r3
 8003f42:	4603      	mov	r3, r0
 8003f44:	817b      	strh	r3, [r7, #10]
 8003f46:	460b      	mov	r3, r1
 8003f48:	813b      	strh	r3, [r7, #8]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f4e:	f7fe fa3f 	bl	80023d0 <HAL_GetTick>
 8003f52:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	f040 8214 	bne.w	800438a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2319      	movs	r3, #25
 8003f68:	2201      	movs	r2, #1
 8003f6a:	497b      	ldr	r1, [pc, #492]	@ (8004158 <HAL_I2C_Mem_Read+0x224>)
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 fd41 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e207      	b.n	800438c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_I2C_Mem_Read+0x56>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e200      	b.n	800438c <HAL_I2C_Mem_Read+0x458>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d007      	beq.n	8003fb0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2222      	movs	r2, #34	@ 0x22
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2240      	movs	r2, #64	@ 0x40
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a5b      	ldr	r2, [pc, #364]	@ (800415c <HAL_I2C_Mem_Read+0x228>)
 8003ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ff2:	88f8      	ldrh	r0, [r7, #6]
 8003ff4:	893a      	ldrh	r2, [r7, #8]
 8003ff6:	8979      	ldrh	r1, [r7, #10]
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	4603      	mov	r3, r0
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fc0e 	bl	8004824 <I2C_RequestMemoryRead>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e1bc      	b.n	800438c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004016:	2b00      	cmp	r3, #0
 8004018:	d113      	bne.n	8004042 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401a:	2300      	movs	r3, #0
 800401c:	623b      	str	r3, [r7, #32]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	623b      	str	r3, [r7, #32]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	623b      	str	r3, [r7, #32]
 800402e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	e190      	b.n	8004364 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004046:	2b01      	cmp	r3, #1
 8004048:	d11b      	bne.n	8004082 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004058:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e170      	b.n	8004364 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004086:	2b02      	cmp	r3, #2
 8004088:	d11b      	bne.n	80040c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004098:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	e150      	b.n	8004364 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040d8:	e144      	b.n	8004364 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040de:	2b03      	cmp	r3, #3
 80040e0:	f200 80f1 	bhi.w	80042c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d123      	bne.n	8004134 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fe29 	bl	8004d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e145      	b.n	800438c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004132:	e117      	b.n	8004364 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004138:	2b02      	cmp	r3, #2
 800413a:	d14e      	bne.n	80041da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004142:	2200      	movs	r2, #0
 8004144:	4906      	ldr	r1, [pc, #24]	@ (8004160 <HAL_I2C_Mem_Read+0x22c>)
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fc54 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e11a      	b.n	800438c <HAL_I2C_Mem_Read+0x458>
 8004156:	bf00      	nop
 8004158:	00100002 	.word	0x00100002
 800415c:	ffff0000 	.word	0xffff0000
 8004160:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041d8:	e0c4      	b.n	8004364 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e0:	2200      	movs	r2, #0
 80041e2:	496c      	ldr	r1, [pc, #432]	@ (8004394 <HAL_I2C_Mem_Read+0x460>)
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 fc05 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0cb      	b.n	800438c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423c:	2200      	movs	r2, #0
 800423e:	4955      	ldr	r1, [pc, #340]	@ (8004394 <HAL_I2C_Mem_Read+0x460>)
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 fbd7 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e09d      	b.n	800438c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800425e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042c4:	e04e      	b.n	8004364 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fd3c 	bl	8004d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e058      	b.n	800438c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b04      	cmp	r3, #4
 8004318:	d124      	bne.n	8004364 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431e:	2b03      	cmp	r3, #3
 8004320:	d107      	bne.n	8004332 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004330:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004368:	2b00      	cmp	r3, #0
 800436a:	f47f aeb6 	bne.w	80040da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
  }
}
 800438c:	4618      	mov	r0, r3
 800438e:	3728      	adds	r7, #40	@ 0x28
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	00010004 	.word	0x00010004

08004398 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	@ 0x28
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	460b      	mov	r3, r1
 80043a6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80043a8:	f7fe f812 	bl	80023d0 <HAL_GetTick>
 80043ac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	f040 8111 	bne.w	80045e2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	2319      	movs	r3, #25
 80043c6:	2201      	movs	r2, #1
 80043c8:	4988      	ldr	r1, [pc, #544]	@ (80045ec <HAL_I2C_IsDeviceReady+0x254>)
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fb12 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
 80043d8:	e104      	b.n	80045e4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_I2C_IsDeviceReady+0x50>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e0fd      	b.n	80045e4 <HAL_I2C_IsDeviceReady+0x24c>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d007      	beq.n	800440e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0201 	orr.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800441c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2224      	movs	r2, #36	@ 0x24
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a70      	ldr	r2, [pc, #448]	@ (80045f0 <HAL_I2C_IsDeviceReady+0x258>)
 8004430:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004440:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2200      	movs	r2, #0
 800444a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fad0 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00d      	beq.n	8004476 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004468:	d103      	bne.n	8004472 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004470:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e0b6      	b.n	80045e4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004476:	897b      	ldrh	r3, [r7, #10]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004484:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004486:	f7fd ffa3 	bl	80023d0 <HAL_GetTick>
 800448a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b02      	cmp	r3, #2
 8004498:	bf0c      	ite	eq
 800449a:	2301      	moveq	r3, #1
 800449c:	2300      	movne	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b0:	bf0c      	ite	eq
 80044b2:	2301      	moveq	r3, #1
 80044b4:	2300      	movne	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044ba:	e025      	b.n	8004508 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044bc:	f7fd ff88 	bl	80023d0 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d302      	bcc.n	80044d2 <HAL_I2C_IsDeviceReady+0x13a>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d103      	bne.n	80044da <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	22a0      	movs	r2, #160	@ 0xa0
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	bf0c      	ite	eq
 80044e8:	2301      	moveq	r3, #1
 80044ea:	2300      	movne	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2ba0      	cmp	r3, #160	@ 0xa0
 8004512:	d005      	beq.n	8004520 <HAL_I2C_IsDeviceReady+0x188>
 8004514:	7dfb      	ldrb	r3, [r7, #23]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <HAL_I2C_IsDeviceReady+0x188>
 800451a:	7dbb      	ldrb	r3, [r7, #22]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0cd      	beq.n	80044bc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b02      	cmp	r3, #2
 8004534:	d129      	bne.n	800458a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004544:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2319      	movs	r3, #25
 8004562:	2201      	movs	r2, #1
 8004564:	4921      	ldr	r1, [pc, #132]	@ (80045ec <HAL_I2C_IsDeviceReady+0x254>)
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fa44 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e036      	b.n	80045e4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e02c      	b.n	80045e4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004598:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	2319      	movs	r3, #25
 80045aa:	2201      	movs	r2, #1
 80045ac:	490f      	ldr	r1, [pc, #60]	@ (80045ec <HAL_I2C_IsDeviceReady+0x254>)
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fa20 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e012      	b.n	80045e4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	3301      	adds	r3, #1
 80045c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	f4ff af32 	bcc.w	8004432 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	00100002 	.word	0x00100002
 80045f0:	ffff0000 	.word	0xffff0000

080045f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	460b      	mov	r3, r1
 8004602:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d006      	beq.n	800461e <I2C_MasterRequestWrite+0x2a>
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d003      	beq.n	800461e <I2C_MasterRequestWrite+0x2a>
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800461c:	d108      	bne.n	8004630 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	e00b      	b.n	8004648 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004634:	2b12      	cmp	r3, #18
 8004636:	d107      	bne.n	8004648 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004646:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f9cd 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00d      	beq.n	800467c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800466e:	d103      	bne.n	8004678 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004676:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e035      	b.n	80046e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004684:	d108      	bne.n	8004698 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004686:	897b      	ldrh	r3, [r7, #10]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004694:	611a      	str	r2, [r3, #16]
 8004696:	e01b      	b.n	80046d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004698:	897b      	ldrh	r3, [r7, #10]
 800469a:	11db      	asrs	r3, r3, #7
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f003 0306 	and.w	r3, r3, #6
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f063 030f 	orn	r3, r3, #15
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	490e      	ldr	r1, [pc, #56]	@ (80046f0 <I2C_MasterRequestWrite+0xfc>)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fa16 	bl	8004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e010      	b.n	80046e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046c6:	897b      	ldrh	r3, [r7, #10]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4907      	ldr	r1, [pc, #28]	@ (80046f4 <I2C_MasterRequestWrite+0x100>)
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fa06 	bl	8004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	00010008 	.word	0x00010008
 80046f4:	00010002 	.word	0x00010002

080046f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	4608      	mov	r0, r1
 8004702:	4611      	mov	r1, r2
 8004704:	461a      	mov	r2, r3
 8004706:	4603      	mov	r3, r0
 8004708:	817b      	strh	r3, [r7, #10]
 800470a:	460b      	mov	r3, r1
 800470c:	813b      	strh	r3, [r7, #8]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004720:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	2200      	movs	r2, #0
 800472a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f960 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00d      	beq.n	8004756 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004748:	d103      	bne.n	8004752 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004750:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e05f      	b.n	8004816 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004756:	897b      	ldrh	r3, [r7, #10]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	461a      	mov	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004764:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	6a3a      	ldr	r2, [r7, #32]
 800476a:	492d      	ldr	r1, [pc, #180]	@ (8004820 <I2C_RequestMemoryWrite+0x128>)
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f9bb 	bl	8004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e04c      	b.n	8004816 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004794:	6a39      	ldr	r1, [r7, #32]
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fa46 	bl	8004c28 <I2C_WaitOnTXEFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00d      	beq.n	80047be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d107      	bne.n	80047ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e02b      	b.n	8004816 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d105      	bne.n	80047d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047c4:	893b      	ldrh	r3, [r7, #8]
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	611a      	str	r2, [r3, #16]
 80047ce:	e021      	b.n	8004814 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047d0:	893b      	ldrh	r3, [r7, #8]
 80047d2:	0a1b      	lsrs	r3, r3, #8
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e0:	6a39      	ldr	r1, [r7, #32]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 fa20 	bl	8004c28 <I2C_WaitOnTXEFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00d      	beq.n	800480a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d107      	bne.n	8004806 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004804:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e005      	b.n	8004816 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800480a:	893b      	ldrh	r3, [r7, #8]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	00010002 	.word	0x00010002

08004824 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af02      	add	r7, sp, #8
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	4608      	mov	r0, r1
 800482e:	4611      	mov	r1, r2
 8004830:	461a      	mov	r2, r3
 8004832:	4603      	mov	r3, r0
 8004834:	817b      	strh	r3, [r7, #10]
 8004836:	460b      	mov	r3, r1
 8004838:	813b      	strh	r3, [r7, #8]
 800483a:	4613      	mov	r3, r2
 800483c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800484c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800485c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	2200      	movs	r2, #0
 8004866:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f8c2 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00d      	beq.n	8004892 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004884:	d103      	bne.n	800488e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800488c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e0aa      	b.n	80049e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004892:	897b      	ldrh	r3, [r7, #10]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	6a3a      	ldr	r2, [r7, #32]
 80048a6:	4952      	ldr	r1, [pc, #328]	@ (80049f0 <I2C_RequestMemoryRead+0x1cc>)
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f91d 	bl	8004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e097      	b.n	80049e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d0:	6a39      	ldr	r1, [r7, #32]
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f9a8 	bl	8004c28 <I2C_WaitOnTXEFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00d      	beq.n	80048fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d107      	bne.n	80048f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e076      	b.n	80049e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d105      	bne.n	800490c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004900:	893b      	ldrh	r3, [r7, #8]
 8004902:	b2da      	uxtb	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	611a      	str	r2, [r3, #16]
 800490a:	e021      	b.n	8004950 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800490c:	893b      	ldrh	r3, [r7, #8]
 800490e:	0a1b      	lsrs	r3, r3, #8
 8004910:	b29b      	uxth	r3, r3
 8004912:	b2da      	uxtb	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800491a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800491c:	6a39      	ldr	r1, [r7, #32]
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f982 	bl	8004c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00d      	beq.n	8004946 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	2b04      	cmp	r3, #4
 8004930:	d107      	bne.n	8004942 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004940:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e050      	b.n	80049e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004946:	893b      	ldrh	r3, [r7, #8]
 8004948:	b2da      	uxtb	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004952:	6a39      	ldr	r1, [r7, #32]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f967 	bl	8004c28 <I2C_WaitOnTXEFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00d      	beq.n	800497c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004964:	2b04      	cmp	r3, #4
 8004966:	d107      	bne.n	8004978 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004976:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e035      	b.n	80049e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800498a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800498c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	2200      	movs	r2, #0
 8004994:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f82b 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00d      	beq.n	80049c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049b2:	d103      	bne.n	80049bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e013      	b.n	80049e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049c0:	897b      	ldrh	r3, [r7, #10]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	6a3a      	ldr	r2, [r7, #32]
 80049d4:	4906      	ldr	r1, [pc, #24]	@ (80049f0 <I2C_RequestMemoryRead+0x1cc>)
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f886 	bl	8004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	00010002 	.word	0x00010002

080049f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a04:	e048      	b.n	8004a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d044      	beq.n	8004a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0e:	f7fd fcdf 	bl	80023d0 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d302      	bcc.n	8004a24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d139      	bne.n	8004a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	0c1b      	lsrs	r3, r3, #16
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d10d      	bne.n	8004a4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	43da      	mvns	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bf0c      	ite	eq
 8004a40:	2301      	moveq	r3, #1
 8004a42:	2300      	movne	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	e00c      	b.n	8004a64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	43da      	mvns	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d116      	bne.n	8004a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	f043 0220 	orr.w	r2, r3, #32
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e023      	b.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	0c1b      	lsrs	r3, r3, #16
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d10d      	bne.n	8004abe <I2C_WaitOnFlagUntilTimeout+0xca>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	43da      	mvns	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4013      	ands	r3, r2
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	e00c      	b.n	8004ad8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	43da      	mvns	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf0c      	ite	eq
 8004ad0:	2301      	moveq	r3, #1
 8004ad2:	2300      	movne	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d093      	beq.n	8004a06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004af6:	e071      	b.n	8004bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b06:	d123      	bne.n	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3c:	f043 0204 	orr.w	r2, r3, #4
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e067      	b.n	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d041      	beq.n	8004bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b58:	f7fd fc3a 	bl	80023d0 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d302      	bcc.n	8004b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d136      	bne.n	8004bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	0c1b      	lsrs	r3, r3, #16
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10c      	bne.n	8004b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	43da      	mvns	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4013      	ands	r3, r2
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf14      	ite	ne
 8004b8a:	2301      	movne	r3, #1
 8004b8c:	2300      	moveq	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	e00b      	b.n	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	43da      	mvns	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf14      	ite	ne
 8004ba4:	2301      	movne	r3, #1
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d016      	beq.n	8004bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e021      	b.n	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	0c1b      	lsrs	r3, r3, #16
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d10c      	bne.n	8004c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	43da      	mvns	r2, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf14      	ite	ne
 8004bf8:	2301      	movne	r3, #1
 8004bfa:	2300      	moveq	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e00b      	b.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	43da      	mvns	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf14      	ite	ne
 8004c12:	2301      	movne	r3, #1
 8004c14:	2300      	moveq	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f47f af6d 	bne.w	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c34:	e034      	b.n	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f8e3 	bl	8004e02 <I2C_IsAcknowledgeFailed>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e034      	b.n	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d028      	beq.n	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4e:	f7fd fbbf 	bl	80023d0 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d302      	bcc.n	8004c64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d11d      	bne.n	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c6e:	2b80      	cmp	r3, #128	@ 0x80
 8004c70:	d016      	beq.n	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8c:	f043 0220 	orr.w	r2, r3, #32
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e007      	b.n	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004caa:	2b80      	cmp	r3, #128	@ 0x80
 8004cac:	d1c3      	bne.n	8004c36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cc4:	e034      	b.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f89b 	bl	8004e02 <I2C_IsAcknowledgeFailed>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e034      	b.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cdc:	d028      	beq.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cde:	f7fd fb77 	bl	80023d0 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d302      	bcc.n	8004cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d11d      	bne.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d016      	beq.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1c:	f043 0220 	orr.w	r2, r3, #32
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e007      	b.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d1c3      	bne.n	8004cc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d54:	e049      	b.n	8004dea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d119      	bne.n	8004d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0210 	mvn.w	r2, #16
 8004d6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e030      	b.n	8004dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d98:	f7fd fb1a 	bl	80023d0 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d302      	bcc.n	8004dae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d11d      	bne.n	8004dea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db8:	2b40      	cmp	r3, #64	@ 0x40
 8004dba:	d016      	beq.n	8004dea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd6:	f043 0220 	orr.w	r2, r3, #32
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e007      	b.n	8004dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df4:	2b40      	cmp	r3, #64	@ 0x40
 8004df6:	d1ae      	bne.n	8004d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e18:	d11b      	bne.n	8004e52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	f043 0204 	orr.w	r2, r3, #4
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	603b      	str	r3, [r7, #0]
 8004e6e:	4b20      	ldr	r3, [pc, #128]	@ (8004ef0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ef0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e86:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e8c:	f7fd faa0 	bl	80023d0 <HAL_GetTick>
 8004e90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e92:	e009      	b.n	8004ea8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e94:	f7fd fa9c 	bl	80023d0 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ea2:	d901      	bls.n	8004ea8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e01f      	b.n	8004ee8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ea8:	4b13      	ldr	r3, [pc, #76]	@ (8004ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb4:	d1ee      	bne.n	8004e94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004eb6:	4b11      	ldr	r3, [pc, #68]	@ (8004efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ebc:	f7fd fa88 	bl	80023d0 <HAL_GetTick>
 8004ec0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ec2:	e009      	b.n	8004ed8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ec4:	f7fd fa84 	bl	80023d0 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ed2:	d901      	bls.n	8004ed8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e007      	b.n	8004ee8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ed8:	4b07      	ldr	r3, [pc, #28]	@ (8004ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ee4:	d1ee      	bne.n	8004ec4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	420e0040 	.word	0x420e0040
 8004ef8:	40007000 	.word	0x40007000
 8004efc:	420e0044 	.word	0x420e0044

08004f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0cc      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f14:	4b68      	ldr	r3, [pc, #416]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 030f 	and.w	r3, r3, #15
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d90c      	bls.n	8004f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f22:	4b65      	ldr	r3, [pc, #404]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2a:	4b63      	ldr	r3, [pc, #396]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0b8      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d020      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f54:	4b59      	ldr	r3, [pc, #356]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	4a58      	ldr	r2, [pc, #352]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f6c:	4b53      	ldr	r3, [pc, #332]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4a52      	ldr	r2, [pc, #328]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f78:	4b50      	ldr	r3, [pc, #320]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	494d      	ldr	r1, [pc, #308]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d044      	beq.n	8005020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d107      	bne.n	8004fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9e:	4b47      	ldr	r3, [pc, #284]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d119      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e07f      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e06f      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fce:	4b3b      	ldr	r3, [pc, #236]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e067      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fde:	4b37      	ldr	r3, [pc, #220]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4934      	ldr	r1, [pc, #208]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff0:	f7fd f9ee 	bl	80023d0 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fd f9ea 	bl	80023d0 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e04f      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	4b2b      	ldr	r3, [pc, #172]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 020c 	and.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	429a      	cmp	r2, r3
 800501e:	d1eb      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005020:	4b25      	ldr	r3, [pc, #148]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d20c      	bcs.n	8005048 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b22      	ldr	r3, [pc, #136]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b20      	ldr	r3, [pc, #128]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d001      	beq.n	8005048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e032      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005054:	4b19      	ldr	r3, [pc, #100]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4916      	ldr	r1, [pc, #88]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	4313      	orrs	r3, r2
 8005064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005072:	4b12      	ldr	r3, [pc, #72]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	490e      	ldr	r1, [pc, #56]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005086:	f000 f855 	bl	8005134 <HAL_RCC_GetSysClockFreq>
 800508a:	4602      	mov	r2, r0
 800508c:	4b0b      	ldr	r3, [pc, #44]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	091b      	lsrs	r3, r3, #4
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	490a      	ldr	r1, [pc, #40]	@ (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005098:	5ccb      	ldrb	r3, [r1, r3]
 800509a:	fa22 f303 	lsr.w	r3, r2, r3
 800509e:	4a09      	ldr	r2, [pc, #36]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 80050a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050a2:	4b09      	ldr	r3, [pc, #36]	@ (80050c8 <HAL_RCC_ClockConfig+0x1c8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fd f94e 	bl	8002348 <HAL_InitTick>

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40023c00 	.word	0x40023c00
 80050bc:	40023800 	.word	0x40023800
 80050c0:	08008d48 	.word	0x08008d48
 80050c4:	20000010 	.word	0x20000010
 80050c8:	20000014 	.word	0x20000014

080050cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d0:	4b03      	ldr	r3, [pc, #12]	@ (80050e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050d2:	681b      	ldr	r3, [r3, #0]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	20000010 	.word	0x20000010

080050e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050e8:	f7ff fff0 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b05      	ldr	r3, [pc, #20]	@ (8005104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	0a9b      	lsrs	r3, r3, #10
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	4903      	ldr	r1, [pc, #12]	@ (8005108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005100:	4618      	mov	r0, r3
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40023800 	.word	0x40023800
 8005108:	08008d58 	.word	0x08008d58

0800510c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005110:	f7ff ffdc 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b05      	ldr	r3, [pc, #20]	@ (800512c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	0b5b      	lsrs	r3, r3, #13
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	4903      	ldr	r1, [pc, #12]	@ (8005130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40023800 	.word	0x40023800
 8005130:	08008d58 	.word	0x08008d58

08005134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005138:	b0ae      	sub	sp, #184	@ 0xb8
 800513a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800515a:	4bcb      	ldr	r3, [pc, #812]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x354>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 030c 	and.w	r3, r3, #12
 8005162:	2b0c      	cmp	r3, #12
 8005164:	f200 8206 	bhi.w	8005574 <HAL_RCC_GetSysClockFreq+0x440>
 8005168:	a201      	add	r2, pc, #4	@ (adr r2, 8005170 <HAL_RCC_GetSysClockFreq+0x3c>)
 800516a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516e:	bf00      	nop
 8005170:	080051a5 	.word	0x080051a5
 8005174:	08005575 	.word	0x08005575
 8005178:	08005575 	.word	0x08005575
 800517c:	08005575 	.word	0x08005575
 8005180:	080051ad 	.word	0x080051ad
 8005184:	08005575 	.word	0x08005575
 8005188:	08005575 	.word	0x08005575
 800518c:	08005575 	.word	0x08005575
 8005190:	080051b5 	.word	0x080051b5
 8005194:	08005575 	.word	0x08005575
 8005198:	08005575 	.word	0x08005575
 800519c:	08005575 	.word	0x08005575
 80051a0:	080053a5 	.word	0x080053a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051a4:	4bb9      	ldr	r3, [pc, #740]	@ (800548c <HAL_RCC_GetSysClockFreq+0x358>)
 80051a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80051aa:	e1e7      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ac:	4bb8      	ldr	r3, [pc, #736]	@ (8005490 <HAL_RCC_GetSysClockFreq+0x35c>)
 80051ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80051b2:	e1e3      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b4:	4bb4      	ldr	r3, [pc, #720]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x354>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051c0:	4bb1      	ldr	r3, [pc, #708]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x354>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d071      	beq.n	80052b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051cc:	4bae      	ldr	r3, [pc, #696]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x354>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	099b      	lsrs	r3, r3, #6
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051d8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80051dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051e8:	2300      	movs	r3, #0
 80051ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051f2:	4622      	mov	r2, r4
 80051f4:	462b      	mov	r3, r5
 80051f6:	f04f 0000 	mov.w	r0, #0
 80051fa:	f04f 0100 	mov.w	r1, #0
 80051fe:	0159      	lsls	r1, r3, #5
 8005200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005204:	0150      	lsls	r0, r2, #5
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4621      	mov	r1, r4
 800520c:	1a51      	subs	r1, r2, r1
 800520e:	6439      	str	r1, [r7, #64]	@ 0x40
 8005210:	4629      	mov	r1, r5
 8005212:	eb63 0301 	sbc.w	r3, r3, r1
 8005216:	647b      	str	r3, [r7, #68]	@ 0x44
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005224:	4649      	mov	r1, r9
 8005226:	018b      	lsls	r3, r1, #6
 8005228:	4641      	mov	r1, r8
 800522a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800522e:	4641      	mov	r1, r8
 8005230:	018a      	lsls	r2, r1, #6
 8005232:	4641      	mov	r1, r8
 8005234:	1a51      	subs	r1, r2, r1
 8005236:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005238:	4649      	mov	r1, r9
 800523a:	eb63 0301 	sbc.w	r3, r3, r1
 800523e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800524c:	4649      	mov	r1, r9
 800524e:	00cb      	lsls	r3, r1, #3
 8005250:	4641      	mov	r1, r8
 8005252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005256:	4641      	mov	r1, r8
 8005258:	00ca      	lsls	r2, r1, #3
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	4603      	mov	r3, r0
 8005260:	4622      	mov	r2, r4
 8005262:	189b      	adds	r3, r3, r2
 8005264:	633b      	str	r3, [r7, #48]	@ 0x30
 8005266:	462b      	mov	r3, r5
 8005268:	460a      	mov	r2, r1
 800526a:	eb42 0303 	adc.w	r3, r2, r3
 800526e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800527c:	4629      	mov	r1, r5
 800527e:	024b      	lsls	r3, r1, #9
 8005280:	4621      	mov	r1, r4
 8005282:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005286:	4621      	mov	r1, r4
 8005288:	024a      	lsls	r2, r1, #9
 800528a:	4610      	mov	r0, r2
 800528c:	4619      	mov	r1, r3
 800528e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005292:	2200      	movs	r2, #0
 8005294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005298:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800529c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80052a0:	f7fb fd12 	bl	8000cc8 <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4613      	mov	r3, r2
 80052aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052ae:	e067      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b0:	4b75      	ldr	r3, [pc, #468]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x354>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	099b      	lsrs	r3, r3, #6
 80052b6:	2200      	movs	r2, #0
 80052b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052bc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80052c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052ca:	2300      	movs	r3, #0
 80052cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80052d2:	4622      	mov	r2, r4
 80052d4:	462b      	mov	r3, r5
 80052d6:	f04f 0000 	mov.w	r0, #0
 80052da:	f04f 0100 	mov.w	r1, #0
 80052de:	0159      	lsls	r1, r3, #5
 80052e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052e4:	0150      	lsls	r0, r2, #5
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4621      	mov	r1, r4
 80052ec:	1a51      	subs	r1, r2, r1
 80052ee:	62b9      	str	r1, [r7, #40]	@ 0x28
 80052f0:	4629      	mov	r1, r5
 80052f2:	eb63 0301 	sbc.w	r3, r3, r1
 80052f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005304:	4649      	mov	r1, r9
 8005306:	018b      	lsls	r3, r1, #6
 8005308:	4641      	mov	r1, r8
 800530a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800530e:	4641      	mov	r1, r8
 8005310:	018a      	lsls	r2, r1, #6
 8005312:	4641      	mov	r1, r8
 8005314:	ebb2 0a01 	subs.w	sl, r2, r1
 8005318:	4649      	mov	r1, r9
 800531a:	eb63 0b01 	sbc.w	fp, r3, r1
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800532a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800532e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005332:	4692      	mov	sl, r2
 8005334:	469b      	mov	fp, r3
 8005336:	4623      	mov	r3, r4
 8005338:	eb1a 0303 	adds.w	r3, sl, r3
 800533c:	623b      	str	r3, [r7, #32]
 800533e:	462b      	mov	r3, r5
 8005340:	eb4b 0303 	adc.w	r3, fp, r3
 8005344:	627b      	str	r3, [r7, #36]	@ 0x24
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005352:	4629      	mov	r1, r5
 8005354:	028b      	lsls	r3, r1, #10
 8005356:	4621      	mov	r1, r4
 8005358:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800535c:	4621      	mov	r1, r4
 800535e:	028a      	lsls	r2, r1, #10
 8005360:	4610      	mov	r0, r2
 8005362:	4619      	mov	r1, r3
 8005364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005368:	2200      	movs	r2, #0
 800536a:	673b      	str	r3, [r7, #112]	@ 0x70
 800536c:	677a      	str	r2, [r7, #116]	@ 0x74
 800536e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005372:	f7fb fca9 	bl	8000cc8 <__aeabi_uldivmod>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4613      	mov	r3, r2
 800537c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005380:	4b41      	ldr	r3, [pc, #260]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x354>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	3301      	adds	r3, #1
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80053a2:	e0eb      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053a4:	4b38      	ldr	r3, [pc, #224]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x354>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053b0:	4b35      	ldr	r3, [pc, #212]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x354>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d06b      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053bc:	4b32      	ldr	r3, [pc, #200]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x354>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	099b      	lsrs	r3, r3, #6
 80053c2:	2200      	movs	r2, #0
 80053c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80053d0:	2300      	movs	r3, #0
 80053d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80053d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80053d8:	4622      	mov	r2, r4
 80053da:	462b      	mov	r3, r5
 80053dc:	f04f 0000 	mov.w	r0, #0
 80053e0:	f04f 0100 	mov.w	r1, #0
 80053e4:	0159      	lsls	r1, r3, #5
 80053e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053ea:	0150      	lsls	r0, r2, #5
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4621      	mov	r1, r4
 80053f2:	1a51      	subs	r1, r2, r1
 80053f4:	61b9      	str	r1, [r7, #24]
 80053f6:	4629      	mov	r1, r5
 80053f8:	eb63 0301 	sbc.w	r3, r3, r1
 80053fc:	61fb      	str	r3, [r7, #28]
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800540a:	4659      	mov	r1, fp
 800540c:	018b      	lsls	r3, r1, #6
 800540e:	4651      	mov	r1, sl
 8005410:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005414:	4651      	mov	r1, sl
 8005416:	018a      	lsls	r2, r1, #6
 8005418:	4651      	mov	r1, sl
 800541a:	ebb2 0801 	subs.w	r8, r2, r1
 800541e:	4659      	mov	r1, fp
 8005420:	eb63 0901 	sbc.w	r9, r3, r1
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005430:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005434:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005438:	4690      	mov	r8, r2
 800543a:	4699      	mov	r9, r3
 800543c:	4623      	mov	r3, r4
 800543e:	eb18 0303 	adds.w	r3, r8, r3
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	462b      	mov	r3, r5
 8005446:	eb49 0303 	adc.w	r3, r9, r3
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005458:	4629      	mov	r1, r5
 800545a:	024b      	lsls	r3, r1, #9
 800545c:	4621      	mov	r1, r4
 800545e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005462:	4621      	mov	r1, r4
 8005464:	024a      	lsls	r2, r1, #9
 8005466:	4610      	mov	r0, r2
 8005468:	4619      	mov	r1, r3
 800546a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800546e:	2200      	movs	r2, #0
 8005470:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005472:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005474:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005478:	f7fb fc26 	bl	8000cc8 <__aeabi_uldivmod>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4613      	mov	r3, r2
 8005482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005486:	e065      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x420>
 8005488:	40023800 	.word	0x40023800
 800548c:	00f42400 	.word	0x00f42400
 8005490:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005494:	4b3d      	ldr	r3, [pc, #244]	@ (800558c <HAL_RCC_GetSysClockFreq+0x458>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	099b      	lsrs	r3, r3, #6
 800549a:	2200      	movs	r2, #0
 800549c:	4618      	mov	r0, r3
 800549e:	4611      	mov	r1, r2
 80054a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80054a6:	2300      	movs	r3, #0
 80054a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80054aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80054ae:	4642      	mov	r2, r8
 80054b0:	464b      	mov	r3, r9
 80054b2:	f04f 0000 	mov.w	r0, #0
 80054b6:	f04f 0100 	mov.w	r1, #0
 80054ba:	0159      	lsls	r1, r3, #5
 80054bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054c0:	0150      	lsls	r0, r2, #5
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4641      	mov	r1, r8
 80054c8:	1a51      	subs	r1, r2, r1
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	4649      	mov	r1, r9
 80054ce:	eb63 0301 	sbc.w	r3, r3, r1
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80054e0:	4659      	mov	r1, fp
 80054e2:	018b      	lsls	r3, r1, #6
 80054e4:	4651      	mov	r1, sl
 80054e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054ea:	4651      	mov	r1, sl
 80054ec:	018a      	lsls	r2, r1, #6
 80054ee:	4651      	mov	r1, sl
 80054f0:	1a54      	subs	r4, r2, r1
 80054f2:	4659      	mov	r1, fp
 80054f4:	eb63 0501 	sbc.w	r5, r3, r1
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	00eb      	lsls	r3, r5, #3
 8005502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005506:	00e2      	lsls	r2, r4, #3
 8005508:	4614      	mov	r4, r2
 800550a:	461d      	mov	r5, r3
 800550c:	4643      	mov	r3, r8
 800550e:	18e3      	adds	r3, r4, r3
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	464b      	mov	r3, r9
 8005514:	eb45 0303 	adc.w	r3, r5, r3
 8005518:	607b      	str	r3, [r7, #4]
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005526:	4629      	mov	r1, r5
 8005528:	028b      	lsls	r3, r1, #10
 800552a:	4621      	mov	r1, r4
 800552c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005530:	4621      	mov	r1, r4
 8005532:	028a      	lsls	r2, r1, #10
 8005534:	4610      	mov	r0, r2
 8005536:	4619      	mov	r1, r3
 8005538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800553c:	2200      	movs	r2, #0
 800553e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005540:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005542:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005546:	f7fb fbbf 	bl	8000cc8 <__aeabi_uldivmod>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4613      	mov	r3, r2
 8005550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005554:	4b0d      	ldr	r3, [pc, #52]	@ (800558c <HAL_RCC_GetSysClockFreq+0x458>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	0f1b      	lsrs	r3, r3, #28
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005562:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800556a:	fbb2 f3f3 	udiv	r3, r2, r3
 800556e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005572:	e003      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005574:	4b06      	ldr	r3, [pc, #24]	@ (8005590 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800557a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800557c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005580:	4618      	mov	r0, r3
 8005582:	37b8      	adds	r7, #184	@ 0xb8
 8005584:	46bd      	mov	sp, r7
 8005586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800558a:	bf00      	nop
 800558c:	40023800 	.word	0x40023800
 8005590:	00f42400 	.word	0x00f42400

08005594 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e28d      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 8083 	beq.w	80056ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055b4:	4b94      	ldr	r3, [pc, #592]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 030c 	and.w	r3, r3, #12
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d019      	beq.n	80055f4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80055c0:	4b91      	ldr	r3, [pc, #580]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 030c 	and.w	r3, r3, #12
        || \
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d106      	bne.n	80055da <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80055cc:	4b8e      	ldr	r3, [pc, #568]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055d8:	d00c      	beq.n	80055f4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055da:	4b8b      	ldr	r3, [pc, #556]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80055e2:	2b0c      	cmp	r3, #12
 80055e4:	d112      	bne.n	800560c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055e6:	4b88      	ldr	r3, [pc, #544]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055f2:	d10b      	bne.n	800560c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f4:	4b84      	ldr	r3, [pc, #528]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d05b      	beq.n	80056b8 <HAL_RCC_OscConfig+0x124>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d157      	bne.n	80056b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e25a      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005614:	d106      	bne.n	8005624 <HAL_RCC_OscConfig+0x90>
 8005616:	4b7c      	ldr	r3, [pc, #496]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a7b      	ldr	r2, [pc, #492]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 800561c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	e01d      	b.n	8005660 <HAL_RCC_OscConfig+0xcc>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800562c:	d10c      	bne.n	8005648 <HAL_RCC_OscConfig+0xb4>
 800562e:	4b76      	ldr	r3, [pc, #472]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a75      	ldr	r2, [pc, #468]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 8005634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	4b73      	ldr	r3, [pc, #460]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a72      	ldr	r2, [pc, #456]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 8005640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	e00b      	b.n	8005660 <HAL_RCC_OscConfig+0xcc>
 8005648:	4b6f      	ldr	r3, [pc, #444]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a6e      	ldr	r2, [pc, #440]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 800564e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	4b6c      	ldr	r3, [pc, #432]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a6b      	ldr	r2, [pc, #428]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 800565a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800565e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d013      	beq.n	8005690 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fc feb2 	bl	80023d0 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005670:	f7fc feae 	bl	80023d0 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b64      	cmp	r3, #100	@ 0x64
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e21f      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005682:	4b61      	ldr	r3, [pc, #388]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f0      	beq.n	8005670 <HAL_RCC_OscConfig+0xdc>
 800568e:	e014      	b.n	80056ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fc fe9e 	bl	80023d0 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005698:	f7fc fe9a 	bl	80023d0 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b64      	cmp	r3, #100	@ 0x64
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e20b      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056aa:	4b57      	ldr	r3, [pc, #348]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x104>
 80056b6:	e000      	b.n	80056ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d06f      	beq.n	80057a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80056c6:	4b50      	ldr	r3, [pc, #320]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 030c 	and.w	r3, r3, #12
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d017      	beq.n	8005702 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80056d2:	4b4d      	ldr	r3, [pc, #308]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d105      	bne.n	80056ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80056de:	4b4a      	ldr	r3, [pc, #296]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ea:	4b47      	ldr	r3, [pc, #284]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80056f2:	2b0c      	cmp	r3, #12
 80056f4:	d11c      	bne.n	8005730 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056f6:	4b44      	ldr	r3, [pc, #272]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d116      	bne.n	8005730 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005702:	4b41      	ldr	r3, [pc, #260]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <HAL_RCC_OscConfig+0x186>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d001      	beq.n	800571a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e1d3      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800571a:	4b3b      	ldr	r3, [pc, #236]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	4937      	ldr	r1, [pc, #220]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 800572a:	4313      	orrs	r3, r2
 800572c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572e:	e03a      	b.n	80057a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d020      	beq.n	800577a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005738:	4b34      	ldr	r3, [pc, #208]	@ (800580c <HAL_RCC_OscConfig+0x278>)
 800573a:	2201      	movs	r2, #1
 800573c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573e:	f7fc fe47 	bl	80023d0 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005746:	f7fc fe43 	bl	80023d0 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e1b4      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005758:	4b2b      	ldr	r3, [pc, #172]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005764:	4b28      	ldr	r3, [pc, #160]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	4925      	ldr	r1, [pc, #148]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 8005774:	4313      	orrs	r3, r2
 8005776:	600b      	str	r3, [r1, #0]
 8005778:	e015      	b.n	80057a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800577a:	4b24      	ldr	r3, [pc, #144]	@ (800580c <HAL_RCC_OscConfig+0x278>)
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fc fe26 	bl	80023d0 <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005788:	f7fc fe22 	bl	80023d0 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e193      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800579a:	4b1b      	ldr	r3, [pc, #108]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f0      	bne.n	8005788 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d036      	beq.n	8005820 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d016      	beq.n	80057e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ba:	4b15      	ldr	r3, [pc, #84]	@ (8005810 <HAL_RCC_OscConfig+0x27c>)
 80057bc:	2201      	movs	r2, #1
 80057be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c0:	f7fc fe06 	bl	80023d0 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057c8:	f7fc fe02 	bl	80023d0 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e173      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057da:	4b0b      	ldr	r3, [pc, #44]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80057dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f0      	beq.n	80057c8 <HAL_RCC_OscConfig+0x234>
 80057e6:	e01b      	b.n	8005820 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057e8:	4b09      	ldr	r3, [pc, #36]	@ (8005810 <HAL_RCC_OscConfig+0x27c>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ee:	f7fc fdef 	bl	80023d0 <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f4:	e00e      	b.n	8005814 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f6:	f7fc fdeb 	bl	80023d0 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d907      	bls.n	8005814 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e15c      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
 8005808:	40023800 	.word	0x40023800
 800580c:	42470000 	.word	0x42470000
 8005810:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005814:	4b8a      	ldr	r3, [pc, #552]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 8005816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1ea      	bne.n	80057f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8097 	beq.w	800595c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800582e:	2300      	movs	r3, #0
 8005830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005832:	4b83      	ldr	r3, [pc, #524]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 8005834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10f      	bne.n	800585e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	4b7f      	ldr	r3, [pc, #508]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005846:	4a7e      	ldr	r2, [pc, #504]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 8005848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800584c:	6413      	str	r3, [r2, #64]	@ 0x40
 800584e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005856:	60bb      	str	r3, [r7, #8]
 8005858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800585a:	2301      	movs	r3, #1
 800585c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800585e:	4b79      	ldr	r3, [pc, #484]	@ (8005a44 <HAL_RCC_OscConfig+0x4b0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005866:	2b00      	cmp	r3, #0
 8005868:	d118      	bne.n	800589c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800586a:	4b76      	ldr	r3, [pc, #472]	@ (8005a44 <HAL_RCC_OscConfig+0x4b0>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a75      	ldr	r2, [pc, #468]	@ (8005a44 <HAL_RCC_OscConfig+0x4b0>)
 8005870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005876:	f7fc fdab 	bl	80023d0 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800587e:	f7fc fda7 	bl	80023d0 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e118      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005890:	4b6c      	ldr	r3, [pc, #432]	@ (8005a44 <HAL_RCC_OscConfig+0x4b0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f0      	beq.n	800587e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d106      	bne.n	80058b2 <HAL_RCC_OscConfig+0x31e>
 80058a4:	4b66      	ldr	r3, [pc, #408]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a8:	4a65      	ldr	r2, [pc, #404]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80058b0:	e01c      	b.n	80058ec <HAL_RCC_OscConfig+0x358>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d10c      	bne.n	80058d4 <HAL_RCC_OscConfig+0x340>
 80058ba:	4b61      	ldr	r3, [pc, #388]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058be:	4a60      	ldr	r2, [pc, #384]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 80058c0:	f043 0304 	orr.w	r3, r3, #4
 80058c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80058c6:	4b5e      	ldr	r3, [pc, #376]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 80058c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ca:	4a5d      	ldr	r2, [pc, #372]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 80058cc:	f043 0301 	orr.w	r3, r3, #1
 80058d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80058d2:	e00b      	b.n	80058ec <HAL_RCC_OscConfig+0x358>
 80058d4:	4b5a      	ldr	r3, [pc, #360]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 80058d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d8:	4a59      	ldr	r2, [pc, #356]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 80058da:	f023 0301 	bic.w	r3, r3, #1
 80058de:	6713      	str	r3, [r2, #112]	@ 0x70
 80058e0:	4b57      	ldr	r3, [pc, #348]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 80058e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e4:	4a56      	ldr	r2, [pc, #344]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 80058e6:	f023 0304 	bic.w	r3, r3, #4
 80058ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d015      	beq.n	8005920 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f4:	f7fc fd6c 	bl	80023d0 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058fa:	e00a      	b.n	8005912 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fc:	f7fc fd68 	bl	80023d0 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e0d7      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005912:	4b4b      	ldr	r3, [pc, #300]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0ee      	beq.n	80058fc <HAL_RCC_OscConfig+0x368>
 800591e:	e014      	b.n	800594a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005920:	f7fc fd56 	bl	80023d0 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005926:	e00a      	b.n	800593e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005928:	f7fc fd52 	bl	80023d0 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e0c1      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800593e:	4b40      	ldr	r3, [pc, #256]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1ee      	bne.n	8005928 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800594a:	7dfb      	ldrb	r3, [r7, #23]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d105      	bne.n	800595c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005950:	4b3b      	ldr	r3, [pc, #236]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 8005952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005954:	4a3a      	ldr	r2, [pc, #232]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 8005956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800595a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 80ad 	beq.w	8005ac0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005966:	4b36      	ldr	r3, [pc, #216]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 030c 	and.w	r3, r3, #12
 800596e:	2b08      	cmp	r3, #8
 8005970:	d060      	beq.n	8005a34 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d145      	bne.n	8005a06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800597a:	4b33      	ldr	r3, [pc, #204]	@ (8005a48 <HAL_RCC_OscConfig+0x4b4>)
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fc fd26 	bl	80023d0 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005988:	f7fc fd22 	bl	80023d0 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e093      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800599a:	4b29      	ldr	r3, [pc, #164]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69da      	ldr	r2, [r3, #28]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	019b      	lsls	r3, r3, #6
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	3b01      	subs	r3, #1
 80059c0:	041b      	lsls	r3, r3, #16
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	061b      	lsls	r3, r3, #24
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d0:	071b      	lsls	r3, r3, #28
 80059d2:	491b      	ldr	r1, [pc, #108]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a48 <HAL_RCC_OscConfig+0x4b4>)
 80059da:	2201      	movs	r2, #1
 80059dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059de:	f7fc fcf7 	bl	80023d0 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e6:	f7fc fcf3 	bl	80023d0 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e064      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f8:	4b11      	ldr	r3, [pc, #68]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0f0      	beq.n	80059e6 <HAL_RCC_OscConfig+0x452>
 8005a04:	e05c      	b.n	8005ac0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a06:	4b10      	ldr	r3, [pc, #64]	@ (8005a48 <HAL_RCC_OscConfig+0x4b4>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fc fce0 	bl	80023d0 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a14:	f7fc fcdc 	bl	80023d0 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e04d      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a26:	4b06      	ldr	r3, [pc, #24]	@ (8005a40 <HAL_RCC_OscConfig+0x4ac>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x480>
 8005a32:	e045      	b.n	8005ac0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d107      	bne.n	8005a4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e040      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
 8005a40:	40023800 	.word	0x40023800
 8005a44:	40007000 	.word	0x40007000
 8005a48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8005acc <HAL_RCC_OscConfig+0x538>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d030      	beq.n	8005abc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d129      	bne.n	8005abc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d122      	bne.n	8005abc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d119      	bne.n	8005abc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	3b01      	subs	r3, #1
 8005a96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d10f      	bne.n	8005abc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d107      	bne.n	8005abc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d001      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e000      	b.n	8005ac2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40023800 	.word	0x40023800

08005ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e042      	b.n	8005b68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fc fb92 	bl	8002220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2224      	movs	r2, #36	@ 0x24
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f973 	bl	8005e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695a      	ldr	r2, [r3, #20]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	@ 0x28
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d175      	bne.n	8005c7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_UART_Transmit+0x2c>
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e06e      	b.n	8005c7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2221      	movs	r2, #33	@ 0x21
 8005baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bae:	f7fc fc0f 	bl	80023d0 <HAL_GetTick>
 8005bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	88fa      	ldrh	r2, [r7, #6]
 8005bb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	88fa      	ldrh	r2, [r7, #6]
 8005bbe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bc8:	d108      	bne.n	8005bdc <HAL_UART_Transmit+0x6c>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d104      	bne.n	8005bdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	e003      	b.n	8005be4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005be4:	e02e      	b.n	8005c44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2200      	movs	r2, #0
 8005bee:	2180      	movs	r1, #128	@ 0x80
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f848 	bl	8005c86 <UART_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e03a      	b.n	8005c7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10b      	bne.n	8005c26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	3302      	adds	r3, #2
 8005c22:	61bb      	str	r3, [r7, #24]
 8005c24:	e007      	b.n	8005c36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	781a      	ldrb	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	3301      	adds	r3, #1
 8005c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1cb      	bne.n	8005be6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2200      	movs	r2, #0
 8005c56:	2140      	movs	r1, #64	@ 0x40
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f814 	bl	8005c86 <UART_WaitOnFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e006      	b.n	8005c7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e000      	b.n	8005c7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3720      	adds	r7, #32
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	4613      	mov	r3, r2
 8005c94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c96:	e03b      	b.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d037      	beq.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca0:	f7fc fb96 	bl	80023d0 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	6a3a      	ldr	r2, [r7, #32]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d302      	bcc.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e03a      	b.n	8005d30 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d023      	beq.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b80      	cmp	r3, #128	@ 0x80
 8005ccc:	d020      	beq.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b40      	cmp	r3, #64	@ 0x40
 8005cd2:	d01d      	beq.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d116      	bne.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f81d 	bl	8005d38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2208      	movs	r2, #8
 8005d02:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e00f      	b.n	8005d30 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	bf0c      	ite	eq
 8005d20:	2301      	moveq	r3, #1
 8005d22:	2300      	movne	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d0b4      	beq.n	8005c98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b095      	sub	sp, #84	@ 0x54
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d60:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3314      	adds	r3, #20
 8005d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f023 0301 	bic.w	r3, r3, #1
 8005d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3314      	adds	r3, #20
 8005d92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e5      	bne.n	8005d74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d119      	bne.n	8005de4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f023 0310 	bic.w	r3, r3, #16
 8005dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dd0:	61ba      	str	r2, [r7, #24]
 8005dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	6979      	ldr	r1, [r7, #20]
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e5      	bne.n	8005db0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005df2:	bf00      	nop
 8005df4:	3754      	adds	r7, #84	@ 0x54
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e04:	b0c0      	sub	sp, #256	@ 0x100
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	68d9      	ldr	r1, [r3, #12]
 8005e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	ea40 0301 	orr.w	r3, r0, r1
 8005e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e58:	f021 010c 	bic.w	r1, r1, #12
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e66:	430b      	orrs	r3, r1
 8005e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7a:	6999      	ldr	r1, [r3, #24]
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	ea40 0301 	orr.w	r3, r0, r1
 8005e86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80060cc <UART_SetConfig+0x2cc>)
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d005      	beq.n	8005ea0 <UART_SetConfig+0xa0>
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4b8d      	ldr	r3, [pc, #564]	@ (80060d0 <UART_SetConfig+0x2d0>)
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d104      	bne.n	8005eaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ea0:	f7ff f934 	bl	800510c <HAL_RCC_GetPCLK2Freq>
 8005ea4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ea8:	e003      	b.n	8005eb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005eaa:	f7ff f91b 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 8005eae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ebc:	f040 810c 	bne.w	80060d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ece:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	462b      	mov	r3, r5
 8005ed6:	1891      	adds	r1, r2, r2
 8005ed8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005eda:	415b      	adcs	r3, r3
 8005edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ede:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	eb12 0801 	adds.w	r8, r2, r1
 8005ee8:	4629      	mov	r1, r5
 8005eea:	eb43 0901 	adc.w	r9, r3, r1
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f02:	4690      	mov	r8, r2
 8005f04:	4699      	mov	r9, r3
 8005f06:	4623      	mov	r3, r4
 8005f08:	eb18 0303 	adds.w	r3, r8, r3
 8005f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f10:	462b      	mov	r3, r5
 8005f12:	eb49 0303 	adc.w	r3, r9, r3
 8005f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f2e:	460b      	mov	r3, r1
 8005f30:	18db      	adds	r3, r3, r3
 8005f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f34:	4613      	mov	r3, r2
 8005f36:	eb42 0303 	adc.w	r3, r2, r3
 8005f3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f44:	f7fa fec0 	bl	8000cc8 <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4b61      	ldr	r3, [pc, #388]	@ (80060d4 <UART_SetConfig+0x2d4>)
 8005f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	011c      	lsls	r4, r3, #4
 8005f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f68:	4642      	mov	r2, r8
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	1891      	adds	r1, r2, r2
 8005f6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f70:	415b      	adcs	r3, r3
 8005f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f78:	4641      	mov	r1, r8
 8005f7a:	eb12 0a01 	adds.w	sl, r2, r1
 8005f7e:	4649      	mov	r1, r9
 8005f80:	eb43 0b01 	adc.w	fp, r3, r1
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f98:	4692      	mov	sl, r2
 8005f9a:	469b      	mov	fp, r3
 8005f9c:	4643      	mov	r3, r8
 8005f9e:	eb1a 0303 	adds.w	r3, sl, r3
 8005fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8005fac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005fc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	18db      	adds	r3, r3, r3
 8005fc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fca:	4613      	mov	r3, r2
 8005fcc:	eb42 0303 	adc.w	r3, r2, r3
 8005fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005fda:	f7fa fe75 	bl	8000cc8 <__aeabi_uldivmod>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80060d4 <UART_SetConfig+0x2d4>)
 8005fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	2264      	movs	r2, #100	@ 0x64
 8005fee:	fb02 f303 	mul.w	r3, r2, r3
 8005ff2:	1acb      	subs	r3, r1, r3
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ffa:	4b36      	ldr	r3, [pc, #216]	@ (80060d4 <UART_SetConfig+0x2d4>)
 8005ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006008:	441c      	add	r4, r3
 800600a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800600e:	2200      	movs	r2, #0
 8006010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006014:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006018:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800601c:	4642      	mov	r2, r8
 800601e:	464b      	mov	r3, r9
 8006020:	1891      	adds	r1, r2, r2
 8006022:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006024:	415b      	adcs	r3, r3
 8006026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800602c:	4641      	mov	r1, r8
 800602e:	1851      	adds	r1, r2, r1
 8006030:	6339      	str	r1, [r7, #48]	@ 0x30
 8006032:	4649      	mov	r1, r9
 8006034:	414b      	adcs	r3, r1
 8006036:	637b      	str	r3, [r7, #52]	@ 0x34
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006044:	4659      	mov	r1, fp
 8006046:	00cb      	lsls	r3, r1, #3
 8006048:	4651      	mov	r1, sl
 800604a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800604e:	4651      	mov	r1, sl
 8006050:	00ca      	lsls	r2, r1, #3
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	4603      	mov	r3, r0
 8006058:	4642      	mov	r2, r8
 800605a:	189b      	adds	r3, r3, r2
 800605c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006060:	464b      	mov	r3, r9
 8006062:	460a      	mov	r2, r1
 8006064:	eb42 0303 	adc.w	r3, r2, r3
 8006068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006078:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800607c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006080:	460b      	mov	r3, r1
 8006082:	18db      	adds	r3, r3, r3
 8006084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006086:	4613      	mov	r3, r2
 8006088:	eb42 0303 	adc.w	r3, r2, r3
 800608c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800608e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006092:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006096:	f7fa fe17 	bl	8000cc8 <__aeabi_uldivmod>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4b0d      	ldr	r3, [pc, #52]	@ (80060d4 <UART_SetConfig+0x2d4>)
 80060a0:	fba3 1302 	umull	r1, r3, r3, r2
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	2164      	movs	r1, #100	@ 0x64
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	3332      	adds	r3, #50	@ 0x32
 80060b2:	4a08      	ldr	r2, [pc, #32]	@ (80060d4 <UART_SetConfig+0x2d4>)
 80060b4:	fba2 2303 	umull	r2, r3, r2, r3
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	f003 0207 	and.w	r2, r3, #7
 80060be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4422      	add	r2, r4
 80060c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060c8:	e106      	b.n	80062d8 <UART_SetConfig+0x4d8>
 80060ca:	bf00      	nop
 80060cc:	40011000 	.word	0x40011000
 80060d0:	40011400 	.word	0x40011400
 80060d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060dc:	2200      	movs	r2, #0
 80060de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80060e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80060ea:	4642      	mov	r2, r8
 80060ec:	464b      	mov	r3, r9
 80060ee:	1891      	adds	r1, r2, r2
 80060f0:	6239      	str	r1, [r7, #32]
 80060f2:	415b      	adcs	r3, r3
 80060f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060fa:	4641      	mov	r1, r8
 80060fc:	1854      	adds	r4, r2, r1
 80060fe:	4649      	mov	r1, r9
 8006100:	eb43 0501 	adc.w	r5, r3, r1
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	00eb      	lsls	r3, r5, #3
 800610e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006112:	00e2      	lsls	r2, r4, #3
 8006114:	4614      	mov	r4, r2
 8006116:	461d      	mov	r5, r3
 8006118:	4643      	mov	r3, r8
 800611a:	18e3      	adds	r3, r4, r3
 800611c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006120:	464b      	mov	r3, r9
 8006122:	eb45 0303 	adc.w	r3, r5, r3
 8006126:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006136:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	f04f 0300 	mov.w	r3, #0
 8006142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006146:	4629      	mov	r1, r5
 8006148:	008b      	lsls	r3, r1, #2
 800614a:	4621      	mov	r1, r4
 800614c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006150:	4621      	mov	r1, r4
 8006152:	008a      	lsls	r2, r1, #2
 8006154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006158:	f7fa fdb6 	bl	8000cc8 <__aeabi_uldivmod>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4b60      	ldr	r3, [pc, #384]	@ (80062e4 <UART_SetConfig+0x4e4>)
 8006162:	fba3 2302 	umull	r2, r3, r3, r2
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	011c      	lsls	r4, r3, #4
 800616a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800616e:	2200      	movs	r2, #0
 8006170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006174:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006178:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800617c:	4642      	mov	r2, r8
 800617e:	464b      	mov	r3, r9
 8006180:	1891      	adds	r1, r2, r2
 8006182:	61b9      	str	r1, [r7, #24]
 8006184:	415b      	adcs	r3, r3
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800618c:	4641      	mov	r1, r8
 800618e:	1851      	adds	r1, r2, r1
 8006190:	6139      	str	r1, [r7, #16]
 8006192:	4649      	mov	r1, r9
 8006194:	414b      	adcs	r3, r1
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061a4:	4659      	mov	r1, fp
 80061a6:	00cb      	lsls	r3, r1, #3
 80061a8:	4651      	mov	r1, sl
 80061aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ae:	4651      	mov	r1, sl
 80061b0:	00ca      	lsls	r2, r1, #3
 80061b2:	4610      	mov	r0, r2
 80061b4:	4619      	mov	r1, r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	4642      	mov	r2, r8
 80061ba:	189b      	adds	r3, r3, r2
 80061bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061c0:	464b      	mov	r3, r9
 80061c2:	460a      	mov	r2, r1
 80061c4:	eb42 0303 	adc.w	r3, r2, r3
 80061c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80061e4:	4649      	mov	r1, r9
 80061e6:	008b      	lsls	r3, r1, #2
 80061e8:	4641      	mov	r1, r8
 80061ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ee:	4641      	mov	r1, r8
 80061f0:	008a      	lsls	r2, r1, #2
 80061f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061f6:	f7fa fd67 	bl	8000cc8 <__aeabi_uldivmod>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4611      	mov	r1, r2
 8006200:	4b38      	ldr	r3, [pc, #224]	@ (80062e4 <UART_SetConfig+0x4e4>)
 8006202:	fba3 2301 	umull	r2, r3, r3, r1
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2264      	movs	r2, #100	@ 0x64
 800620a:	fb02 f303 	mul.w	r3, r2, r3
 800620e:	1acb      	subs	r3, r1, r3
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	3332      	adds	r3, #50	@ 0x32
 8006214:	4a33      	ldr	r2, [pc, #204]	@ (80062e4 <UART_SetConfig+0x4e4>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006220:	441c      	add	r4, r3
 8006222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006226:	2200      	movs	r2, #0
 8006228:	673b      	str	r3, [r7, #112]	@ 0x70
 800622a:	677a      	str	r2, [r7, #116]	@ 0x74
 800622c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006230:	4642      	mov	r2, r8
 8006232:	464b      	mov	r3, r9
 8006234:	1891      	adds	r1, r2, r2
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	415b      	adcs	r3, r3
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006240:	4641      	mov	r1, r8
 8006242:	1851      	adds	r1, r2, r1
 8006244:	6039      	str	r1, [r7, #0]
 8006246:	4649      	mov	r1, r9
 8006248:	414b      	adcs	r3, r1
 800624a:	607b      	str	r3, [r7, #4]
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006258:	4659      	mov	r1, fp
 800625a:	00cb      	lsls	r3, r1, #3
 800625c:	4651      	mov	r1, sl
 800625e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006262:	4651      	mov	r1, sl
 8006264:	00ca      	lsls	r2, r1, #3
 8006266:	4610      	mov	r0, r2
 8006268:	4619      	mov	r1, r3
 800626a:	4603      	mov	r3, r0
 800626c:	4642      	mov	r2, r8
 800626e:	189b      	adds	r3, r3, r2
 8006270:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006272:	464b      	mov	r3, r9
 8006274:	460a      	mov	r2, r1
 8006276:	eb42 0303 	adc.w	r3, r2, r3
 800627a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	663b      	str	r3, [r7, #96]	@ 0x60
 8006286:	667a      	str	r2, [r7, #100]	@ 0x64
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006294:	4649      	mov	r1, r9
 8006296:	008b      	lsls	r3, r1, #2
 8006298:	4641      	mov	r1, r8
 800629a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800629e:	4641      	mov	r1, r8
 80062a0:	008a      	lsls	r2, r1, #2
 80062a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80062a6:	f7fa fd0f 	bl	8000cc8 <__aeabi_uldivmod>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <UART_SetConfig+0x4e4>)
 80062b0:	fba3 1302 	umull	r1, r3, r3, r2
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	2164      	movs	r1, #100	@ 0x64
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	3332      	adds	r3, #50	@ 0x32
 80062c2:	4a08      	ldr	r2, [pc, #32]	@ (80062e4 <UART_SetConfig+0x4e4>)
 80062c4:	fba2 2303 	umull	r2, r3, r2, r3
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	f003 020f 	and.w	r2, r3, #15
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4422      	add	r2, r4
 80062d6:	609a      	str	r2, [r3, #8]
}
 80062d8:	bf00      	nop
 80062da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80062de:	46bd      	mov	sp, r7
 80062e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062e4:	51eb851f 	.word	0x51eb851f

080062e8 <__cvt>:
 80062e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062ec:	ec57 6b10 	vmov	r6, r7, d0
 80062f0:	2f00      	cmp	r7, #0
 80062f2:	460c      	mov	r4, r1
 80062f4:	4619      	mov	r1, r3
 80062f6:	463b      	mov	r3, r7
 80062f8:	bfbb      	ittet	lt
 80062fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80062fe:	461f      	movlt	r7, r3
 8006300:	2300      	movge	r3, #0
 8006302:	232d      	movlt	r3, #45	@ 0x2d
 8006304:	700b      	strb	r3, [r1, #0]
 8006306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006308:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800630c:	4691      	mov	r9, r2
 800630e:	f023 0820 	bic.w	r8, r3, #32
 8006312:	bfbc      	itt	lt
 8006314:	4632      	movlt	r2, r6
 8006316:	4616      	movlt	r6, r2
 8006318:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800631c:	d005      	beq.n	800632a <__cvt+0x42>
 800631e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006322:	d100      	bne.n	8006326 <__cvt+0x3e>
 8006324:	3401      	adds	r4, #1
 8006326:	2102      	movs	r1, #2
 8006328:	e000      	b.n	800632c <__cvt+0x44>
 800632a:	2103      	movs	r1, #3
 800632c:	ab03      	add	r3, sp, #12
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	ab02      	add	r3, sp, #8
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	ec47 6b10 	vmov	d0, r6, r7
 8006338:	4653      	mov	r3, sl
 800633a:	4622      	mov	r2, r4
 800633c:	f000 fe4c 	bl	8006fd8 <_dtoa_r>
 8006340:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006344:	4605      	mov	r5, r0
 8006346:	d119      	bne.n	800637c <__cvt+0x94>
 8006348:	f019 0f01 	tst.w	r9, #1
 800634c:	d00e      	beq.n	800636c <__cvt+0x84>
 800634e:	eb00 0904 	add.w	r9, r0, r4
 8006352:	2200      	movs	r2, #0
 8006354:	2300      	movs	r3, #0
 8006356:	4630      	mov	r0, r6
 8006358:	4639      	mov	r1, r7
 800635a:	f7fa fbd5 	bl	8000b08 <__aeabi_dcmpeq>
 800635e:	b108      	cbz	r0, 8006364 <__cvt+0x7c>
 8006360:	f8cd 900c 	str.w	r9, [sp, #12]
 8006364:	2230      	movs	r2, #48	@ 0x30
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	454b      	cmp	r3, r9
 800636a:	d31e      	bcc.n	80063aa <__cvt+0xc2>
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006370:	1b5b      	subs	r3, r3, r5
 8006372:	4628      	mov	r0, r5
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	b004      	add	sp, #16
 8006378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006380:	eb00 0904 	add.w	r9, r0, r4
 8006384:	d1e5      	bne.n	8006352 <__cvt+0x6a>
 8006386:	7803      	ldrb	r3, [r0, #0]
 8006388:	2b30      	cmp	r3, #48	@ 0x30
 800638a:	d10a      	bne.n	80063a2 <__cvt+0xba>
 800638c:	2200      	movs	r2, #0
 800638e:	2300      	movs	r3, #0
 8006390:	4630      	mov	r0, r6
 8006392:	4639      	mov	r1, r7
 8006394:	f7fa fbb8 	bl	8000b08 <__aeabi_dcmpeq>
 8006398:	b918      	cbnz	r0, 80063a2 <__cvt+0xba>
 800639a:	f1c4 0401 	rsb	r4, r4, #1
 800639e:	f8ca 4000 	str.w	r4, [sl]
 80063a2:	f8da 3000 	ldr.w	r3, [sl]
 80063a6:	4499      	add	r9, r3
 80063a8:	e7d3      	b.n	8006352 <__cvt+0x6a>
 80063aa:	1c59      	adds	r1, r3, #1
 80063ac:	9103      	str	r1, [sp, #12]
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	e7d9      	b.n	8006366 <__cvt+0x7e>

080063b2 <__exponent>:
 80063b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063b4:	2900      	cmp	r1, #0
 80063b6:	bfba      	itte	lt
 80063b8:	4249      	neglt	r1, r1
 80063ba:	232d      	movlt	r3, #45	@ 0x2d
 80063bc:	232b      	movge	r3, #43	@ 0x2b
 80063be:	2909      	cmp	r1, #9
 80063c0:	7002      	strb	r2, [r0, #0]
 80063c2:	7043      	strb	r3, [r0, #1]
 80063c4:	dd29      	ble.n	800641a <__exponent+0x68>
 80063c6:	f10d 0307 	add.w	r3, sp, #7
 80063ca:	461d      	mov	r5, r3
 80063cc:	270a      	movs	r7, #10
 80063ce:	461a      	mov	r2, r3
 80063d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80063d4:	fb07 1416 	mls	r4, r7, r6, r1
 80063d8:	3430      	adds	r4, #48	@ 0x30
 80063da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063de:	460c      	mov	r4, r1
 80063e0:	2c63      	cmp	r4, #99	@ 0x63
 80063e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80063e6:	4631      	mov	r1, r6
 80063e8:	dcf1      	bgt.n	80063ce <__exponent+0x1c>
 80063ea:	3130      	adds	r1, #48	@ 0x30
 80063ec:	1e94      	subs	r4, r2, #2
 80063ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063f2:	1c41      	adds	r1, r0, #1
 80063f4:	4623      	mov	r3, r4
 80063f6:	42ab      	cmp	r3, r5
 80063f8:	d30a      	bcc.n	8006410 <__exponent+0x5e>
 80063fa:	f10d 0309 	add.w	r3, sp, #9
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	42ac      	cmp	r4, r5
 8006402:	bf88      	it	hi
 8006404:	2300      	movhi	r3, #0
 8006406:	3302      	adds	r3, #2
 8006408:	4403      	add	r3, r0
 800640a:	1a18      	subs	r0, r3, r0
 800640c:	b003      	add	sp, #12
 800640e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006410:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006414:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006418:	e7ed      	b.n	80063f6 <__exponent+0x44>
 800641a:	2330      	movs	r3, #48	@ 0x30
 800641c:	3130      	adds	r1, #48	@ 0x30
 800641e:	7083      	strb	r3, [r0, #2]
 8006420:	70c1      	strb	r1, [r0, #3]
 8006422:	1d03      	adds	r3, r0, #4
 8006424:	e7f1      	b.n	800640a <__exponent+0x58>
	...

08006428 <_printf_float>:
 8006428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	b08d      	sub	sp, #52	@ 0x34
 800642e:	460c      	mov	r4, r1
 8006430:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006434:	4616      	mov	r6, r2
 8006436:	461f      	mov	r7, r3
 8006438:	4605      	mov	r5, r0
 800643a:	f000 fccd 	bl	8006dd8 <_localeconv_r>
 800643e:	6803      	ldr	r3, [r0, #0]
 8006440:	9304      	str	r3, [sp, #16]
 8006442:	4618      	mov	r0, r3
 8006444:	f7f9 ff34 	bl	80002b0 <strlen>
 8006448:	2300      	movs	r3, #0
 800644a:	930a      	str	r3, [sp, #40]	@ 0x28
 800644c:	f8d8 3000 	ldr.w	r3, [r8]
 8006450:	9005      	str	r0, [sp, #20]
 8006452:	3307      	adds	r3, #7
 8006454:	f023 0307 	bic.w	r3, r3, #7
 8006458:	f103 0208 	add.w	r2, r3, #8
 800645c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006460:	f8d4 b000 	ldr.w	fp, [r4]
 8006464:	f8c8 2000 	str.w	r2, [r8]
 8006468:	e9d3 8900 	ldrd	r8, r9, [r3]
 800646c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006470:	9307      	str	r3, [sp, #28]
 8006472:	f8cd 8018 	str.w	r8, [sp, #24]
 8006476:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800647a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800647e:	4b9c      	ldr	r3, [pc, #624]	@ (80066f0 <_printf_float+0x2c8>)
 8006480:	f04f 32ff 	mov.w	r2, #4294967295
 8006484:	f7fa fb72 	bl	8000b6c <__aeabi_dcmpun>
 8006488:	bb70      	cbnz	r0, 80064e8 <_printf_float+0xc0>
 800648a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800648e:	4b98      	ldr	r3, [pc, #608]	@ (80066f0 <_printf_float+0x2c8>)
 8006490:	f04f 32ff 	mov.w	r2, #4294967295
 8006494:	f7fa fb4c 	bl	8000b30 <__aeabi_dcmple>
 8006498:	bb30      	cbnz	r0, 80064e8 <_printf_float+0xc0>
 800649a:	2200      	movs	r2, #0
 800649c:	2300      	movs	r3, #0
 800649e:	4640      	mov	r0, r8
 80064a0:	4649      	mov	r1, r9
 80064a2:	f7fa fb3b 	bl	8000b1c <__aeabi_dcmplt>
 80064a6:	b110      	cbz	r0, 80064ae <_printf_float+0x86>
 80064a8:	232d      	movs	r3, #45	@ 0x2d
 80064aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064ae:	4a91      	ldr	r2, [pc, #580]	@ (80066f4 <_printf_float+0x2cc>)
 80064b0:	4b91      	ldr	r3, [pc, #580]	@ (80066f8 <_printf_float+0x2d0>)
 80064b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80064b6:	bf94      	ite	ls
 80064b8:	4690      	movls	r8, r2
 80064ba:	4698      	movhi	r8, r3
 80064bc:	2303      	movs	r3, #3
 80064be:	6123      	str	r3, [r4, #16]
 80064c0:	f02b 0304 	bic.w	r3, fp, #4
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	f04f 0900 	mov.w	r9, #0
 80064ca:	9700      	str	r7, [sp, #0]
 80064cc:	4633      	mov	r3, r6
 80064ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80064d0:	4621      	mov	r1, r4
 80064d2:	4628      	mov	r0, r5
 80064d4:	f000 f9d2 	bl	800687c <_printf_common>
 80064d8:	3001      	adds	r0, #1
 80064da:	f040 808d 	bne.w	80065f8 <_printf_float+0x1d0>
 80064de:	f04f 30ff 	mov.w	r0, #4294967295
 80064e2:	b00d      	add	sp, #52	@ 0x34
 80064e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e8:	4642      	mov	r2, r8
 80064ea:	464b      	mov	r3, r9
 80064ec:	4640      	mov	r0, r8
 80064ee:	4649      	mov	r1, r9
 80064f0:	f7fa fb3c 	bl	8000b6c <__aeabi_dcmpun>
 80064f4:	b140      	cbz	r0, 8006508 <_printf_float+0xe0>
 80064f6:	464b      	mov	r3, r9
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bfbc      	itt	lt
 80064fc:	232d      	movlt	r3, #45	@ 0x2d
 80064fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006502:	4a7e      	ldr	r2, [pc, #504]	@ (80066fc <_printf_float+0x2d4>)
 8006504:	4b7e      	ldr	r3, [pc, #504]	@ (8006700 <_printf_float+0x2d8>)
 8006506:	e7d4      	b.n	80064b2 <_printf_float+0x8a>
 8006508:	6863      	ldr	r3, [r4, #4]
 800650a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800650e:	9206      	str	r2, [sp, #24]
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	d13b      	bne.n	800658c <_printf_float+0x164>
 8006514:	2306      	movs	r3, #6
 8006516:	6063      	str	r3, [r4, #4]
 8006518:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800651c:	2300      	movs	r3, #0
 800651e:	6022      	str	r2, [r4, #0]
 8006520:	9303      	str	r3, [sp, #12]
 8006522:	ab0a      	add	r3, sp, #40	@ 0x28
 8006524:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006528:	ab09      	add	r3, sp, #36	@ 0x24
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	6861      	ldr	r1, [r4, #4]
 800652e:	ec49 8b10 	vmov	d0, r8, r9
 8006532:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006536:	4628      	mov	r0, r5
 8006538:	f7ff fed6 	bl	80062e8 <__cvt>
 800653c:	9b06      	ldr	r3, [sp, #24]
 800653e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006540:	2b47      	cmp	r3, #71	@ 0x47
 8006542:	4680      	mov	r8, r0
 8006544:	d129      	bne.n	800659a <_printf_float+0x172>
 8006546:	1cc8      	adds	r0, r1, #3
 8006548:	db02      	blt.n	8006550 <_printf_float+0x128>
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	4299      	cmp	r1, r3
 800654e:	dd41      	ble.n	80065d4 <_printf_float+0x1ac>
 8006550:	f1aa 0a02 	sub.w	sl, sl, #2
 8006554:	fa5f fa8a 	uxtb.w	sl, sl
 8006558:	3901      	subs	r1, #1
 800655a:	4652      	mov	r2, sl
 800655c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006560:	9109      	str	r1, [sp, #36]	@ 0x24
 8006562:	f7ff ff26 	bl	80063b2 <__exponent>
 8006566:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006568:	1813      	adds	r3, r2, r0
 800656a:	2a01      	cmp	r2, #1
 800656c:	4681      	mov	r9, r0
 800656e:	6123      	str	r3, [r4, #16]
 8006570:	dc02      	bgt.n	8006578 <_printf_float+0x150>
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	07d2      	lsls	r2, r2, #31
 8006576:	d501      	bpl.n	800657c <_printf_float+0x154>
 8006578:	3301      	adds	r3, #1
 800657a:	6123      	str	r3, [r4, #16]
 800657c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0a2      	beq.n	80064ca <_printf_float+0xa2>
 8006584:	232d      	movs	r3, #45	@ 0x2d
 8006586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800658a:	e79e      	b.n	80064ca <_printf_float+0xa2>
 800658c:	9a06      	ldr	r2, [sp, #24]
 800658e:	2a47      	cmp	r2, #71	@ 0x47
 8006590:	d1c2      	bne.n	8006518 <_printf_float+0xf0>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1c0      	bne.n	8006518 <_printf_float+0xf0>
 8006596:	2301      	movs	r3, #1
 8006598:	e7bd      	b.n	8006516 <_printf_float+0xee>
 800659a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800659e:	d9db      	bls.n	8006558 <_printf_float+0x130>
 80065a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80065a4:	d118      	bne.n	80065d8 <_printf_float+0x1b0>
 80065a6:	2900      	cmp	r1, #0
 80065a8:	6863      	ldr	r3, [r4, #4]
 80065aa:	dd0b      	ble.n	80065c4 <_printf_float+0x19c>
 80065ac:	6121      	str	r1, [r4, #16]
 80065ae:	b913      	cbnz	r3, 80065b6 <_printf_float+0x18e>
 80065b0:	6822      	ldr	r2, [r4, #0]
 80065b2:	07d0      	lsls	r0, r2, #31
 80065b4:	d502      	bpl.n	80065bc <_printf_float+0x194>
 80065b6:	3301      	adds	r3, #1
 80065b8:	440b      	add	r3, r1
 80065ba:	6123      	str	r3, [r4, #16]
 80065bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065be:	f04f 0900 	mov.w	r9, #0
 80065c2:	e7db      	b.n	800657c <_printf_float+0x154>
 80065c4:	b913      	cbnz	r3, 80065cc <_printf_float+0x1a4>
 80065c6:	6822      	ldr	r2, [r4, #0]
 80065c8:	07d2      	lsls	r2, r2, #31
 80065ca:	d501      	bpl.n	80065d0 <_printf_float+0x1a8>
 80065cc:	3302      	adds	r3, #2
 80065ce:	e7f4      	b.n	80065ba <_printf_float+0x192>
 80065d0:	2301      	movs	r3, #1
 80065d2:	e7f2      	b.n	80065ba <_printf_float+0x192>
 80065d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065da:	4299      	cmp	r1, r3
 80065dc:	db05      	blt.n	80065ea <_printf_float+0x1c2>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	6121      	str	r1, [r4, #16]
 80065e2:	07d8      	lsls	r0, r3, #31
 80065e4:	d5ea      	bpl.n	80065bc <_printf_float+0x194>
 80065e6:	1c4b      	adds	r3, r1, #1
 80065e8:	e7e7      	b.n	80065ba <_printf_float+0x192>
 80065ea:	2900      	cmp	r1, #0
 80065ec:	bfd4      	ite	le
 80065ee:	f1c1 0202 	rsble	r2, r1, #2
 80065f2:	2201      	movgt	r2, #1
 80065f4:	4413      	add	r3, r2
 80065f6:	e7e0      	b.n	80065ba <_printf_float+0x192>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	055a      	lsls	r2, r3, #21
 80065fc:	d407      	bmi.n	800660e <_printf_float+0x1e6>
 80065fe:	6923      	ldr	r3, [r4, #16]
 8006600:	4642      	mov	r2, r8
 8006602:	4631      	mov	r1, r6
 8006604:	4628      	mov	r0, r5
 8006606:	47b8      	blx	r7
 8006608:	3001      	adds	r0, #1
 800660a:	d12b      	bne.n	8006664 <_printf_float+0x23c>
 800660c:	e767      	b.n	80064de <_printf_float+0xb6>
 800660e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006612:	f240 80dd 	bls.w	80067d0 <_printf_float+0x3a8>
 8006616:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800661a:	2200      	movs	r2, #0
 800661c:	2300      	movs	r3, #0
 800661e:	f7fa fa73 	bl	8000b08 <__aeabi_dcmpeq>
 8006622:	2800      	cmp	r0, #0
 8006624:	d033      	beq.n	800668e <_printf_float+0x266>
 8006626:	4a37      	ldr	r2, [pc, #220]	@ (8006704 <_printf_float+0x2dc>)
 8006628:	2301      	movs	r3, #1
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	47b8      	blx	r7
 8006630:	3001      	adds	r0, #1
 8006632:	f43f af54 	beq.w	80064de <_printf_float+0xb6>
 8006636:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800663a:	4543      	cmp	r3, r8
 800663c:	db02      	blt.n	8006644 <_printf_float+0x21c>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	07d8      	lsls	r0, r3, #31
 8006642:	d50f      	bpl.n	8006664 <_printf_float+0x23c>
 8006644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006648:	4631      	mov	r1, r6
 800664a:	4628      	mov	r0, r5
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	f43f af45 	beq.w	80064de <_printf_float+0xb6>
 8006654:	f04f 0900 	mov.w	r9, #0
 8006658:	f108 38ff 	add.w	r8, r8, #4294967295
 800665c:	f104 0a1a 	add.w	sl, r4, #26
 8006660:	45c8      	cmp	r8, r9
 8006662:	dc09      	bgt.n	8006678 <_printf_float+0x250>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	079b      	lsls	r3, r3, #30
 8006668:	f100 8103 	bmi.w	8006872 <_printf_float+0x44a>
 800666c:	68e0      	ldr	r0, [r4, #12]
 800666e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006670:	4298      	cmp	r0, r3
 8006672:	bfb8      	it	lt
 8006674:	4618      	movlt	r0, r3
 8006676:	e734      	b.n	80064e2 <_printf_float+0xba>
 8006678:	2301      	movs	r3, #1
 800667a:	4652      	mov	r2, sl
 800667c:	4631      	mov	r1, r6
 800667e:	4628      	mov	r0, r5
 8006680:	47b8      	blx	r7
 8006682:	3001      	adds	r0, #1
 8006684:	f43f af2b 	beq.w	80064de <_printf_float+0xb6>
 8006688:	f109 0901 	add.w	r9, r9, #1
 800668c:	e7e8      	b.n	8006660 <_printf_float+0x238>
 800668e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006690:	2b00      	cmp	r3, #0
 8006692:	dc39      	bgt.n	8006708 <_printf_float+0x2e0>
 8006694:	4a1b      	ldr	r2, [pc, #108]	@ (8006704 <_printf_float+0x2dc>)
 8006696:	2301      	movs	r3, #1
 8006698:	4631      	mov	r1, r6
 800669a:	4628      	mov	r0, r5
 800669c:	47b8      	blx	r7
 800669e:	3001      	adds	r0, #1
 80066a0:	f43f af1d 	beq.w	80064de <_printf_float+0xb6>
 80066a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80066a8:	ea59 0303 	orrs.w	r3, r9, r3
 80066ac:	d102      	bne.n	80066b4 <_printf_float+0x28c>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	07d9      	lsls	r1, r3, #31
 80066b2:	d5d7      	bpl.n	8006664 <_printf_float+0x23c>
 80066b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066b8:	4631      	mov	r1, r6
 80066ba:	4628      	mov	r0, r5
 80066bc:	47b8      	blx	r7
 80066be:	3001      	adds	r0, #1
 80066c0:	f43f af0d 	beq.w	80064de <_printf_float+0xb6>
 80066c4:	f04f 0a00 	mov.w	sl, #0
 80066c8:	f104 0b1a 	add.w	fp, r4, #26
 80066cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ce:	425b      	negs	r3, r3
 80066d0:	4553      	cmp	r3, sl
 80066d2:	dc01      	bgt.n	80066d8 <_printf_float+0x2b0>
 80066d4:	464b      	mov	r3, r9
 80066d6:	e793      	b.n	8006600 <_printf_float+0x1d8>
 80066d8:	2301      	movs	r3, #1
 80066da:	465a      	mov	r2, fp
 80066dc:	4631      	mov	r1, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	f43f aefb 	beq.w	80064de <_printf_float+0xb6>
 80066e8:	f10a 0a01 	add.w	sl, sl, #1
 80066ec:	e7ee      	b.n	80066cc <_printf_float+0x2a4>
 80066ee:	bf00      	nop
 80066f0:	7fefffff 	.word	0x7fefffff
 80066f4:	08008d68 	.word	0x08008d68
 80066f8:	08008d6c 	.word	0x08008d6c
 80066fc:	08008d70 	.word	0x08008d70
 8006700:	08008d74 	.word	0x08008d74
 8006704:	08008d78 	.word	0x08008d78
 8006708:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800670a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800670e:	4553      	cmp	r3, sl
 8006710:	bfa8      	it	ge
 8006712:	4653      	movge	r3, sl
 8006714:	2b00      	cmp	r3, #0
 8006716:	4699      	mov	r9, r3
 8006718:	dc36      	bgt.n	8006788 <_printf_float+0x360>
 800671a:	f04f 0b00 	mov.w	fp, #0
 800671e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006722:	f104 021a 	add.w	r2, r4, #26
 8006726:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006728:	9306      	str	r3, [sp, #24]
 800672a:	eba3 0309 	sub.w	r3, r3, r9
 800672e:	455b      	cmp	r3, fp
 8006730:	dc31      	bgt.n	8006796 <_printf_float+0x36e>
 8006732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006734:	459a      	cmp	sl, r3
 8006736:	dc3a      	bgt.n	80067ae <_printf_float+0x386>
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	07da      	lsls	r2, r3, #31
 800673c:	d437      	bmi.n	80067ae <_printf_float+0x386>
 800673e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006740:	ebaa 0903 	sub.w	r9, sl, r3
 8006744:	9b06      	ldr	r3, [sp, #24]
 8006746:	ebaa 0303 	sub.w	r3, sl, r3
 800674a:	4599      	cmp	r9, r3
 800674c:	bfa8      	it	ge
 800674e:	4699      	movge	r9, r3
 8006750:	f1b9 0f00 	cmp.w	r9, #0
 8006754:	dc33      	bgt.n	80067be <_printf_float+0x396>
 8006756:	f04f 0800 	mov.w	r8, #0
 800675a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800675e:	f104 0b1a 	add.w	fp, r4, #26
 8006762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006764:	ebaa 0303 	sub.w	r3, sl, r3
 8006768:	eba3 0309 	sub.w	r3, r3, r9
 800676c:	4543      	cmp	r3, r8
 800676e:	f77f af79 	ble.w	8006664 <_printf_float+0x23c>
 8006772:	2301      	movs	r3, #1
 8006774:	465a      	mov	r2, fp
 8006776:	4631      	mov	r1, r6
 8006778:	4628      	mov	r0, r5
 800677a:	47b8      	blx	r7
 800677c:	3001      	adds	r0, #1
 800677e:	f43f aeae 	beq.w	80064de <_printf_float+0xb6>
 8006782:	f108 0801 	add.w	r8, r8, #1
 8006786:	e7ec      	b.n	8006762 <_printf_float+0x33a>
 8006788:	4642      	mov	r2, r8
 800678a:	4631      	mov	r1, r6
 800678c:	4628      	mov	r0, r5
 800678e:	47b8      	blx	r7
 8006790:	3001      	adds	r0, #1
 8006792:	d1c2      	bne.n	800671a <_printf_float+0x2f2>
 8006794:	e6a3      	b.n	80064de <_printf_float+0xb6>
 8006796:	2301      	movs	r3, #1
 8006798:	4631      	mov	r1, r6
 800679a:	4628      	mov	r0, r5
 800679c:	9206      	str	r2, [sp, #24]
 800679e:	47b8      	blx	r7
 80067a0:	3001      	adds	r0, #1
 80067a2:	f43f ae9c 	beq.w	80064de <_printf_float+0xb6>
 80067a6:	9a06      	ldr	r2, [sp, #24]
 80067a8:	f10b 0b01 	add.w	fp, fp, #1
 80067ac:	e7bb      	b.n	8006726 <_printf_float+0x2fe>
 80067ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067b2:	4631      	mov	r1, r6
 80067b4:	4628      	mov	r0, r5
 80067b6:	47b8      	blx	r7
 80067b8:	3001      	adds	r0, #1
 80067ba:	d1c0      	bne.n	800673e <_printf_float+0x316>
 80067bc:	e68f      	b.n	80064de <_printf_float+0xb6>
 80067be:	9a06      	ldr	r2, [sp, #24]
 80067c0:	464b      	mov	r3, r9
 80067c2:	4442      	add	r2, r8
 80067c4:	4631      	mov	r1, r6
 80067c6:	4628      	mov	r0, r5
 80067c8:	47b8      	blx	r7
 80067ca:	3001      	adds	r0, #1
 80067cc:	d1c3      	bne.n	8006756 <_printf_float+0x32e>
 80067ce:	e686      	b.n	80064de <_printf_float+0xb6>
 80067d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067d4:	f1ba 0f01 	cmp.w	sl, #1
 80067d8:	dc01      	bgt.n	80067de <_printf_float+0x3b6>
 80067da:	07db      	lsls	r3, r3, #31
 80067dc:	d536      	bpl.n	800684c <_printf_float+0x424>
 80067de:	2301      	movs	r3, #1
 80067e0:	4642      	mov	r2, r8
 80067e2:	4631      	mov	r1, r6
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b8      	blx	r7
 80067e8:	3001      	adds	r0, #1
 80067ea:	f43f ae78 	beq.w	80064de <_printf_float+0xb6>
 80067ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	f43f ae70 	beq.w	80064de <_printf_float+0xb6>
 80067fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006802:	2200      	movs	r2, #0
 8006804:	2300      	movs	r3, #0
 8006806:	f10a 3aff 	add.w	sl, sl, #4294967295
 800680a:	f7fa f97d 	bl	8000b08 <__aeabi_dcmpeq>
 800680e:	b9c0      	cbnz	r0, 8006842 <_printf_float+0x41a>
 8006810:	4653      	mov	r3, sl
 8006812:	f108 0201 	add.w	r2, r8, #1
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	d10c      	bne.n	800683a <_printf_float+0x412>
 8006820:	e65d      	b.n	80064de <_printf_float+0xb6>
 8006822:	2301      	movs	r3, #1
 8006824:	465a      	mov	r2, fp
 8006826:	4631      	mov	r1, r6
 8006828:	4628      	mov	r0, r5
 800682a:	47b8      	blx	r7
 800682c:	3001      	adds	r0, #1
 800682e:	f43f ae56 	beq.w	80064de <_printf_float+0xb6>
 8006832:	f108 0801 	add.w	r8, r8, #1
 8006836:	45d0      	cmp	r8, sl
 8006838:	dbf3      	blt.n	8006822 <_printf_float+0x3fa>
 800683a:	464b      	mov	r3, r9
 800683c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006840:	e6df      	b.n	8006602 <_printf_float+0x1da>
 8006842:	f04f 0800 	mov.w	r8, #0
 8006846:	f104 0b1a 	add.w	fp, r4, #26
 800684a:	e7f4      	b.n	8006836 <_printf_float+0x40e>
 800684c:	2301      	movs	r3, #1
 800684e:	4642      	mov	r2, r8
 8006850:	e7e1      	b.n	8006816 <_printf_float+0x3ee>
 8006852:	2301      	movs	r3, #1
 8006854:	464a      	mov	r2, r9
 8006856:	4631      	mov	r1, r6
 8006858:	4628      	mov	r0, r5
 800685a:	47b8      	blx	r7
 800685c:	3001      	adds	r0, #1
 800685e:	f43f ae3e 	beq.w	80064de <_printf_float+0xb6>
 8006862:	f108 0801 	add.w	r8, r8, #1
 8006866:	68e3      	ldr	r3, [r4, #12]
 8006868:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800686a:	1a5b      	subs	r3, r3, r1
 800686c:	4543      	cmp	r3, r8
 800686e:	dcf0      	bgt.n	8006852 <_printf_float+0x42a>
 8006870:	e6fc      	b.n	800666c <_printf_float+0x244>
 8006872:	f04f 0800 	mov.w	r8, #0
 8006876:	f104 0919 	add.w	r9, r4, #25
 800687a:	e7f4      	b.n	8006866 <_printf_float+0x43e>

0800687c <_printf_common>:
 800687c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006880:	4616      	mov	r6, r2
 8006882:	4698      	mov	r8, r3
 8006884:	688a      	ldr	r2, [r1, #8]
 8006886:	690b      	ldr	r3, [r1, #16]
 8006888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800688c:	4293      	cmp	r3, r2
 800688e:	bfb8      	it	lt
 8006890:	4613      	movlt	r3, r2
 8006892:	6033      	str	r3, [r6, #0]
 8006894:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006898:	4607      	mov	r7, r0
 800689a:	460c      	mov	r4, r1
 800689c:	b10a      	cbz	r2, 80068a2 <_printf_common+0x26>
 800689e:	3301      	adds	r3, #1
 80068a0:	6033      	str	r3, [r6, #0]
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	0699      	lsls	r1, r3, #26
 80068a6:	bf42      	ittt	mi
 80068a8:	6833      	ldrmi	r3, [r6, #0]
 80068aa:	3302      	addmi	r3, #2
 80068ac:	6033      	strmi	r3, [r6, #0]
 80068ae:	6825      	ldr	r5, [r4, #0]
 80068b0:	f015 0506 	ands.w	r5, r5, #6
 80068b4:	d106      	bne.n	80068c4 <_printf_common+0x48>
 80068b6:	f104 0a19 	add.w	sl, r4, #25
 80068ba:	68e3      	ldr	r3, [r4, #12]
 80068bc:	6832      	ldr	r2, [r6, #0]
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	42ab      	cmp	r3, r5
 80068c2:	dc26      	bgt.n	8006912 <_printf_common+0x96>
 80068c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068c8:	6822      	ldr	r2, [r4, #0]
 80068ca:	3b00      	subs	r3, #0
 80068cc:	bf18      	it	ne
 80068ce:	2301      	movne	r3, #1
 80068d0:	0692      	lsls	r2, r2, #26
 80068d2:	d42b      	bmi.n	800692c <_printf_common+0xb0>
 80068d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068d8:	4641      	mov	r1, r8
 80068da:	4638      	mov	r0, r7
 80068dc:	47c8      	blx	r9
 80068de:	3001      	adds	r0, #1
 80068e0:	d01e      	beq.n	8006920 <_printf_common+0xa4>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	6922      	ldr	r2, [r4, #16]
 80068e6:	f003 0306 	and.w	r3, r3, #6
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	bf02      	ittt	eq
 80068ee:	68e5      	ldreq	r5, [r4, #12]
 80068f0:	6833      	ldreq	r3, [r6, #0]
 80068f2:	1aed      	subeq	r5, r5, r3
 80068f4:	68a3      	ldr	r3, [r4, #8]
 80068f6:	bf0c      	ite	eq
 80068f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068fc:	2500      	movne	r5, #0
 80068fe:	4293      	cmp	r3, r2
 8006900:	bfc4      	itt	gt
 8006902:	1a9b      	subgt	r3, r3, r2
 8006904:	18ed      	addgt	r5, r5, r3
 8006906:	2600      	movs	r6, #0
 8006908:	341a      	adds	r4, #26
 800690a:	42b5      	cmp	r5, r6
 800690c:	d11a      	bne.n	8006944 <_printf_common+0xc8>
 800690e:	2000      	movs	r0, #0
 8006910:	e008      	b.n	8006924 <_printf_common+0xa8>
 8006912:	2301      	movs	r3, #1
 8006914:	4652      	mov	r2, sl
 8006916:	4641      	mov	r1, r8
 8006918:	4638      	mov	r0, r7
 800691a:	47c8      	blx	r9
 800691c:	3001      	adds	r0, #1
 800691e:	d103      	bne.n	8006928 <_printf_common+0xac>
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006928:	3501      	adds	r5, #1
 800692a:	e7c6      	b.n	80068ba <_printf_common+0x3e>
 800692c:	18e1      	adds	r1, r4, r3
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	2030      	movs	r0, #48	@ 0x30
 8006932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006936:	4422      	add	r2, r4
 8006938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800693c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006940:	3302      	adds	r3, #2
 8006942:	e7c7      	b.n	80068d4 <_printf_common+0x58>
 8006944:	2301      	movs	r3, #1
 8006946:	4622      	mov	r2, r4
 8006948:	4641      	mov	r1, r8
 800694a:	4638      	mov	r0, r7
 800694c:	47c8      	blx	r9
 800694e:	3001      	adds	r0, #1
 8006950:	d0e6      	beq.n	8006920 <_printf_common+0xa4>
 8006952:	3601      	adds	r6, #1
 8006954:	e7d9      	b.n	800690a <_printf_common+0x8e>
	...

08006958 <_printf_i>:
 8006958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800695c:	7e0f      	ldrb	r7, [r1, #24]
 800695e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006960:	2f78      	cmp	r7, #120	@ 0x78
 8006962:	4691      	mov	r9, r2
 8006964:	4680      	mov	r8, r0
 8006966:	460c      	mov	r4, r1
 8006968:	469a      	mov	sl, r3
 800696a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800696e:	d807      	bhi.n	8006980 <_printf_i+0x28>
 8006970:	2f62      	cmp	r7, #98	@ 0x62
 8006972:	d80a      	bhi.n	800698a <_printf_i+0x32>
 8006974:	2f00      	cmp	r7, #0
 8006976:	f000 80d2 	beq.w	8006b1e <_printf_i+0x1c6>
 800697a:	2f58      	cmp	r7, #88	@ 0x58
 800697c:	f000 80b9 	beq.w	8006af2 <_printf_i+0x19a>
 8006980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006988:	e03a      	b.n	8006a00 <_printf_i+0xa8>
 800698a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800698e:	2b15      	cmp	r3, #21
 8006990:	d8f6      	bhi.n	8006980 <_printf_i+0x28>
 8006992:	a101      	add	r1, pc, #4	@ (adr r1, 8006998 <_printf_i+0x40>)
 8006994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006998:	080069f1 	.word	0x080069f1
 800699c:	08006a05 	.word	0x08006a05
 80069a0:	08006981 	.word	0x08006981
 80069a4:	08006981 	.word	0x08006981
 80069a8:	08006981 	.word	0x08006981
 80069ac:	08006981 	.word	0x08006981
 80069b0:	08006a05 	.word	0x08006a05
 80069b4:	08006981 	.word	0x08006981
 80069b8:	08006981 	.word	0x08006981
 80069bc:	08006981 	.word	0x08006981
 80069c0:	08006981 	.word	0x08006981
 80069c4:	08006b05 	.word	0x08006b05
 80069c8:	08006a2f 	.word	0x08006a2f
 80069cc:	08006abf 	.word	0x08006abf
 80069d0:	08006981 	.word	0x08006981
 80069d4:	08006981 	.word	0x08006981
 80069d8:	08006b27 	.word	0x08006b27
 80069dc:	08006981 	.word	0x08006981
 80069e0:	08006a2f 	.word	0x08006a2f
 80069e4:	08006981 	.word	0x08006981
 80069e8:	08006981 	.word	0x08006981
 80069ec:	08006ac7 	.word	0x08006ac7
 80069f0:	6833      	ldr	r3, [r6, #0]
 80069f2:	1d1a      	adds	r2, r3, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6032      	str	r2, [r6, #0]
 80069f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a00:	2301      	movs	r3, #1
 8006a02:	e09d      	b.n	8006b40 <_printf_i+0x1e8>
 8006a04:	6833      	ldr	r3, [r6, #0]
 8006a06:	6820      	ldr	r0, [r4, #0]
 8006a08:	1d19      	adds	r1, r3, #4
 8006a0a:	6031      	str	r1, [r6, #0]
 8006a0c:	0606      	lsls	r6, r0, #24
 8006a0e:	d501      	bpl.n	8006a14 <_printf_i+0xbc>
 8006a10:	681d      	ldr	r5, [r3, #0]
 8006a12:	e003      	b.n	8006a1c <_printf_i+0xc4>
 8006a14:	0645      	lsls	r5, r0, #25
 8006a16:	d5fb      	bpl.n	8006a10 <_printf_i+0xb8>
 8006a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a1c:	2d00      	cmp	r5, #0
 8006a1e:	da03      	bge.n	8006a28 <_printf_i+0xd0>
 8006a20:	232d      	movs	r3, #45	@ 0x2d
 8006a22:	426d      	negs	r5, r5
 8006a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a28:	4859      	ldr	r0, [pc, #356]	@ (8006b90 <_printf_i+0x238>)
 8006a2a:	230a      	movs	r3, #10
 8006a2c:	e011      	b.n	8006a52 <_printf_i+0xfa>
 8006a2e:	6821      	ldr	r1, [r4, #0]
 8006a30:	6833      	ldr	r3, [r6, #0]
 8006a32:	0608      	lsls	r0, r1, #24
 8006a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a38:	d402      	bmi.n	8006a40 <_printf_i+0xe8>
 8006a3a:	0649      	lsls	r1, r1, #25
 8006a3c:	bf48      	it	mi
 8006a3e:	b2ad      	uxthmi	r5, r5
 8006a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a42:	4853      	ldr	r0, [pc, #332]	@ (8006b90 <_printf_i+0x238>)
 8006a44:	6033      	str	r3, [r6, #0]
 8006a46:	bf14      	ite	ne
 8006a48:	230a      	movne	r3, #10
 8006a4a:	2308      	moveq	r3, #8
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a52:	6866      	ldr	r6, [r4, #4]
 8006a54:	60a6      	str	r6, [r4, #8]
 8006a56:	2e00      	cmp	r6, #0
 8006a58:	bfa2      	ittt	ge
 8006a5a:	6821      	ldrge	r1, [r4, #0]
 8006a5c:	f021 0104 	bicge.w	r1, r1, #4
 8006a60:	6021      	strge	r1, [r4, #0]
 8006a62:	b90d      	cbnz	r5, 8006a68 <_printf_i+0x110>
 8006a64:	2e00      	cmp	r6, #0
 8006a66:	d04b      	beq.n	8006b00 <_printf_i+0x1a8>
 8006a68:	4616      	mov	r6, r2
 8006a6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a6e:	fb03 5711 	mls	r7, r3, r1, r5
 8006a72:	5dc7      	ldrb	r7, [r0, r7]
 8006a74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a78:	462f      	mov	r7, r5
 8006a7a:	42bb      	cmp	r3, r7
 8006a7c:	460d      	mov	r5, r1
 8006a7e:	d9f4      	bls.n	8006a6a <_printf_i+0x112>
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d10b      	bne.n	8006a9c <_printf_i+0x144>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	07df      	lsls	r7, r3, #31
 8006a88:	d508      	bpl.n	8006a9c <_printf_i+0x144>
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	6861      	ldr	r1, [r4, #4]
 8006a8e:	4299      	cmp	r1, r3
 8006a90:	bfde      	ittt	le
 8006a92:	2330      	movle	r3, #48	@ 0x30
 8006a94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a9c:	1b92      	subs	r2, r2, r6
 8006a9e:	6122      	str	r2, [r4, #16]
 8006aa0:	f8cd a000 	str.w	sl, [sp]
 8006aa4:	464b      	mov	r3, r9
 8006aa6:	aa03      	add	r2, sp, #12
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	4640      	mov	r0, r8
 8006aac:	f7ff fee6 	bl	800687c <_printf_common>
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d14a      	bne.n	8006b4a <_printf_i+0x1f2>
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	b004      	add	sp, #16
 8006aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	f043 0320 	orr.w	r3, r3, #32
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	4833      	ldr	r0, [pc, #204]	@ (8006b94 <_printf_i+0x23c>)
 8006ac8:	2778      	movs	r7, #120	@ 0x78
 8006aca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	6831      	ldr	r1, [r6, #0]
 8006ad2:	061f      	lsls	r7, r3, #24
 8006ad4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ad8:	d402      	bmi.n	8006ae0 <_printf_i+0x188>
 8006ada:	065f      	lsls	r7, r3, #25
 8006adc:	bf48      	it	mi
 8006ade:	b2ad      	uxthmi	r5, r5
 8006ae0:	6031      	str	r1, [r6, #0]
 8006ae2:	07d9      	lsls	r1, r3, #31
 8006ae4:	bf44      	itt	mi
 8006ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8006aea:	6023      	strmi	r3, [r4, #0]
 8006aec:	b11d      	cbz	r5, 8006af6 <_printf_i+0x19e>
 8006aee:	2310      	movs	r3, #16
 8006af0:	e7ac      	b.n	8006a4c <_printf_i+0xf4>
 8006af2:	4827      	ldr	r0, [pc, #156]	@ (8006b90 <_printf_i+0x238>)
 8006af4:	e7e9      	b.n	8006aca <_printf_i+0x172>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	f023 0320 	bic.w	r3, r3, #32
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	e7f6      	b.n	8006aee <_printf_i+0x196>
 8006b00:	4616      	mov	r6, r2
 8006b02:	e7bd      	b.n	8006a80 <_printf_i+0x128>
 8006b04:	6833      	ldr	r3, [r6, #0]
 8006b06:	6825      	ldr	r5, [r4, #0]
 8006b08:	6961      	ldr	r1, [r4, #20]
 8006b0a:	1d18      	adds	r0, r3, #4
 8006b0c:	6030      	str	r0, [r6, #0]
 8006b0e:	062e      	lsls	r6, r5, #24
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	d501      	bpl.n	8006b18 <_printf_i+0x1c0>
 8006b14:	6019      	str	r1, [r3, #0]
 8006b16:	e002      	b.n	8006b1e <_printf_i+0x1c6>
 8006b18:	0668      	lsls	r0, r5, #25
 8006b1a:	d5fb      	bpl.n	8006b14 <_printf_i+0x1bc>
 8006b1c:	8019      	strh	r1, [r3, #0]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	4616      	mov	r6, r2
 8006b24:	e7bc      	b.n	8006aa0 <_printf_i+0x148>
 8006b26:	6833      	ldr	r3, [r6, #0]
 8006b28:	1d1a      	adds	r2, r3, #4
 8006b2a:	6032      	str	r2, [r6, #0]
 8006b2c:	681e      	ldr	r6, [r3, #0]
 8006b2e:	6862      	ldr	r2, [r4, #4]
 8006b30:	2100      	movs	r1, #0
 8006b32:	4630      	mov	r0, r6
 8006b34:	f7f9 fb6c 	bl	8000210 <memchr>
 8006b38:	b108      	cbz	r0, 8006b3e <_printf_i+0x1e6>
 8006b3a:	1b80      	subs	r0, r0, r6
 8006b3c:	6060      	str	r0, [r4, #4]
 8006b3e:	6863      	ldr	r3, [r4, #4]
 8006b40:	6123      	str	r3, [r4, #16]
 8006b42:	2300      	movs	r3, #0
 8006b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b48:	e7aa      	b.n	8006aa0 <_printf_i+0x148>
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	4632      	mov	r2, r6
 8006b4e:	4649      	mov	r1, r9
 8006b50:	4640      	mov	r0, r8
 8006b52:	47d0      	blx	sl
 8006b54:	3001      	adds	r0, #1
 8006b56:	d0ad      	beq.n	8006ab4 <_printf_i+0x15c>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	079b      	lsls	r3, r3, #30
 8006b5c:	d413      	bmi.n	8006b86 <_printf_i+0x22e>
 8006b5e:	68e0      	ldr	r0, [r4, #12]
 8006b60:	9b03      	ldr	r3, [sp, #12]
 8006b62:	4298      	cmp	r0, r3
 8006b64:	bfb8      	it	lt
 8006b66:	4618      	movlt	r0, r3
 8006b68:	e7a6      	b.n	8006ab8 <_printf_i+0x160>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	4649      	mov	r1, r9
 8006b70:	4640      	mov	r0, r8
 8006b72:	47d0      	blx	sl
 8006b74:	3001      	adds	r0, #1
 8006b76:	d09d      	beq.n	8006ab4 <_printf_i+0x15c>
 8006b78:	3501      	adds	r5, #1
 8006b7a:	68e3      	ldr	r3, [r4, #12]
 8006b7c:	9903      	ldr	r1, [sp, #12]
 8006b7e:	1a5b      	subs	r3, r3, r1
 8006b80:	42ab      	cmp	r3, r5
 8006b82:	dcf2      	bgt.n	8006b6a <_printf_i+0x212>
 8006b84:	e7eb      	b.n	8006b5e <_printf_i+0x206>
 8006b86:	2500      	movs	r5, #0
 8006b88:	f104 0619 	add.w	r6, r4, #25
 8006b8c:	e7f5      	b.n	8006b7a <_printf_i+0x222>
 8006b8e:	bf00      	nop
 8006b90:	08008d7a 	.word	0x08008d7a
 8006b94:	08008d8b 	.word	0x08008d8b

08006b98 <std>:
 8006b98:	2300      	movs	r3, #0
 8006b9a:	b510      	push	{r4, lr}
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8006ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ba6:	6083      	str	r3, [r0, #8]
 8006ba8:	8181      	strh	r1, [r0, #12]
 8006baa:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bac:	81c2      	strh	r2, [r0, #14]
 8006bae:	6183      	str	r3, [r0, #24]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	2208      	movs	r2, #8
 8006bb4:	305c      	adds	r0, #92	@ 0x5c
 8006bb6:	f000 f906 	bl	8006dc6 <memset>
 8006bba:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf0 <std+0x58>)
 8006bbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <std+0x5c>)
 8006bc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf8 <std+0x60>)
 8006bc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006bfc <std+0x64>)
 8006bc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bca:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <std+0x68>)
 8006bcc:	6224      	str	r4, [r4, #32]
 8006bce:	429c      	cmp	r4, r3
 8006bd0:	d006      	beq.n	8006be0 <std+0x48>
 8006bd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bd6:	4294      	cmp	r4, r2
 8006bd8:	d002      	beq.n	8006be0 <std+0x48>
 8006bda:	33d0      	adds	r3, #208	@ 0xd0
 8006bdc:	429c      	cmp	r4, r3
 8006bde:	d105      	bne.n	8006bec <std+0x54>
 8006be0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be8:	f000 b96a 	b.w	8006ec0 <__retarget_lock_init_recursive>
 8006bec:	bd10      	pop	{r4, pc}
 8006bee:	bf00      	nop
 8006bf0:	08006d41 	.word	0x08006d41
 8006bf4:	08006d63 	.word	0x08006d63
 8006bf8:	08006d9b 	.word	0x08006d9b
 8006bfc:	08006dbf 	.word	0x08006dbf
 8006c00:	2000039c 	.word	0x2000039c

08006c04 <stdio_exit_handler>:
 8006c04:	4a02      	ldr	r2, [pc, #8]	@ (8006c10 <stdio_exit_handler+0xc>)
 8006c06:	4903      	ldr	r1, [pc, #12]	@ (8006c14 <stdio_exit_handler+0x10>)
 8006c08:	4803      	ldr	r0, [pc, #12]	@ (8006c18 <stdio_exit_handler+0x14>)
 8006c0a:	f000 b869 	b.w	8006ce0 <_fwalk_sglue>
 8006c0e:	bf00      	nop
 8006c10:	2000001c 	.word	0x2000001c
 8006c14:	080087f1 	.word	0x080087f1
 8006c18:	2000002c 	.word	0x2000002c

08006c1c <cleanup_stdio>:
 8006c1c:	6841      	ldr	r1, [r0, #4]
 8006c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c50 <cleanup_stdio+0x34>)
 8006c20:	4299      	cmp	r1, r3
 8006c22:	b510      	push	{r4, lr}
 8006c24:	4604      	mov	r4, r0
 8006c26:	d001      	beq.n	8006c2c <cleanup_stdio+0x10>
 8006c28:	f001 fde2 	bl	80087f0 <_fflush_r>
 8006c2c:	68a1      	ldr	r1, [r4, #8]
 8006c2e:	4b09      	ldr	r3, [pc, #36]	@ (8006c54 <cleanup_stdio+0x38>)
 8006c30:	4299      	cmp	r1, r3
 8006c32:	d002      	beq.n	8006c3a <cleanup_stdio+0x1e>
 8006c34:	4620      	mov	r0, r4
 8006c36:	f001 fddb 	bl	80087f0 <_fflush_r>
 8006c3a:	68e1      	ldr	r1, [r4, #12]
 8006c3c:	4b06      	ldr	r3, [pc, #24]	@ (8006c58 <cleanup_stdio+0x3c>)
 8006c3e:	4299      	cmp	r1, r3
 8006c40:	d004      	beq.n	8006c4c <cleanup_stdio+0x30>
 8006c42:	4620      	mov	r0, r4
 8006c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c48:	f001 bdd2 	b.w	80087f0 <_fflush_r>
 8006c4c:	bd10      	pop	{r4, pc}
 8006c4e:	bf00      	nop
 8006c50:	2000039c 	.word	0x2000039c
 8006c54:	20000404 	.word	0x20000404
 8006c58:	2000046c 	.word	0x2000046c

08006c5c <global_stdio_init.part.0>:
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c8c <global_stdio_init.part.0+0x30>)
 8006c60:	4c0b      	ldr	r4, [pc, #44]	@ (8006c90 <global_stdio_init.part.0+0x34>)
 8006c62:	4a0c      	ldr	r2, [pc, #48]	@ (8006c94 <global_stdio_init.part.0+0x38>)
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	4620      	mov	r0, r4
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2104      	movs	r1, #4
 8006c6c:	f7ff ff94 	bl	8006b98 <std>
 8006c70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c74:	2201      	movs	r2, #1
 8006c76:	2109      	movs	r1, #9
 8006c78:	f7ff ff8e 	bl	8006b98 <std>
 8006c7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c80:	2202      	movs	r2, #2
 8006c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c86:	2112      	movs	r1, #18
 8006c88:	f7ff bf86 	b.w	8006b98 <std>
 8006c8c:	200004d4 	.word	0x200004d4
 8006c90:	2000039c 	.word	0x2000039c
 8006c94:	08006c05 	.word	0x08006c05

08006c98 <__sfp_lock_acquire>:
 8006c98:	4801      	ldr	r0, [pc, #4]	@ (8006ca0 <__sfp_lock_acquire+0x8>)
 8006c9a:	f000 b912 	b.w	8006ec2 <__retarget_lock_acquire_recursive>
 8006c9e:	bf00      	nop
 8006ca0:	200004dd 	.word	0x200004dd

08006ca4 <__sfp_lock_release>:
 8006ca4:	4801      	ldr	r0, [pc, #4]	@ (8006cac <__sfp_lock_release+0x8>)
 8006ca6:	f000 b90d 	b.w	8006ec4 <__retarget_lock_release_recursive>
 8006caa:	bf00      	nop
 8006cac:	200004dd 	.word	0x200004dd

08006cb0 <__sinit>:
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	f7ff fff0 	bl	8006c98 <__sfp_lock_acquire>
 8006cb8:	6a23      	ldr	r3, [r4, #32]
 8006cba:	b11b      	cbz	r3, 8006cc4 <__sinit+0x14>
 8006cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc0:	f7ff bff0 	b.w	8006ca4 <__sfp_lock_release>
 8006cc4:	4b04      	ldr	r3, [pc, #16]	@ (8006cd8 <__sinit+0x28>)
 8006cc6:	6223      	str	r3, [r4, #32]
 8006cc8:	4b04      	ldr	r3, [pc, #16]	@ (8006cdc <__sinit+0x2c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f5      	bne.n	8006cbc <__sinit+0xc>
 8006cd0:	f7ff ffc4 	bl	8006c5c <global_stdio_init.part.0>
 8006cd4:	e7f2      	b.n	8006cbc <__sinit+0xc>
 8006cd6:	bf00      	nop
 8006cd8:	08006c1d 	.word	0x08006c1d
 8006cdc:	200004d4 	.word	0x200004d4

08006ce0 <_fwalk_sglue>:
 8006ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce4:	4607      	mov	r7, r0
 8006ce6:	4688      	mov	r8, r1
 8006ce8:	4614      	mov	r4, r2
 8006cea:	2600      	movs	r6, #0
 8006cec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cf0:	f1b9 0901 	subs.w	r9, r9, #1
 8006cf4:	d505      	bpl.n	8006d02 <_fwalk_sglue+0x22>
 8006cf6:	6824      	ldr	r4, [r4, #0]
 8006cf8:	2c00      	cmp	r4, #0
 8006cfa:	d1f7      	bne.n	8006cec <_fwalk_sglue+0xc>
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d02:	89ab      	ldrh	r3, [r5, #12]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d907      	bls.n	8006d18 <_fwalk_sglue+0x38>
 8006d08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	d003      	beq.n	8006d18 <_fwalk_sglue+0x38>
 8006d10:	4629      	mov	r1, r5
 8006d12:	4638      	mov	r0, r7
 8006d14:	47c0      	blx	r8
 8006d16:	4306      	orrs	r6, r0
 8006d18:	3568      	adds	r5, #104	@ 0x68
 8006d1a:	e7e9      	b.n	8006cf0 <_fwalk_sglue+0x10>

08006d1c <iprintf>:
 8006d1c:	b40f      	push	{r0, r1, r2, r3}
 8006d1e:	b507      	push	{r0, r1, r2, lr}
 8006d20:	4906      	ldr	r1, [pc, #24]	@ (8006d3c <iprintf+0x20>)
 8006d22:	ab04      	add	r3, sp, #16
 8006d24:	6808      	ldr	r0, [r1, #0]
 8006d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d2a:	6881      	ldr	r1, [r0, #8]
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	f001 fbc3 	bl	80084b8 <_vfiprintf_r>
 8006d32:	b003      	add	sp, #12
 8006d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d38:	b004      	add	sp, #16
 8006d3a:	4770      	bx	lr
 8006d3c:	20000028 	.word	0x20000028

08006d40 <__sread>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	460c      	mov	r4, r1
 8006d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d48:	f000 f86c 	bl	8006e24 <_read_r>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	bfab      	itete	ge
 8006d50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d52:	89a3      	ldrhlt	r3, [r4, #12]
 8006d54:	181b      	addge	r3, r3, r0
 8006d56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d5a:	bfac      	ite	ge
 8006d5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d5e:	81a3      	strhlt	r3, [r4, #12]
 8006d60:	bd10      	pop	{r4, pc}

08006d62 <__swrite>:
 8006d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d66:	461f      	mov	r7, r3
 8006d68:	898b      	ldrh	r3, [r1, #12]
 8006d6a:	05db      	lsls	r3, r3, #23
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	4616      	mov	r6, r2
 8006d72:	d505      	bpl.n	8006d80 <__swrite+0x1e>
 8006d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d78:	2302      	movs	r3, #2
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f000 f840 	bl	8006e00 <_lseek_r>
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d8a:	81a3      	strh	r3, [r4, #12]
 8006d8c:	4632      	mov	r2, r6
 8006d8e:	463b      	mov	r3, r7
 8006d90:	4628      	mov	r0, r5
 8006d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d96:	f000 b857 	b.w	8006e48 <_write_r>

08006d9a <__sseek>:
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da2:	f000 f82d 	bl	8006e00 <_lseek_r>
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	bf15      	itete	ne
 8006dac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006db2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006db6:	81a3      	strheq	r3, [r4, #12]
 8006db8:	bf18      	it	ne
 8006dba:	81a3      	strhne	r3, [r4, #12]
 8006dbc:	bd10      	pop	{r4, pc}

08006dbe <__sclose>:
 8006dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc2:	f000 b80d 	b.w	8006de0 <_close_r>

08006dc6 <memset>:
 8006dc6:	4402      	add	r2, r0
 8006dc8:	4603      	mov	r3, r0
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d100      	bne.n	8006dd0 <memset+0xa>
 8006dce:	4770      	bx	lr
 8006dd0:	f803 1b01 	strb.w	r1, [r3], #1
 8006dd4:	e7f9      	b.n	8006dca <memset+0x4>
	...

08006dd8 <_localeconv_r>:
 8006dd8:	4800      	ldr	r0, [pc, #0]	@ (8006ddc <_localeconv_r+0x4>)
 8006dda:	4770      	bx	lr
 8006ddc:	20000168 	.word	0x20000168

08006de0 <_close_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4d06      	ldr	r5, [pc, #24]	@ (8006dfc <_close_r+0x1c>)
 8006de4:	2300      	movs	r3, #0
 8006de6:	4604      	mov	r4, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	602b      	str	r3, [r5, #0]
 8006dec:	f7fb f972 	bl	80020d4 <_close>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_close_r+0x1a>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_close_r+0x1a>
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	200004d8 	.word	0x200004d8

08006e00 <_lseek_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4d07      	ldr	r5, [pc, #28]	@ (8006e20 <_lseek_r+0x20>)
 8006e04:	4604      	mov	r4, r0
 8006e06:	4608      	mov	r0, r1
 8006e08:	4611      	mov	r1, r2
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	602a      	str	r2, [r5, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f7fb f987 	bl	8002122 <_lseek>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d102      	bne.n	8006e1e <_lseek_r+0x1e>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b103      	cbz	r3, 8006e1e <_lseek_r+0x1e>
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	200004d8 	.word	0x200004d8

08006e24 <_read_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4d07      	ldr	r5, [pc, #28]	@ (8006e44 <_read_r+0x20>)
 8006e28:	4604      	mov	r4, r0
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	602a      	str	r2, [r5, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	f7fb f915 	bl	8002062 <_read>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_read_r+0x1e>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_read_r+0x1e>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	200004d8 	.word	0x200004d8

08006e48 <_write_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4d07      	ldr	r5, [pc, #28]	@ (8006e68 <_write_r+0x20>)
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	4608      	mov	r0, r1
 8006e50:	4611      	mov	r1, r2
 8006e52:	2200      	movs	r2, #0
 8006e54:	602a      	str	r2, [r5, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f7fb f920 	bl	800209c <_write>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_write_r+0x1e>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_write_r+0x1e>
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	200004d8 	.word	0x200004d8

08006e6c <__errno>:
 8006e6c:	4b01      	ldr	r3, [pc, #4]	@ (8006e74 <__errno+0x8>)
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	20000028 	.word	0x20000028

08006e78 <__libc_init_array>:
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	4d0d      	ldr	r5, [pc, #52]	@ (8006eb0 <__libc_init_array+0x38>)
 8006e7c:	4c0d      	ldr	r4, [pc, #52]	@ (8006eb4 <__libc_init_array+0x3c>)
 8006e7e:	1b64      	subs	r4, r4, r5
 8006e80:	10a4      	asrs	r4, r4, #2
 8006e82:	2600      	movs	r6, #0
 8006e84:	42a6      	cmp	r6, r4
 8006e86:	d109      	bne.n	8006e9c <__libc_init_array+0x24>
 8006e88:	4d0b      	ldr	r5, [pc, #44]	@ (8006eb8 <__libc_init_array+0x40>)
 8006e8a:	4c0c      	ldr	r4, [pc, #48]	@ (8006ebc <__libc_init_array+0x44>)
 8006e8c:	f001 ff3c 	bl	8008d08 <_init>
 8006e90:	1b64      	subs	r4, r4, r5
 8006e92:	10a4      	asrs	r4, r4, #2
 8006e94:	2600      	movs	r6, #0
 8006e96:	42a6      	cmp	r6, r4
 8006e98:	d105      	bne.n	8006ea6 <__libc_init_array+0x2e>
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
 8006e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea0:	4798      	blx	r3
 8006ea2:	3601      	adds	r6, #1
 8006ea4:	e7ee      	b.n	8006e84 <__libc_init_array+0xc>
 8006ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eaa:	4798      	blx	r3
 8006eac:	3601      	adds	r6, #1
 8006eae:	e7f2      	b.n	8006e96 <__libc_init_array+0x1e>
 8006eb0:	080090e0 	.word	0x080090e0
 8006eb4:	080090e0 	.word	0x080090e0
 8006eb8:	080090e0 	.word	0x080090e0
 8006ebc:	080090e4 	.word	0x080090e4

08006ec0 <__retarget_lock_init_recursive>:
 8006ec0:	4770      	bx	lr

08006ec2 <__retarget_lock_acquire_recursive>:
 8006ec2:	4770      	bx	lr

08006ec4 <__retarget_lock_release_recursive>:
 8006ec4:	4770      	bx	lr

08006ec6 <quorem>:
 8006ec6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eca:	6903      	ldr	r3, [r0, #16]
 8006ecc:	690c      	ldr	r4, [r1, #16]
 8006ece:	42a3      	cmp	r3, r4
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	db7e      	blt.n	8006fd2 <quorem+0x10c>
 8006ed4:	3c01      	subs	r4, #1
 8006ed6:	f101 0814 	add.w	r8, r1, #20
 8006eda:	00a3      	lsls	r3, r4, #2
 8006edc:	f100 0514 	add.w	r5, r0, #20
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ee6:	9301      	str	r3, [sp, #4]
 8006ee8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006eec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ef8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006efc:	d32e      	bcc.n	8006f5c <quorem+0x96>
 8006efe:	f04f 0a00 	mov.w	sl, #0
 8006f02:	46c4      	mov	ip, r8
 8006f04:	46ae      	mov	lr, r5
 8006f06:	46d3      	mov	fp, sl
 8006f08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f0c:	b298      	uxth	r0, r3
 8006f0e:	fb06 a000 	mla	r0, r6, r0, sl
 8006f12:	0c02      	lsrs	r2, r0, #16
 8006f14:	0c1b      	lsrs	r3, r3, #16
 8006f16:	fb06 2303 	mla	r3, r6, r3, r2
 8006f1a:	f8de 2000 	ldr.w	r2, [lr]
 8006f1e:	b280      	uxth	r0, r0
 8006f20:	b292      	uxth	r2, r2
 8006f22:	1a12      	subs	r2, r2, r0
 8006f24:	445a      	add	r2, fp
 8006f26:	f8de 0000 	ldr.w	r0, [lr]
 8006f2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f34:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f38:	b292      	uxth	r2, r2
 8006f3a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f3e:	45e1      	cmp	r9, ip
 8006f40:	f84e 2b04 	str.w	r2, [lr], #4
 8006f44:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f48:	d2de      	bcs.n	8006f08 <quorem+0x42>
 8006f4a:	9b00      	ldr	r3, [sp, #0]
 8006f4c:	58eb      	ldr	r3, [r5, r3]
 8006f4e:	b92b      	cbnz	r3, 8006f5c <quorem+0x96>
 8006f50:	9b01      	ldr	r3, [sp, #4]
 8006f52:	3b04      	subs	r3, #4
 8006f54:	429d      	cmp	r5, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	d32f      	bcc.n	8006fba <quorem+0xf4>
 8006f5a:	613c      	str	r4, [r7, #16]
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	f001 f979 	bl	8008254 <__mcmp>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	db25      	blt.n	8006fb2 <quorem+0xec>
 8006f66:	4629      	mov	r1, r5
 8006f68:	2000      	movs	r0, #0
 8006f6a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f6e:	f8d1 c000 	ldr.w	ip, [r1]
 8006f72:	fa1f fe82 	uxth.w	lr, r2
 8006f76:	fa1f f38c 	uxth.w	r3, ip
 8006f7a:	eba3 030e 	sub.w	r3, r3, lr
 8006f7e:	4403      	add	r3, r0
 8006f80:	0c12      	lsrs	r2, r2, #16
 8006f82:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f86:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f90:	45c1      	cmp	r9, r8
 8006f92:	f841 3b04 	str.w	r3, [r1], #4
 8006f96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f9a:	d2e6      	bcs.n	8006f6a <quorem+0xa4>
 8006f9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fa4:	b922      	cbnz	r2, 8006fb0 <quorem+0xea>
 8006fa6:	3b04      	subs	r3, #4
 8006fa8:	429d      	cmp	r5, r3
 8006faa:	461a      	mov	r2, r3
 8006fac:	d30b      	bcc.n	8006fc6 <quorem+0x100>
 8006fae:	613c      	str	r4, [r7, #16]
 8006fb0:	3601      	adds	r6, #1
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	b003      	add	sp, #12
 8006fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fba:	6812      	ldr	r2, [r2, #0]
 8006fbc:	3b04      	subs	r3, #4
 8006fbe:	2a00      	cmp	r2, #0
 8006fc0:	d1cb      	bne.n	8006f5a <quorem+0x94>
 8006fc2:	3c01      	subs	r4, #1
 8006fc4:	e7c6      	b.n	8006f54 <quorem+0x8e>
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	3b04      	subs	r3, #4
 8006fca:	2a00      	cmp	r2, #0
 8006fcc:	d1ef      	bne.n	8006fae <quorem+0xe8>
 8006fce:	3c01      	subs	r4, #1
 8006fd0:	e7ea      	b.n	8006fa8 <quorem+0xe2>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e7ee      	b.n	8006fb4 <quorem+0xee>
	...

08006fd8 <_dtoa_r>:
 8006fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	69c7      	ldr	r7, [r0, #28]
 8006fde:	b099      	sub	sp, #100	@ 0x64
 8006fe0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006fe4:	ec55 4b10 	vmov	r4, r5, d0
 8006fe8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006fea:	9109      	str	r1, [sp, #36]	@ 0x24
 8006fec:	4683      	mov	fp, r0
 8006fee:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ff0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ff2:	b97f      	cbnz	r7, 8007014 <_dtoa_r+0x3c>
 8006ff4:	2010      	movs	r0, #16
 8006ff6:	f000 fdfd 	bl	8007bf4 <malloc>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007000:	b920      	cbnz	r0, 800700c <_dtoa_r+0x34>
 8007002:	4ba7      	ldr	r3, [pc, #668]	@ (80072a0 <_dtoa_r+0x2c8>)
 8007004:	21ef      	movs	r1, #239	@ 0xef
 8007006:	48a7      	ldr	r0, [pc, #668]	@ (80072a4 <_dtoa_r+0x2cc>)
 8007008:	f001 fccc 	bl	80089a4 <__assert_func>
 800700c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007010:	6007      	str	r7, [r0, #0]
 8007012:	60c7      	str	r7, [r0, #12]
 8007014:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007018:	6819      	ldr	r1, [r3, #0]
 800701a:	b159      	cbz	r1, 8007034 <_dtoa_r+0x5c>
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	604a      	str	r2, [r1, #4]
 8007020:	2301      	movs	r3, #1
 8007022:	4093      	lsls	r3, r2
 8007024:	608b      	str	r3, [r1, #8]
 8007026:	4658      	mov	r0, fp
 8007028:	f000 feda 	bl	8007de0 <_Bfree>
 800702c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	1e2b      	subs	r3, r5, #0
 8007036:	bfb9      	ittee	lt
 8007038:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800703c:	9303      	strlt	r3, [sp, #12]
 800703e:	2300      	movge	r3, #0
 8007040:	6033      	strge	r3, [r6, #0]
 8007042:	9f03      	ldr	r7, [sp, #12]
 8007044:	4b98      	ldr	r3, [pc, #608]	@ (80072a8 <_dtoa_r+0x2d0>)
 8007046:	bfbc      	itt	lt
 8007048:	2201      	movlt	r2, #1
 800704a:	6032      	strlt	r2, [r6, #0]
 800704c:	43bb      	bics	r3, r7
 800704e:	d112      	bne.n	8007076 <_dtoa_r+0x9e>
 8007050:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007052:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800705c:	4323      	orrs	r3, r4
 800705e:	f000 854d 	beq.w	8007afc <_dtoa_r+0xb24>
 8007062:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007064:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80072bc <_dtoa_r+0x2e4>
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 854f 	beq.w	8007b0c <_dtoa_r+0xb34>
 800706e:	f10a 0303 	add.w	r3, sl, #3
 8007072:	f000 bd49 	b.w	8007b08 <_dtoa_r+0xb30>
 8007076:	ed9d 7b02 	vldr	d7, [sp, #8]
 800707a:	2200      	movs	r2, #0
 800707c:	ec51 0b17 	vmov	r0, r1, d7
 8007080:	2300      	movs	r3, #0
 8007082:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007086:	f7f9 fd3f 	bl	8000b08 <__aeabi_dcmpeq>
 800708a:	4680      	mov	r8, r0
 800708c:	b158      	cbz	r0, 80070a6 <_dtoa_r+0xce>
 800708e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007090:	2301      	movs	r3, #1
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007096:	b113      	cbz	r3, 800709e <_dtoa_r+0xc6>
 8007098:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800709a:	4b84      	ldr	r3, [pc, #528]	@ (80072ac <_dtoa_r+0x2d4>)
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80072c0 <_dtoa_r+0x2e8>
 80070a2:	f000 bd33 	b.w	8007b0c <_dtoa_r+0xb34>
 80070a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80070aa:	aa16      	add	r2, sp, #88	@ 0x58
 80070ac:	a917      	add	r1, sp, #92	@ 0x5c
 80070ae:	4658      	mov	r0, fp
 80070b0:	f001 f980 	bl	80083b4 <__d2b>
 80070b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80070b8:	4681      	mov	r9, r0
 80070ba:	2e00      	cmp	r6, #0
 80070bc:	d077      	beq.n	80071ae <_dtoa_r+0x1d6>
 80070be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80070c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80070d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80070d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80070d8:	4619      	mov	r1, r3
 80070da:	2200      	movs	r2, #0
 80070dc:	4b74      	ldr	r3, [pc, #464]	@ (80072b0 <_dtoa_r+0x2d8>)
 80070de:	f7f9 f8f3 	bl	80002c8 <__aeabi_dsub>
 80070e2:	a369      	add	r3, pc, #420	@ (adr r3, 8007288 <_dtoa_r+0x2b0>)
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f7f9 faa6 	bl	8000638 <__aeabi_dmul>
 80070ec:	a368      	add	r3, pc, #416	@ (adr r3, 8007290 <_dtoa_r+0x2b8>)
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f7f9 f8eb 	bl	80002cc <__adddf3>
 80070f6:	4604      	mov	r4, r0
 80070f8:	4630      	mov	r0, r6
 80070fa:	460d      	mov	r5, r1
 80070fc:	f7f9 fa32 	bl	8000564 <__aeabi_i2d>
 8007100:	a365      	add	r3, pc, #404	@ (adr r3, 8007298 <_dtoa_r+0x2c0>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	f7f9 fa97 	bl	8000638 <__aeabi_dmul>
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	4620      	mov	r0, r4
 8007110:	4629      	mov	r1, r5
 8007112:	f7f9 f8db 	bl	80002cc <__adddf3>
 8007116:	4604      	mov	r4, r0
 8007118:	460d      	mov	r5, r1
 800711a:	f7f9 fd3d 	bl	8000b98 <__aeabi_d2iz>
 800711e:	2200      	movs	r2, #0
 8007120:	4607      	mov	r7, r0
 8007122:	2300      	movs	r3, #0
 8007124:	4620      	mov	r0, r4
 8007126:	4629      	mov	r1, r5
 8007128:	f7f9 fcf8 	bl	8000b1c <__aeabi_dcmplt>
 800712c:	b140      	cbz	r0, 8007140 <_dtoa_r+0x168>
 800712e:	4638      	mov	r0, r7
 8007130:	f7f9 fa18 	bl	8000564 <__aeabi_i2d>
 8007134:	4622      	mov	r2, r4
 8007136:	462b      	mov	r3, r5
 8007138:	f7f9 fce6 	bl	8000b08 <__aeabi_dcmpeq>
 800713c:	b900      	cbnz	r0, 8007140 <_dtoa_r+0x168>
 800713e:	3f01      	subs	r7, #1
 8007140:	2f16      	cmp	r7, #22
 8007142:	d851      	bhi.n	80071e8 <_dtoa_r+0x210>
 8007144:	4b5b      	ldr	r3, [pc, #364]	@ (80072b4 <_dtoa_r+0x2dc>)
 8007146:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007152:	f7f9 fce3 	bl	8000b1c <__aeabi_dcmplt>
 8007156:	2800      	cmp	r0, #0
 8007158:	d048      	beq.n	80071ec <_dtoa_r+0x214>
 800715a:	3f01      	subs	r7, #1
 800715c:	2300      	movs	r3, #0
 800715e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007160:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007162:	1b9b      	subs	r3, r3, r6
 8007164:	1e5a      	subs	r2, r3, #1
 8007166:	bf44      	itt	mi
 8007168:	f1c3 0801 	rsbmi	r8, r3, #1
 800716c:	2300      	movmi	r3, #0
 800716e:	9208      	str	r2, [sp, #32]
 8007170:	bf54      	ite	pl
 8007172:	f04f 0800 	movpl.w	r8, #0
 8007176:	9308      	strmi	r3, [sp, #32]
 8007178:	2f00      	cmp	r7, #0
 800717a:	db39      	blt.n	80071f0 <_dtoa_r+0x218>
 800717c:	9b08      	ldr	r3, [sp, #32]
 800717e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007180:	443b      	add	r3, r7
 8007182:	9308      	str	r3, [sp, #32]
 8007184:	2300      	movs	r3, #0
 8007186:	930a      	str	r3, [sp, #40]	@ 0x28
 8007188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800718a:	2b09      	cmp	r3, #9
 800718c:	d864      	bhi.n	8007258 <_dtoa_r+0x280>
 800718e:	2b05      	cmp	r3, #5
 8007190:	bfc4      	itt	gt
 8007192:	3b04      	subgt	r3, #4
 8007194:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007198:	f1a3 0302 	sub.w	r3, r3, #2
 800719c:	bfcc      	ite	gt
 800719e:	2400      	movgt	r4, #0
 80071a0:	2401      	movle	r4, #1
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d863      	bhi.n	800726e <_dtoa_r+0x296>
 80071a6:	e8df f003 	tbb	[pc, r3]
 80071aa:	372a      	.short	0x372a
 80071ac:	5535      	.short	0x5535
 80071ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80071b2:	441e      	add	r6, r3
 80071b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	bfc1      	itttt	gt
 80071bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80071c0:	409f      	lslgt	r7, r3
 80071c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80071c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80071ca:	bfd6      	itet	le
 80071cc:	f1c3 0320 	rsble	r3, r3, #32
 80071d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80071d4:	fa04 f003 	lslle.w	r0, r4, r3
 80071d8:	f7f9 f9b4 	bl	8000544 <__aeabi_ui2d>
 80071dc:	2201      	movs	r2, #1
 80071de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80071e2:	3e01      	subs	r6, #1
 80071e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80071e6:	e777      	b.n	80070d8 <_dtoa_r+0x100>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e7b8      	b.n	800715e <_dtoa_r+0x186>
 80071ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80071ee:	e7b7      	b.n	8007160 <_dtoa_r+0x188>
 80071f0:	427b      	negs	r3, r7
 80071f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80071f4:	2300      	movs	r3, #0
 80071f6:	eba8 0807 	sub.w	r8, r8, r7
 80071fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071fc:	e7c4      	b.n	8007188 <_dtoa_r+0x1b0>
 80071fe:	2300      	movs	r3, #0
 8007200:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	dc35      	bgt.n	8007274 <_dtoa_r+0x29c>
 8007208:	2301      	movs	r3, #1
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	9307      	str	r3, [sp, #28]
 800720e:	461a      	mov	r2, r3
 8007210:	920e      	str	r2, [sp, #56]	@ 0x38
 8007212:	e00b      	b.n	800722c <_dtoa_r+0x254>
 8007214:	2301      	movs	r3, #1
 8007216:	e7f3      	b.n	8007200 <_dtoa_r+0x228>
 8007218:	2300      	movs	r3, #0
 800721a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800721c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800721e:	18fb      	adds	r3, r7, r3
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	3301      	adds	r3, #1
 8007224:	2b01      	cmp	r3, #1
 8007226:	9307      	str	r3, [sp, #28]
 8007228:	bfb8      	it	lt
 800722a:	2301      	movlt	r3, #1
 800722c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007230:	2100      	movs	r1, #0
 8007232:	2204      	movs	r2, #4
 8007234:	f102 0514 	add.w	r5, r2, #20
 8007238:	429d      	cmp	r5, r3
 800723a:	d91f      	bls.n	800727c <_dtoa_r+0x2a4>
 800723c:	6041      	str	r1, [r0, #4]
 800723e:	4658      	mov	r0, fp
 8007240:	f000 fd8e 	bl	8007d60 <_Balloc>
 8007244:	4682      	mov	sl, r0
 8007246:	2800      	cmp	r0, #0
 8007248:	d13c      	bne.n	80072c4 <_dtoa_r+0x2ec>
 800724a:	4b1b      	ldr	r3, [pc, #108]	@ (80072b8 <_dtoa_r+0x2e0>)
 800724c:	4602      	mov	r2, r0
 800724e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007252:	e6d8      	b.n	8007006 <_dtoa_r+0x2e>
 8007254:	2301      	movs	r3, #1
 8007256:	e7e0      	b.n	800721a <_dtoa_r+0x242>
 8007258:	2401      	movs	r4, #1
 800725a:	2300      	movs	r3, #0
 800725c:	9309      	str	r3, [sp, #36]	@ 0x24
 800725e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007260:	f04f 33ff 	mov.w	r3, #4294967295
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	9307      	str	r3, [sp, #28]
 8007268:	2200      	movs	r2, #0
 800726a:	2312      	movs	r3, #18
 800726c:	e7d0      	b.n	8007210 <_dtoa_r+0x238>
 800726e:	2301      	movs	r3, #1
 8007270:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007272:	e7f5      	b.n	8007260 <_dtoa_r+0x288>
 8007274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	9307      	str	r3, [sp, #28]
 800727a:	e7d7      	b.n	800722c <_dtoa_r+0x254>
 800727c:	3101      	adds	r1, #1
 800727e:	0052      	lsls	r2, r2, #1
 8007280:	e7d8      	b.n	8007234 <_dtoa_r+0x25c>
 8007282:	bf00      	nop
 8007284:	f3af 8000 	nop.w
 8007288:	636f4361 	.word	0x636f4361
 800728c:	3fd287a7 	.word	0x3fd287a7
 8007290:	8b60c8b3 	.word	0x8b60c8b3
 8007294:	3fc68a28 	.word	0x3fc68a28
 8007298:	509f79fb 	.word	0x509f79fb
 800729c:	3fd34413 	.word	0x3fd34413
 80072a0:	08008da9 	.word	0x08008da9
 80072a4:	08008dc0 	.word	0x08008dc0
 80072a8:	7ff00000 	.word	0x7ff00000
 80072ac:	08008d79 	.word	0x08008d79
 80072b0:	3ff80000 	.word	0x3ff80000
 80072b4:	08008eb8 	.word	0x08008eb8
 80072b8:	08008e18 	.word	0x08008e18
 80072bc:	08008da5 	.word	0x08008da5
 80072c0:	08008d78 	.word	0x08008d78
 80072c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072c8:	6018      	str	r0, [r3, #0]
 80072ca:	9b07      	ldr	r3, [sp, #28]
 80072cc:	2b0e      	cmp	r3, #14
 80072ce:	f200 80a4 	bhi.w	800741a <_dtoa_r+0x442>
 80072d2:	2c00      	cmp	r4, #0
 80072d4:	f000 80a1 	beq.w	800741a <_dtoa_r+0x442>
 80072d8:	2f00      	cmp	r7, #0
 80072da:	dd33      	ble.n	8007344 <_dtoa_r+0x36c>
 80072dc:	4bad      	ldr	r3, [pc, #692]	@ (8007594 <_dtoa_r+0x5bc>)
 80072de:	f007 020f 	and.w	r2, r7, #15
 80072e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072e6:	ed93 7b00 	vldr	d7, [r3]
 80072ea:	05f8      	lsls	r0, r7, #23
 80072ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80072f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80072f4:	d516      	bpl.n	8007324 <_dtoa_r+0x34c>
 80072f6:	4ba8      	ldr	r3, [pc, #672]	@ (8007598 <_dtoa_r+0x5c0>)
 80072f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007300:	f7f9 fac4 	bl	800088c <__aeabi_ddiv>
 8007304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007308:	f004 040f 	and.w	r4, r4, #15
 800730c:	2603      	movs	r6, #3
 800730e:	4da2      	ldr	r5, [pc, #648]	@ (8007598 <_dtoa_r+0x5c0>)
 8007310:	b954      	cbnz	r4, 8007328 <_dtoa_r+0x350>
 8007312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800731a:	f7f9 fab7 	bl	800088c <__aeabi_ddiv>
 800731e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007322:	e028      	b.n	8007376 <_dtoa_r+0x39e>
 8007324:	2602      	movs	r6, #2
 8007326:	e7f2      	b.n	800730e <_dtoa_r+0x336>
 8007328:	07e1      	lsls	r1, r4, #31
 800732a:	d508      	bpl.n	800733e <_dtoa_r+0x366>
 800732c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007330:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007334:	f7f9 f980 	bl	8000638 <__aeabi_dmul>
 8007338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800733c:	3601      	adds	r6, #1
 800733e:	1064      	asrs	r4, r4, #1
 8007340:	3508      	adds	r5, #8
 8007342:	e7e5      	b.n	8007310 <_dtoa_r+0x338>
 8007344:	f000 80d2 	beq.w	80074ec <_dtoa_r+0x514>
 8007348:	427c      	negs	r4, r7
 800734a:	4b92      	ldr	r3, [pc, #584]	@ (8007594 <_dtoa_r+0x5bc>)
 800734c:	4d92      	ldr	r5, [pc, #584]	@ (8007598 <_dtoa_r+0x5c0>)
 800734e:	f004 020f 	and.w	r2, r4, #15
 8007352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800735e:	f7f9 f96b 	bl	8000638 <__aeabi_dmul>
 8007362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007366:	1124      	asrs	r4, r4, #4
 8007368:	2300      	movs	r3, #0
 800736a:	2602      	movs	r6, #2
 800736c:	2c00      	cmp	r4, #0
 800736e:	f040 80b2 	bne.w	80074d6 <_dtoa_r+0x4fe>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1d3      	bne.n	800731e <_dtoa_r+0x346>
 8007376:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007378:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 80b7 	beq.w	80074f0 <_dtoa_r+0x518>
 8007382:	4b86      	ldr	r3, [pc, #536]	@ (800759c <_dtoa_r+0x5c4>)
 8007384:	2200      	movs	r2, #0
 8007386:	4620      	mov	r0, r4
 8007388:	4629      	mov	r1, r5
 800738a:	f7f9 fbc7 	bl	8000b1c <__aeabi_dcmplt>
 800738e:	2800      	cmp	r0, #0
 8007390:	f000 80ae 	beq.w	80074f0 <_dtoa_r+0x518>
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 80aa 	beq.w	80074f0 <_dtoa_r+0x518>
 800739c:	9b00      	ldr	r3, [sp, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	dd37      	ble.n	8007412 <_dtoa_r+0x43a>
 80073a2:	1e7b      	subs	r3, r7, #1
 80073a4:	9304      	str	r3, [sp, #16]
 80073a6:	4620      	mov	r0, r4
 80073a8:	4b7d      	ldr	r3, [pc, #500]	@ (80075a0 <_dtoa_r+0x5c8>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	4629      	mov	r1, r5
 80073ae:	f7f9 f943 	bl	8000638 <__aeabi_dmul>
 80073b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073b6:	9c00      	ldr	r4, [sp, #0]
 80073b8:	3601      	adds	r6, #1
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7f9 f8d2 	bl	8000564 <__aeabi_i2d>
 80073c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073c4:	f7f9 f938 	bl	8000638 <__aeabi_dmul>
 80073c8:	4b76      	ldr	r3, [pc, #472]	@ (80075a4 <_dtoa_r+0x5cc>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	f7f8 ff7e 	bl	80002cc <__adddf3>
 80073d0:	4605      	mov	r5, r0
 80073d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80073d6:	2c00      	cmp	r4, #0
 80073d8:	f040 808d 	bne.w	80074f6 <_dtoa_r+0x51e>
 80073dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073e0:	4b71      	ldr	r3, [pc, #452]	@ (80075a8 <_dtoa_r+0x5d0>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	f7f8 ff70 	bl	80002c8 <__aeabi_dsub>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073f0:	462a      	mov	r2, r5
 80073f2:	4633      	mov	r3, r6
 80073f4:	f7f9 fbb0 	bl	8000b58 <__aeabi_dcmpgt>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	f040 828b 	bne.w	8007914 <_dtoa_r+0x93c>
 80073fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007402:	462a      	mov	r2, r5
 8007404:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007408:	f7f9 fb88 	bl	8000b1c <__aeabi_dcmplt>
 800740c:	2800      	cmp	r0, #0
 800740e:	f040 8128 	bne.w	8007662 <_dtoa_r+0x68a>
 8007412:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007416:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800741a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800741c:	2b00      	cmp	r3, #0
 800741e:	f2c0 815a 	blt.w	80076d6 <_dtoa_r+0x6fe>
 8007422:	2f0e      	cmp	r7, #14
 8007424:	f300 8157 	bgt.w	80076d6 <_dtoa_r+0x6fe>
 8007428:	4b5a      	ldr	r3, [pc, #360]	@ (8007594 <_dtoa_r+0x5bc>)
 800742a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800742e:	ed93 7b00 	vldr	d7, [r3]
 8007432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007434:	2b00      	cmp	r3, #0
 8007436:	ed8d 7b00 	vstr	d7, [sp]
 800743a:	da03      	bge.n	8007444 <_dtoa_r+0x46c>
 800743c:	9b07      	ldr	r3, [sp, #28]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f340 8101 	ble.w	8007646 <_dtoa_r+0x66e>
 8007444:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007448:	4656      	mov	r6, sl
 800744a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800744e:	4620      	mov	r0, r4
 8007450:	4629      	mov	r1, r5
 8007452:	f7f9 fa1b 	bl	800088c <__aeabi_ddiv>
 8007456:	f7f9 fb9f 	bl	8000b98 <__aeabi_d2iz>
 800745a:	4680      	mov	r8, r0
 800745c:	f7f9 f882 	bl	8000564 <__aeabi_i2d>
 8007460:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007464:	f7f9 f8e8 	bl	8000638 <__aeabi_dmul>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4620      	mov	r0, r4
 800746e:	4629      	mov	r1, r5
 8007470:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007474:	f7f8 ff28 	bl	80002c8 <__aeabi_dsub>
 8007478:	f806 4b01 	strb.w	r4, [r6], #1
 800747c:	9d07      	ldr	r5, [sp, #28]
 800747e:	eba6 040a 	sub.w	r4, r6, sl
 8007482:	42a5      	cmp	r5, r4
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	f040 8117 	bne.w	80076ba <_dtoa_r+0x6e2>
 800748c:	f7f8 ff1e 	bl	80002cc <__adddf3>
 8007490:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007494:	4604      	mov	r4, r0
 8007496:	460d      	mov	r5, r1
 8007498:	f7f9 fb5e 	bl	8000b58 <__aeabi_dcmpgt>
 800749c:	2800      	cmp	r0, #0
 800749e:	f040 80f9 	bne.w	8007694 <_dtoa_r+0x6bc>
 80074a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074a6:	4620      	mov	r0, r4
 80074a8:	4629      	mov	r1, r5
 80074aa:	f7f9 fb2d 	bl	8000b08 <__aeabi_dcmpeq>
 80074ae:	b118      	cbz	r0, 80074b8 <_dtoa_r+0x4e0>
 80074b0:	f018 0f01 	tst.w	r8, #1
 80074b4:	f040 80ee 	bne.w	8007694 <_dtoa_r+0x6bc>
 80074b8:	4649      	mov	r1, r9
 80074ba:	4658      	mov	r0, fp
 80074bc:	f000 fc90 	bl	8007de0 <_Bfree>
 80074c0:	2300      	movs	r3, #0
 80074c2:	7033      	strb	r3, [r6, #0]
 80074c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80074c6:	3701      	adds	r7, #1
 80074c8:	601f      	str	r7, [r3, #0]
 80074ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 831d 	beq.w	8007b0c <_dtoa_r+0xb34>
 80074d2:	601e      	str	r6, [r3, #0]
 80074d4:	e31a      	b.n	8007b0c <_dtoa_r+0xb34>
 80074d6:	07e2      	lsls	r2, r4, #31
 80074d8:	d505      	bpl.n	80074e6 <_dtoa_r+0x50e>
 80074da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074de:	f7f9 f8ab 	bl	8000638 <__aeabi_dmul>
 80074e2:	3601      	adds	r6, #1
 80074e4:	2301      	movs	r3, #1
 80074e6:	1064      	asrs	r4, r4, #1
 80074e8:	3508      	adds	r5, #8
 80074ea:	e73f      	b.n	800736c <_dtoa_r+0x394>
 80074ec:	2602      	movs	r6, #2
 80074ee:	e742      	b.n	8007376 <_dtoa_r+0x39e>
 80074f0:	9c07      	ldr	r4, [sp, #28]
 80074f2:	9704      	str	r7, [sp, #16]
 80074f4:	e761      	b.n	80073ba <_dtoa_r+0x3e2>
 80074f6:	4b27      	ldr	r3, [pc, #156]	@ (8007594 <_dtoa_r+0x5bc>)
 80074f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007502:	4454      	add	r4, sl
 8007504:	2900      	cmp	r1, #0
 8007506:	d053      	beq.n	80075b0 <_dtoa_r+0x5d8>
 8007508:	4928      	ldr	r1, [pc, #160]	@ (80075ac <_dtoa_r+0x5d4>)
 800750a:	2000      	movs	r0, #0
 800750c:	f7f9 f9be 	bl	800088c <__aeabi_ddiv>
 8007510:	4633      	mov	r3, r6
 8007512:	462a      	mov	r2, r5
 8007514:	f7f8 fed8 	bl	80002c8 <__aeabi_dsub>
 8007518:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800751c:	4656      	mov	r6, sl
 800751e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007522:	f7f9 fb39 	bl	8000b98 <__aeabi_d2iz>
 8007526:	4605      	mov	r5, r0
 8007528:	f7f9 f81c 	bl	8000564 <__aeabi_i2d>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007534:	f7f8 fec8 	bl	80002c8 <__aeabi_dsub>
 8007538:	3530      	adds	r5, #48	@ 0x30
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007542:	f806 5b01 	strb.w	r5, [r6], #1
 8007546:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800754a:	f7f9 fae7 	bl	8000b1c <__aeabi_dcmplt>
 800754e:	2800      	cmp	r0, #0
 8007550:	d171      	bne.n	8007636 <_dtoa_r+0x65e>
 8007552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007556:	4911      	ldr	r1, [pc, #68]	@ (800759c <_dtoa_r+0x5c4>)
 8007558:	2000      	movs	r0, #0
 800755a:	f7f8 feb5 	bl	80002c8 <__aeabi_dsub>
 800755e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007562:	f7f9 fadb 	bl	8000b1c <__aeabi_dcmplt>
 8007566:	2800      	cmp	r0, #0
 8007568:	f040 8095 	bne.w	8007696 <_dtoa_r+0x6be>
 800756c:	42a6      	cmp	r6, r4
 800756e:	f43f af50 	beq.w	8007412 <_dtoa_r+0x43a>
 8007572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007576:	4b0a      	ldr	r3, [pc, #40]	@ (80075a0 <_dtoa_r+0x5c8>)
 8007578:	2200      	movs	r2, #0
 800757a:	f7f9 f85d 	bl	8000638 <__aeabi_dmul>
 800757e:	4b08      	ldr	r3, [pc, #32]	@ (80075a0 <_dtoa_r+0x5c8>)
 8007580:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007584:	2200      	movs	r2, #0
 8007586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800758a:	f7f9 f855 	bl	8000638 <__aeabi_dmul>
 800758e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007592:	e7c4      	b.n	800751e <_dtoa_r+0x546>
 8007594:	08008eb8 	.word	0x08008eb8
 8007598:	08008e90 	.word	0x08008e90
 800759c:	3ff00000 	.word	0x3ff00000
 80075a0:	40240000 	.word	0x40240000
 80075a4:	401c0000 	.word	0x401c0000
 80075a8:	40140000 	.word	0x40140000
 80075ac:	3fe00000 	.word	0x3fe00000
 80075b0:	4631      	mov	r1, r6
 80075b2:	4628      	mov	r0, r5
 80075b4:	f7f9 f840 	bl	8000638 <__aeabi_dmul>
 80075b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80075be:	4656      	mov	r6, sl
 80075c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075c4:	f7f9 fae8 	bl	8000b98 <__aeabi_d2iz>
 80075c8:	4605      	mov	r5, r0
 80075ca:	f7f8 ffcb 	bl	8000564 <__aeabi_i2d>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d6:	f7f8 fe77 	bl	80002c8 <__aeabi_dsub>
 80075da:	3530      	adds	r5, #48	@ 0x30
 80075dc:	f806 5b01 	strb.w	r5, [r6], #1
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	42a6      	cmp	r6, r4
 80075e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	d124      	bne.n	800763a <_dtoa_r+0x662>
 80075f0:	4bac      	ldr	r3, [pc, #688]	@ (80078a4 <_dtoa_r+0x8cc>)
 80075f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075f6:	f7f8 fe69 	bl	80002cc <__adddf3>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007602:	f7f9 faa9 	bl	8000b58 <__aeabi_dcmpgt>
 8007606:	2800      	cmp	r0, #0
 8007608:	d145      	bne.n	8007696 <_dtoa_r+0x6be>
 800760a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800760e:	49a5      	ldr	r1, [pc, #660]	@ (80078a4 <_dtoa_r+0x8cc>)
 8007610:	2000      	movs	r0, #0
 8007612:	f7f8 fe59 	bl	80002c8 <__aeabi_dsub>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800761e:	f7f9 fa7d 	bl	8000b1c <__aeabi_dcmplt>
 8007622:	2800      	cmp	r0, #0
 8007624:	f43f aef5 	beq.w	8007412 <_dtoa_r+0x43a>
 8007628:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800762a:	1e73      	subs	r3, r6, #1
 800762c:	9315      	str	r3, [sp, #84]	@ 0x54
 800762e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007632:	2b30      	cmp	r3, #48	@ 0x30
 8007634:	d0f8      	beq.n	8007628 <_dtoa_r+0x650>
 8007636:	9f04      	ldr	r7, [sp, #16]
 8007638:	e73e      	b.n	80074b8 <_dtoa_r+0x4e0>
 800763a:	4b9b      	ldr	r3, [pc, #620]	@ (80078a8 <_dtoa_r+0x8d0>)
 800763c:	f7f8 fffc 	bl	8000638 <__aeabi_dmul>
 8007640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007644:	e7bc      	b.n	80075c0 <_dtoa_r+0x5e8>
 8007646:	d10c      	bne.n	8007662 <_dtoa_r+0x68a>
 8007648:	4b98      	ldr	r3, [pc, #608]	@ (80078ac <_dtoa_r+0x8d4>)
 800764a:	2200      	movs	r2, #0
 800764c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007650:	f7f8 fff2 	bl	8000638 <__aeabi_dmul>
 8007654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007658:	f7f9 fa74 	bl	8000b44 <__aeabi_dcmpge>
 800765c:	2800      	cmp	r0, #0
 800765e:	f000 8157 	beq.w	8007910 <_dtoa_r+0x938>
 8007662:	2400      	movs	r4, #0
 8007664:	4625      	mov	r5, r4
 8007666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007668:	43db      	mvns	r3, r3
 800766a:	9304      	str	r3, [sp, #16]
 800766c:	4656      	mov	r6, sl
 800766e:	2700      	movs	r7, #0
 8007670:	4621      	mov	r1, r4
 8007672:	4658      	mov	r0, fp
 8007674:	f000 fbb4 	bl	8007de0 <_Bfree>
 8007678:	2d00      	cmp	r5, #0
 800767a:	d0dc      	beq.n	8007636 <_dtoa_r+0x65e>
 800767c:	b12f      	cbz	r7, 800768a <_dtoa_r+0x6b2>
 800767e:	42af      	cmp	r7, r5
 8007680:	d003      	beq.n	800768a <_dtoa_r+0x6b2>
 8007682:	4639      	mov	r1, r7
 8007684:	4658      	mov	r0, fp
 8007686:	f000 fbab 	bl	8007de0 <_Bfree>
 800768a:	4629      	mov	r1, r5
 800768c:	4658      	mov	r0, fp
 800768e:	f000 fba7 	bl	8007de0 <_Bfree>
 8007692:	e7d0      	b.n	8007636 <_dtoa_r+0x65e>
 8007694:	9704      	str	r7, [sp, #16]
 8007696:	4633      	mov	r3, r6
 8007698:	461e      	mov	r6, r3
 800769a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800769e:	2a39      	cmp	r2, #57	@ 0x39
 80076a0:	d107      	bne.n	80076b2 <_dtoa_r+0x6da>
 80076a2:	459a      	cmp	sl, r3
 80076a4:	d1f8      	bne.n	8007698 <_dtoa_r+0x6c0>
 80076a6:	9a04      	ldr	r2, [sp, #16]
 80076a8:	3201      	adds	r2, #1
 80076aa:	9204      	str	r2, [sp, #16]
 80076ac:	2230      	movs	r2, #48	@ 0x30
 80076ae:	f88a 2000 	strb.w	r2, [sl]
 80076b2:	781a      	ldrb	r2, [r3, #0]
 80076b4:	3201      	adds	r2, #1
 80076b6:	701a      	strb	r2, [r3, #0]
 80076b8:	e7bd      	b.n	8007636 <_dtoa_r+0x65e>
 80076ba:	4b7b      	ldr	r3, [pc, #492]	@ (80078a8 <_dtoa_r+0x8d0>)
 80076bc:	2200      	movs	r2, #0
 80076be:	f7f8 ffbb 	bl	8000638 <__aeabi_dmul>
 80076c2:	2200      	movs	r2, #0
 80076c4:	2300      	movs	r3, #0
 80076c6:	4604      	mov	r4, r0
 80076c8:	460d      	mov	r5, r1
 80076ca:	f7f9 fa1d 	bl	8000b08 <__aeabi_dcmpeq>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	f43f aebb 	beq.w	800744a <_dtoa_r+0x472>
 80076d4:	e6f0      	b.n	80074b8 <_dtoa_r+0x4e0>
 80076d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80076d8:	2a00      	cmp	r2, #0
 80076da:	f000 80db 	beq.w	8007894 <_dtoa_r+0x8bc>
 80076de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076e0:	2a01      	cmp	r2, #1
 80076e2:	f300 80bf 	bgt.w	8007864 <_dtoa_r+0x88c>
 80076e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	f000 80b7 	beq.w	800785c <_dtoa_r+0x884>
 80076ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80076f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80076f4:	4646      	mov	r6, r8
 80076f6:	9a08      	ldr	r2, [sp, #32]
 80076f8:	2101      	movs	r1, #1
 80076fa:	441a      	add	r2, r3
 80076fc:	4658      	mov	r0, fp
 80076fe:	4498      	add	r8, r3
 8007700:	9208      	str	r2, [sp, #32]
 8007702:	f000 fc21 	bl	8007f48 <__i2b>
 8007706:	4605      	mov	r5, r0
 8007708:	b15e      	cbz	r6, 8007722 <_dtoa_r+0x74a>
 800770a:	9b08      	ldr	r3, [sp, #32]
 800770c:	2b00      	cmp	r3, #0
 800770e:	dd08      	ble.n	8007722 <_dtoa_r+0x74a>
 8007710:	42b3      	cmp	r3, r6
 8007712:	9a08      	ldr	r2, [sp, #32]
 8007714:	bfa8      	it	ge
 8007716:	4633      	movge	r3, r6
 8007718:	eba8 0803 	sub.w	r8, r8, r3
 800771c:	1af6      	subs	r6, r6, r3
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	9308      	str	r3, [sp, #32]
 8007722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007724:	b1f3      	cbz	r3, 8007764 <_dtoa_r+0x78c>
 8007726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 80b7 	beq.w	800789c <_dtoa_r+0x8c4>
 800772e:	b18c      	cbz	r4, 8007754 <_dtoa_r+0x77c>
 8007730:	4629      	mov	r1, r5
 8007732:	4622      	mov	r2, r4
 8007734:	4658      	mov	r0, fp
 8007736:	f000 fcc7 	bl	80080c8 <__pow5mult>
 800773a:	464a      	mov	r2, r9
 800773c:	4601      	mov	r1, r0
 800773e:	4605      	mov	r5, r0
 8007740:	4658      	mov	r0, fp
 8007742:	f000 fc17 	bl	8007f74 <__multiply>
 8007746:	4649      	mov	r1, r9
 8007748:	9004      	str	r0, [sp, #16]
 800774a:	4658      	mov	r0, fp
 800774c:	f000 fb48 	bl	8007de0 <_Bfree>
 8007750:	9b04      	ldr	r3, [sp, #16]
 8007752:	4699      	mov	r9, r3
 8007754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007756:	1b1a      	subs	r2, r3, r4
 8007758:	d004      	beq.n	8007764 <_dtoa_r+0x78c>
 800775a:	4649      	mov	r1, r9
 800775c:	4658      	mov	r0, fp
 800775e:	f000 fcb3 	bl	80080c8 <__pow5mult>
 8007762:	4681      	mov	r9, r0
 8007764:	2101      	movs	r1, #1
 8007766:	4658      	mov	r0, fp
 8007768:	f000 fbee 	bl	8007f48 <__i2b>
 800776c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800776e:	4604      	mov	r4, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 81cf 	beq.w	8007b14 <_dtoa_r+0xb3c>
 8007776:	461a      	mov	r2, r3
 8007778:	4601      	mov	r1, r0
 800777a:	4658      	mov	r0, fp
 800777c:	f000 fca4 	bl	80080c8 <__pow5mult>
 8007780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007782:	2b01      	cmp	r3, #1
 8007784:	4604      	mov	r4, r0
 8007786:	f300 8095 	bgt.w	80078b4 <_dtoa_r+0x8dc>
 800778a:	9b02      	ldr	r3, [sp, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	f040 8087 	bne.w	80078a0 <_dtoa_r+0x8c8>
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007798:	2b00      	cmp	r3, #0
 800779a:	f040 8089 	bne.w	80078b0 <_dtoa_r+0x8d8>
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077a4:	0d1b      	lsrs	r3, r3, #20
 80077a6:	051b      	lsls	r3, r3, #20
 80077a8:	b12b      	cbz	r3, 80077b6 <_dtoa_r+0x7de>
 80077aa:	9b08      	ldr	r3, [sp, #32]
 80077ac:	3301      	adds	r3, #1
 80077ae:	9308      	str	r3, [sp, #32]
 80077b0:	f108 0801 	add.w	r8, r8, #1
 80077b4:	2301      	movs	r3, #1
 80077b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80077b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 81b0 	beq.w	8007b20 <_dtoa_r+0xb48>
 80077c0:	6923      	ldr	r3, [r4, #16]
 80077c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077c6:	6918      	ldr	r0, [r3, #16]
 80077c8:	f000 fb72 	bl	8007eb0 <__hi0bits>
 80077cc:	f1c0 0020 	rsb	r0, r0, #32
 80077d0:	9b08      	ldr	r3, [sp, #32]
 80077d2:	4418      	add	r0, r3
 80077d4:	f010 001f 	ands.w	r0, r0, #31
 80077d8:	d077      	beq.n	80078ca <_dtoa_r+0x8f2>
 80077da:	f1c0 0320 	rsb	r3, r0, #32
 80077de:	2b04      	cmp	r3, #4
 80077e0:	dd6b      	ble.n	80078ba <_dtoa_r+0x8e2>
 80077e2:	9b08      	ldr	r3, [sp, #32]
 80077e4:	f1c0 001c 	rsb	r0, r0, #28
 80077e8:	4403      	add	r3, r0
 80077ea:	4480      	add	r8, r0
 80077ec:	4406      	add	r6, r0
 80077ee:	9308      	str	r3, [sp, #32]
 80077f0:	f1b8 0f00 	cmp.w	r8, #0
 80077f4:	dd05      	ble.n	8007802 <_dtoa_r+0x82a>
 80077f6:	4649      	mov	r1, r9
 80077f8:	4642      	mov	r2, r8
 80077fa:	4658      	mov	r0, fp
 80077fc:	f000 fcbe 	bl	800817c <__lshift>
 8007800:	4681      	mov	r9, r0
 8007802:	9b08      	ldr	r3, [sp, #32]
 8007804:	2b00      	cmp	r3, #0
 8007806:	dd05      	ble.n	8007814 <_dtoa_r+0x83c>
 8007808:	4621      	mov	r1, r4
 800780a:	461a      	mov	r2, r3
 800780c:	4658      	mov	r0, fp
 800780e:	f000 fcb5 	bl	800817c <__lshift>
 8007812:	4604      	mov	r4, r0
 8007814:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007816:	2b00      	cmp	r3, #0
 8007818:	d059      	beq.n	80078ce <_dtoa_r+0x8f6>
 800781a:	4621      	mov	r1, r4
 800781c:	4648      	mov	r0, r9
 800781e:	f000 fd19 	bl	8008254 <__mcmp>
 8007822:	2800      	cmp	r0, #0
 8007824:	da53      	bge.n	80078ce <_dtoa_r+0x8f6>
 8007826:	1e7b      	subs	r3, r7, #1
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	4649      	mov	r1, r9
 800782c:	2300      	movs	r3, #0
 800782e:	220a      	movs	r2, #10
 8007830:	4658      	mov	r0, fp
 8007832:	f000 faf7 	bl	8007e24 <__multadd>
 8007836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007838:	4681      	mov	r9, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 8172 	beq.w	8007b24 <_dtoa_r+0xb4c>
 8007840:	2300      	movs	r3, #0
 8007842:	4629      	mov	r1, r5
 8007844:	220a      	movs	r2, #10
 8007846:	4658      	mov	r0, fp
 8007848:	f000 faec 	bl	8007e24 <__multadd>
 800784c:	9b00      	ldr	r3, [sp, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	4605      	mov	r5, r0
 8007852:	dc67      	bgt.n	8007924 <_dtoa_r+0x94c>
 8007854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007856:	2b02      	cmp	r3, #2
 8007858:	dc41      	bgt.n	80078de <_dtoa_r+0x906>
 800785a:	e063      	b.n	8007924 <_dtoa_r+0x94c>
 800785c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800785e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007862:	e746      	b.n	80076f2 <_dtoa_r+0x71a>
 8007864:	9b07      	ldr	r3, [sp, #28]
 8007866:	1e5c      	subs	r4, r3, #1
 8007868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800786a:	42a3      	cmp	r3, r4
 800786c:	bfbf      	itttt	lt
 800786e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007870:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007872:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007874:	1ae3      	sublt	r3, r4, r3
 8007876:	bfb4      	ite	lt
 8007878:	18d2      	addlt	r2, r2, r3
 800787a:	1b1c      	subge	r4, r3, r4
 800787c:	9b07      	ldr	r3, [sp, #28]
 800787e:	bfbc      	itt	lt
 8007880:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007882:	2400      	movlt	r4, #0
 8007884:	2b00      	cmp	r3, #0
 8007886:	bfb5      	itete	lt
 8007888:	eba8 0603 	sublt.w	r6, r8, r3
 800788c:	9b07      	ldrge	r3, [sp, #28]
 800788e:	2300      	movlt	r3, #0
 8007890:	4646      	movge	r6, r8
 8007892:	e730      	b.n	80076f6 <_dtoa_r+0x71e>
 8007894:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007896:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007898:	4646      	mov	r6, r8
 800789a:	e735      	b.n	8007708 <_dtoa_r+0x730>
 800789c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800789e:	e75c      	b.n	800775a <_dtoa_r+0x782>
 80078a0:	2300      	movs	r3, #0
 80078a2:	e788      	b.n	80077b6 <_dtoa_r+0x7de>
 80078a4:	3fe00000 	.word	0x3fe00000
 80078a8:	40240000 	.word	0x40240000
 80078ac:	40140000 	.word	0x40140000
 80078b0:	9b02      	ldr	r3, [sp, #8]
 80078b2:	e780      	b.n	80077b6 <_dtoa_r+0x7de>
 80078b4:	2300      	movs	r3, #0
 80078b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078b8:	e782      	b.n	80077c0 <_dtoa_r+0x7e8>
 80078ba:	d099      	beq.n	80077f0 <_dtoa_r+0x818>
 80078bc:	9a08      	ldr	r2, [sp, #32]
 80078be:	331c      	adds	r3, #28
 80078c0:	441a      	add	r2, r3
 80078c2:	4498      	add	r8, r3
 80078c4:	441e      	add	r6, r3
 80078c6:	9208      	str	r2, [sp, #32]
 80078c8:	e792      	b.n	80077f0 <_dtoa_r+0x818>
 80078ca:	4603      	mov	r3, r0
 80078cc:	e7f6      	b.n	80078bc <_dtoa_r+0x8e4>
 80078ce:	9b07      	ldr	r3, [sp, #28]
 80078d0:	9704      	str	r7, [sp, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	dc20      	bgt.n	8007918 <_dtoa_r+0x940>
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078da:	2b02      	cmp	r3, #2
 80078dc:	dd1e      	ble.n	800791c <_dtoa_r+0x944>
 80078de:	9b00      	ldr	r3, [sp, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f47f aec0 	bne.w	8007666 <_dtoa_r+0x68e>
 80078e6:	4621      	mov	r1, r4
 80078e8:	2205      	movs	r2, #5
 80078ea:	4658      	mov	r0, fp
 80078ec:	f000 fa9a 	bl	8007e24 <__multadd>
 80078f0:	4601      	mov	r1, r0
 80078f2:	4604      	mov	r4, r0
 80078f4:	4648      	mov	r0, r9
 80078f6:	f000 fcad 	bl	8008254 <__mcmp>
 80078fa:	2800      	cmp	r0, #0
 80078fc:	f77f aeb3 	ble.w	8007666 <_dtoa_r+0x68e>
 8007900:	4656      	mov	r6, sl
 8007902:	2331      	movs	r3, #49	@ 0x31
 8007904:	f806 3b01 	strb.w	r3, [r6], #1
 8007908:	9b04      	ldr	r3, [sp, #16]
 800790a:	3301      	adds	r3, #1
 800790c:	9304      	str	r3, [sp, #16]
 800790e:	e6ae      	b.n	800766e <_dtoa_r+0x696>
 8007910:	9c07      	ldr	r4, [sp, #28]
 8007912:	9704      	str	r7, [sp, #16]
 8007914:	4625      	mov	r5, r4
 8007916:	e7f3      	b.n	8007900 <_dtoa_r+0x928>
 8007918:	9b07      	ldr	r3, [sp, #28]
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 8104 	beq.w	8007b2c <_dtoa_r+0xb54>
 8007924:	2e00      	cmp	r6, #0
 8007926:	dd05      	ble.n	8007934 <_dtoa_r+0x95c>
 8007928:	4629      	mov	r1, r5
 800792a:	4632      	mov	r2, r6
 800792c:	4658      	mov	r0, fp
 800792e:	f000 fc25 	bl	800817c <__lshift>
 8007932:	4605      	mov	r5, r0
 8007934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007936:	2b00      	cmp	r3, #0
 8007938:	d05a      	beq.n	80079f0 <_dtoa_r+0xa18>
 800793a:	6869      	ldr	r1, [r5, #4]
 800793c:	4658      	mov	r0, fp
 800793e:	f000 fa0f 	bl	8007d60 <_Balloc>
 8007942:	4606      	mov	r6, r0
 8007944:	b928      	cbnz	r0, 8007952 <_dtoa_r+0x97a>
 8007946:	4b84      	ldr	r3, [pc, #528]	@ (8007b58 <_dtoa_r+0xb80>)
 8007948:	4602      	mov	r2, r0
 800794a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800794e:	f7ff bb5a 	b.w	8007006 <_dtoa_r+0x2e>
 8007952:	692a      	ldr	r2, [r5, #16]
 8007954:	3202      	adds	r2, #2
 8007956:	0092      	lsls	r2, r2, #2
 8007958:	f105 010c 	add.w	r1, r5, #12
 800795c:	300c      	adds	r0, #12
 800795e:	f001 f813 	bl	8008988 <memcpy>
 8007962:	2201      	movs	r2, #1
 8007964:	4631      	mov	r1, r6
 8007966:	4658      	mov	r0, fp
 8007968:	f000 fc08 	bl	800817c <__lshift>
 800796c:	f10a 0301 	add.w	r3, sl, #1
 8007970:	9307      	str	r3, [sp, #28]
 8007972:	9b00      	ldr	r3, [sp, #0]
 8007974:	4453      	add	r3, sl
 8007976:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007978:	9b02      	ldr	r3, [sp, #8]
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	462f      	mov	r7, r5
 8007980:	930a      	str	r3, [sp, #40]	@ 0x28
 8007982:	4605      	mov	r5, r0
 8007984:	9b07      	ldr	r3, [sp, #28]
 8007986:	4621      	mov	r1, r4
 8007988:	3b01      	subs	r3, #1
 800798a:	4648      	mov	r0, r9
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	f7ff fa9a 	bl	8006ec6 <quorem>
 8007992:	4639      	mov	r1, r7
 8007994:	9002      	str	r0, [sp, #8]
 8007996:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800799a:	4648      	mov	r0, r9
 800799c:	f000 fc5a 	bl	8008254 <__mcmp>
 80079a0:	462a      	mov	r2, r5
 80079a2:	9008      	str	r0, [sp, #32]
 80079a4:	4621      	mov	r1, r4
 80079a6:	4658      	mov	r0, fp
 80079a8:	f000 fc70 	bl	800828c <__mdiff>
 80079ac:	68c2      	ldr	r2, [r0, #12]
 80079ae:	4606      	mov	r6, r0
 80079b0:	bb02      	cbnz	r2, 80079f4 <_dtoa_r+0xa1c>
 80079b2:	4601      	mov	r1, r0
 80079b4:	4648      	mov	r0, r9
 80079b6:	f000 fc4d 	bl	8008254 <__mcmp>
 80079ba:	4602      	mov	r2, r0
 80079bc:	4631      	mov	r1, r6
 80079be:	4658      	mov	r0, fp
 80079c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80079c2:	f000 fa0d 	bl	8007de0 <_Bfree>
 80079c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079ca:	9e07      	ldr	r6, [sp, #28]
 80079cc:	ea43 0102 	orr.w	r1, r3, r2
 80079d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079d2:	4319      	orrs	r1, r3
 80079d4:	d110      	bne.n	80079f8 <_dtoa_r+0xa20>
 80079d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079da:	d029      	beq.n	8007a30 <_dtoa_r+0xa58>
 80079dc:	9b08      	ldr	r3, [sp, #32]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	dd02      	ble.n	80079e8 <_dtoa_r+0xa10>
 80079e2:	9b02      	ldr	r3, [sp, #8]
 80079e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80079e8:	9b00      	ldr	r3, [sp, #0]
 80079ea:	f883 8000 	strb.w	r8, [r3]
 80079ee:	e63f      	b.n	8007670 <_dtoa_r+0x698>
 80079f0:	4628      	mov	r0, r5
 80079f2:	e7bb      	b.n	800796c <_dtoa_r+0x994>
 80079f4:	2201      	movs	r2, #1
 80079f6:	e7e1      	b.n	80079bc <_dtoa_r+0x9e4>
 80079f8:	9b08      	ldr	r3, [sp, #32]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	db04      	blt.n	8007a08 <_dtoa_r+0xa30>
 80079fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a00:	430b      	orrs	r3, r1
 8007a02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a04:	430b      	orrs	r3, r1
 8007a06:	d120      	bne.n	8007a4a <_dtoa_r+0xa72>
 8007a08:	2a00      	cmp	r2, #0
 8007a0a:	dded      	ble.n	80079e8 <_dtoa_r+0xa10>
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	2201      	movs	r2, #1
 8007a10:	4658      	mov	r0, fp
 8007a12:	f000 fbb3 	bl	800817c <__lshift>
 8007a16:	4621      	mov	r1, r4
 8007a18:	4681      	mov	r9, r0
 8007a1a:	f000 fc1b 	bl	8008254 <__mcmp>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	dc03      	bgt.n	8007a2a <_dtoa_r+0xa52>
 8007a22:	d1e1      	bne.n	80079e8 <_dtoa_r+0xa10>
 8007a24:	f018 0f01 	tst.w	r8, #1
 8007a28:	d0de      	beq.n	80079e8 <_dtoa_r+0xa10>
 8007a2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a2e:	d1d8      	bne.n	80079e2 <_dtoa_r+0xa0a>
 8007a30:	9a00      	ldr	r2, [sp, #0]
 8007a32:	2339      	movs	r3, #57	@ 0x39
 8007a34:	7013      	strb	r3, [r2, #0]
 8007a36:	4633      	mov	r3, r6
 8007a38:	461e      	mov	r6, r3
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a40:	2a39      	cmp	r2, #57	@ 0x39
 8007a42:	d052      	beq.n	8007aea <_dtoa_r+0xb12>
 8007a44:	3201      	adds	r2, #1
 8007a46:	701a      	strb	r2, [r3, #0]
 8007a48:	e612      	b.n	8007670 <_dtoa_r+0x698>
 8007a4a:	2a00      	cmp	r2, #0
 8007a4c:	dd07      	ble.n	8007a5e <_dtoa_r+0xa86>
 8007a4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a52:	d0ed      	beq.n	8007a30 <_dtoa_r+0xa58>
 8007a54:	9a00      	ldr	r2, [sp, #0]
 8007a56:	f108 0301 	add.w	r3, r8, #1
 8007a5a:	7013      	strb	r3, [r2, #0]
 8007a5c:	e608      	b.n	8007670 <_dtoa_r+0x698>
 8007a5e:	9b07      	ldr	r3, [sp, #28]
 8007a60:	9a07      	ldr	r2, [sp, #28]
 8007a62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d028      	beq.n	8007abe <_dtoa_r+0xae6>
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	2300      	movs	r3, #0
 8007a70:	220a      	movs	r2, #10
 8007a72:	4658      	mov	r0, fp
 8007a74:	f000 f9d6 	bl	8007e24 <__multadd>
 8007a78:	42af      	cmp	r7, r5
 8007a7a:	4681      	mov	r9, r0
 8007a7c:	f04f 0300 	mov.w	r3, #0
 8007a80:	f04f 020a 	mov.w	r2, #10
 8007a84:	4639      	mov	r1, r7
 8007a86:	4658      	mov	r0, fp
 8007a88:	d107      	bne.n	8007a9a <_dtoa_r+0xac2>
 8007a8a:	f000 f9cb 	bl	8007e24 <__multadd>
 8007a8e:	4607      	mov	r7, r0
 8007a90:	4605      	mov	r5, r0
 8007a92:	9b07      	ldr	r3, [sp, #28]
 8007a94:	3301      	adds	r3, #1
 8007a96:	9307      	str	r3, [sp, #28]
 8007a98:	e774      	b.n	8007984 <_dtoa_r+0x9ac>
 8007a9a:	f000 f9c3 	bl	8007e24 <__multadd>
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	4607      	mov	r7, r0
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	220a      	movs	r2, #10
 8007aa6:	4658      	mov	r0, fp
 8007aa8:	f000 f9bc 	bl	8007e24 <__multadd>
 8007aac:	4605      	mov	r5, r0
 8007aae:	e7f0      	b.n	8007a92 <_dtoa_r+0xaba>
 8007ab0:	9b00      	ldr	r3, [sp, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	bfcc      	ite	gt
 8007ab6:	461e      	movgt	r6, r3
 8007ab8:	2601      	movle	r6, #1
 8007aba:	4456      	add	r6, sl
 8007abc:	2700      	movs	r7, #0
 8007abe:	4649      	mov	r1, r9
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	4658      	mov	r0, fp
 8007ac4:	f000 fb5a 	bl	800817c <__lshift>
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4681      	mov	r9, r0
 8007acc:	f000 fbc2 	bl	8008254 <__mcmp>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	dcb0      	bgt.n	8007a36 <_dtoa_r+0xa5e>
 8007ad4:	d102      	bne.n	8007adc <_dtoa_r+0xb04>
 8007ad6:	f018 0f01 	tst.w	r8, #1
 8007ada:	d1ac      	bne.n	8007a36 <_dtoa_r+0xa5e>
 8007adc:	4633      	mov	r3, r6
 8007ade:	461e      	mov	r6, r3
 8007ae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ae4:	2a30      	cmp	r2, #48	@ 0x30
 8007ae6:	d0fa      	beq.n	8007ade <_dtoa_r+0xb06>
 8007ae8:	e5c2      	b.n	8007670 <_dtoa_r+0x698>
 8007aea:	459a      	cmp	sl, r3
 8007aec:	d1a4      	bne.n	8007a38 <_dtoa_r+0xa60>
 8007aee:	9b04      	ldr	r3, [sp, #16]
 8007af0:	3301      	adds	r3, #1
 8007af2:	9304      	str	r3, [sp, #16]
 8007af4:	2331      	movs	r3, #49	@ 0x31
 8007af6:	f88a 3000 	strb.w	r3, [sl]
 8007afa:	e5b9      	b.n	8007670 <_dtoa_r+0x698>
 8007afc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007afe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007b5c <_dtoa_r+0xb84>
 8007b02:	b11b      	cbz	r3, 8007b0c <_dtoa_r+0xb34>
 8007b04:	f10a 0308 	add.w	r3, sl, #8
 8007b08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	4650      	mov	r0, sl
 8007b0e:	b019      	add	sp, #100	@ 0x64
 8007b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	f77f ae37 	ble.w	800778a <_dtoa_r+0x7b2>
 8007b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b20:	2001      	movs	r0, #1
 8007b22:	e655      	b.n	80077d0 <_dtoa_r+0x7f8>
 8007b24:	9b00      	ldr	r3, [sp, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f77f aed6 	ble.w	80078d8 <_dtoa_r+0x900>
 8007b2c:	4656      	mov	r6, sl
 8007b2e:	4621      	mov	r1, r4
 8007b30:	4648      	mov	r0, r9
 8007b32:	f7ff f9c8 	bl	8006ec6 <quorem>
 8007b36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b3a:	f806 8b01 	strb.w	r8, [r6], #1
 8007b3e:	9b00      	ldr	r3, [sp, #0]
 8007b40:	eba6 020a 	sub.w	r2, r6, sl
 8007b44:	4293      	cmp	r3, r2
 8007b46:	ddb3      	ble.n	8007ab0 <_dtoa_r+0xad8>
 8007b48:	4649      	mov	r1, r9
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	220a      	movs	r2, #10
 8007b4e:	4658      	mov	r0, fp
 8007b50:	f000 f968 	bl	8007e24 <__multadd>
 8007b54:	4681      	mov	r9, r0
 8007b56:	e7ea      	b.n	8007b2e <_dtoa_r+0xb56>
 8007b58:	08008e18 	.word	0x08008e18
 8007b5c:	08008d9c 	.word	0x08008d9c

08007b60 <_free_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4605      	mov	r5, r0
 8007b64:	2900      	cmp	r1, #0
 8007b66:	d041      	beq.n	8007bec <_free_r+0x8c>
 8007b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b6c:	1f0c      	subs	r4, r1, #4
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	bfb8      	it	lt
 8007b72:	18e4      	addlt	r4, r4, r3
 8007b74:	f000 f8e8 	bl	8007d48 <__malloc_lock>
 8007b78:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf0 <_free_r+0x90>)
 8007b7a:	6813      	ldr	r3, [r2, #0]
 8007b7c:	b933      	cbnz	r3, 8007b8c <_free_r+0x2c>
 8007b7e:	6063      	str	r3, [r4, #4]
 8007b80:	6014      	str	r4, [r2, #0]
 8007b82:	4628      	mov	r0, r5
 8007b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b88:	f000 b8e4 	b.w	8007d54 <__malloc_unlock>
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	d908      	bls.n	8007ba2 <_free_r+0x42>
 8007b90:	6820      	ldr	r0, [r4, #0]
 8007b92:	1821      	adds	r1, r4, r0
 8007b94:	428b      	cmp	r3, r1
 8007b96:	bf01      	itttt	eq
 8007b98:	6819      	ldreq	r1, [r3, #0]
 8007b9a:	685b      	ldreq	r3, [r3, #4]
 8007b9c:	1809      	addeq	r1, r1, r0
 8007b9e:	6021      	streq	r1, [r4, #0]
 8007ba0:	e7ed      	b.n	8007b7e <_free_r+0x1e>
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	b10b      	cbz	r3, 8007bac <_free_r+0x4c>
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	d9fa      	bls.n	8007ba2 <_free_r+0x42>
 8007bac:	6811      	ldr	r1, [r2, #0]
 8007bae:	1850      	adds	r0, r2, r1
 8007bb0:	42a0      	cmp	r0, r4
 8007bb2:	d10b      	bne.n	8007bcc <_free_r+0x6c>
 8007bb4:	6820      	ldr	r0, [r4, #0]
 8007bb6:	4401      	add	r1, r0
 8007bb8:	1850      	adds	r0, r2, r1
 8007bba:	4283      	cmp	r3, r0
 8007bbc:	6011      	str	r1, [r2, #0]
 8007bbe:	d1e0      	bne.n	8007b82 <_free_r+0x22>
 8007bc0:	6818      	ldr	r0, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	6053      	str	r3, [r2, #4]
 8007bc6:	4408      	add	r0, r1
 8007bc8:	6010      	str	r0, [r2, #0]
 8007bca:	e7da      	b.n	8007b82 <_free_r+0x22>
 8007bcc:	d902      	bls.n	8007bd4 <_free_r+0x74>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	602b      	str	r3, [r5, #0]
 8007bd2:	e7d6      	b.n	8007b82 <_free_r+0x22>
 8007bd4:	6820      	ldr	r0, [r4, #0]
 8007bd6:	1821      	adds	r1, r4, r0
 8007bd8:	428b      	cmp	r3, r1
 8007bda:	bf04      	itt	eq
 8007bdc:	6819      	ldreq	r1, [r3, #0]
 8007bde:	685b      	ldreq	r3, [r3, #4]
 8007be0:	6063      	str	r3, [r4, #4]
 8007be2:	bf04      	itt	eq
 8007be4:	1809      	addeq	r1, r1, r0
 8007be6:	6021      	streq	r1, [r4, #0]
 8007be8:	6054      	str	r4, [r2, #4]
 8007bea:	e7ca      	b.n	8007b82 <_free_r+0x22>
 8007bec:	bd38      	pop	{r3, r4, r5, pc}
 8007bee:	bf00      	nop
 8007bf0:	200004e4 	.word	0x200004e4

08007bf4 <malloc>:
 8007bf4:	4b02      	ldr	r3, [pc, #8]	@ (8007c00 <malloc+0xc>)
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	f000 b825 	b.w	8007c48 <_malloc_r>
 8007bfe:	bf00      	nop
 8007c00:	20000028 	.word	0x20000028

08007c04 <sbrk_aligned>:
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	4e0f      	ldr	r6, [pc, #60]	@ (8007c44 <sbrk_aligned+0x40>)
 8007c08:	460c      	mov	r4, r1
 8007c0a:	6831      	ldr	r1, [r6, #0]
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	b911      	cbnz	r1, 8007c16 <sbrk_aligned+0x12>
 8007c10:	f000 feaa 	bl	8008968 <_sbrk_r>
 8007c14:	6030      	str	r0, [r6, #0]
 8007c16:	4621      	mov	r1, r4
 8007c18:	4628      	mov	r0, r5
 8007c1a:	f000 fea5 	bl	8008968 <_sbrk_r>
 8007c1e:	1c43      	adds	r3, r0, #1
 8007c20:	d103      	bne.n	8007c2a <sbrk_aligned+0x26>
 8007c22:	f04f 34ff 	mov.w	r4, #4294967295
 8007c26:	4620      	mov	r0, r4
 8007c28:	bd70      	pop	{r4, r5, r6, pc}
 8007c2a:	1cc4      	adds	r4, r0, #3
 8007c2c:	f024 0403 	bic.w	r4, r4, #3
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	d0f8      	beq.n	8007c26 <sbrk_aligned+0x22>
 8007c34:	1a21      	subs	r1, r4, r0
 8007c36:	4628      	mov	r0, r5
 8007c38:	f000 fe96 	bl	8008968 <_sbrk_r>
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d1f2      	bne.n	8007c26 <sbrk_aligned+0x22>
 8007c40:	e7ef      	b.n	8007c22 <sbrk_aligned+0x1e>
 8007c42:	bf00      	nop
 8007c44:	200004e0 	.word	0x200004e0

08007c48 <_malloc_r>:
 8007c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c4c:	1ccd      	adds	r5, r1, #3
 8007c4e:	f025 0503 	bic.w	r5, r5, #3
 8007c52:	3508      	adds	r5, #8
 8007c54:	2d0c      	cmp	r5, #12
 8007c56:	bf38      	it	cc
 8007c58:	250c      	movcc	r5, #12
 8007c5a:	2d00      	cmp	r5, #0
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	db01      	blt.n	8007c64 <_malloc_r+0x1c>
 8007c60:	42a9      	cmp	r1, r5
 8007c62:	d904      	bls.n	8007c6e <_malloc_r+0x26>
 8007c64:	230c      	movs	r3, #12
 8007c66:	6033      	str	r3, [r6, #0]
 8007c68:	2000      	movs	r0, #0
 8007c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d44 <_malloc_r+0xfc>
 8007c72:	f000 f869 	bl	8007d48 <__malloc_lock>
 8007c76:	f8d8 3000 	ldr.w	r3, [r8]
 8007c7a:	461c      	mov	r4, r3
 8007c7c:	bb44      	cbnz	r4, 8007cd0 <_malloc_r+0x88>
 8007c7e:	4629      	mov	r1, r5
 8007c80:	4630      	mov	r0, r6
 8007c82:	f7ff ffbf 	bl	8007c04 <sbrk_aligned>
 8007c86:	1c43      	adds	r3, r0, #1
 8007c88:	4604      	mov	r4, r0
 8007c8a:	d158      	bne.n	8007d3e <_malloc_r+0xf6>
 8007c8c:	f8d8 4000 	ldr.w	r4, [r8]
 8007c90:	4627      	mov	r7, r4
 8007c92:	2f00      	cmp	r7, #0
 8007c94:	d143      	bne.n	8007d1e <_malloc_r+0xd6>
 8007c96:	2c00      	cmp	r4, #0
 8007c98:	d04b      	beq.n	8007d32 <_malloc_r+0xea>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	eb04 0903 	add.w	r9, r4, r3
 8007ca4:	f000 fe60 	bl	8008968 <_sbrk_r>
 8007ca8:	4581      	cmp	r9, r0
 8007caa:	d142      	bne.n	8007d32 <_malloc_r+0xea>
 8007cac:	6821      	ldr	r1, [r4, #0]
 8007cae:	1a6d      	subs	r5, r5, r1
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7ff ffa6 	bl	8007c04 <sbrk_aligned>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d03a      	beq.n	8007d32 <_malloc_r+0xea>
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	442b      	add	r3, r5
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	bb62      	cbnz	r2, 8007d24 <_malloc_r+0xdc>
 8007cca:	f8c8 7000 	str.w	r7, [r8]
 8007cce:	e00f      	b.n	8007cf0 <_malloc_r+0xa8>
 8007cd0:	6822      	ldr	r2, [r4, #0]
 8007cd2:	1b52      	subs	r2, r2, r5
 8007cd4:	d420      	bmi.n	8007d18 <_malloc_r+0xd0>
 8007cd6:	2a0b      	cmp	r2, #11
 8007cd8:	d917      	bls.n	8007d0a <_malloc_r+0xc2>
 8007cda:	1961      	adds	r1, r4, r5
 8007cdc:	42a3      	cmp	r3, r4
 8007cde:	6025      	str	r5, [r4, #0]
 8007ce0:	bf18      	it	ne
 8007ce2:	6059      	strne	r1, [r3, #4]
 8007ce4:	6863      	ldr	r3, [r4, #4]
 8007ce6:	bf08      	it	eq
 8007ce8:	f8c8 1000 	streq.w	r1, [r8]
 8007cec:	5162      	str	r2, [r4, r5]
 8007cee:	604b      	str	r3, [r1, #4]
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f000 f82f 	bl	8007d54 <__malloc_unlock>
 8007cf6:	f104 000b 	add.w	r0, r4, #11
 8007cfa:	1d23      	adds	r3, r4, #4
 8007cfc:	f020 0007 	bic.w	r0, r0, #7
 8007d00:	1ac2      	subs	r2, r0, r3
 8007d02:	bf1c      	itt	ne
 8007d04:	1a1b      	subne	r3, r3, r0
 8007d06:	50a3      	strne	r3, [r4, r2]
 8007d08:	e7af      	b.n	8007c6a <_malloc_r+0x22>
 8007d0a:	6862      	ldr	r2, [r4, #4]
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	bf0c      	ite	eq
 8007d10:	f8c8 2000 	streq.w	r2, [r8]
 8007d14:	605a      	strne	r2, [r3, #4]
 8007d16:	e7eb      	b.n	8007cf0 <_malloc_r+0xa8>
 8007d18:	4623      	mov	r3, r4
 8007d1a:	6864      	ldr	r4, [r4, #4]
 8007d1c:	e7ae      	b.n	8007c7c <_malloc_r+0x34>
 8007d1e:	463c      	mov	r4, r7
 8007d20:	687f      	ldr	r7, [r7, #4]
 8007d22:	e7b6      	b.n	8007c92 <_malloc_r+0x4a>
 8007d24:	461a      	mov	r2, r3
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d1fb      	bne.n	8007d24 <_malloc_r+0xdc>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	6053      	str	r3, [r2, #4]
 8007d30:	e7de      	b.n	8007cf0 <_malloc_r+0xa8>
 8007d32:	230c      	movs	r3, #12
 8007d34:	6033      	str	r3, [r6, #0]
 8007d36:	4630      	mov	r0, r6
 8007d38:	f000 f80c 	bl	8007d54 <__malloc_unlock>
 8007d3c:	e794      	b.n	8007c68 <_malloc_r+0x20>
 8007d3e:	6005      	str	r5, [r0, #0]
 8007d40:	e7d6      	b.n	8007cf0 <_malloc_r+0xa8>
 8007d42:	bf00      	nop
 8007d44:	200004e4 	.word	0x200004e4

08007d48 <__malloc_lock>:
 8007d48:	4801      	ldr	r0, [pc, #4]	@ (8007d50 <__malloc_lock+0x8>)
 8007d4a:	f7ff b8ba 	b.w	8006ec2 <__retarget_lock_acquire_recursive>
 8007d4e:	bf00      	nop
 8007d50:	200004dc 	.word	0x200004dc

08007d54 <__malloc_unlock>:
 8007d54:	4801      	ldr	r0, [pc, #4]	@ (8007d5c <__malloc_unlock+0x8>)
 8007d56:	f7ff b8b5 	b.w	8006ec4 <__retarget_lock_release_recursive>
 8007d5a:	bf00      	nop
 8007d5c:	200004dc 	.word	0x200004dc

08007d60 <_Balloc>:
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	69c6      	ldr	r6, [r0, #28]
 8007d64:	4604      	mov	r4, r0
 8007d66:	460d      	mov	r5, r1
 8007d68:	b976      	cbnz	r6, 8007d88 <_Balloc+0x28>
 8007d6a:	2010      	movs	r0, #16
 8007d6c:	f7ff ff42 	bl	8007bf4 <malloc>
 8007d70:	4602      	mov	r2, r0
 8007d72:	61e0      	str	r0, [r4, #28]
 8007d74:	b920      	cbnz	r0, 8007d80 <_Balloc+0x20>
 8007d76:	4b18      	ldr	r3, [pc, #96]	@ (8007dd8 <_Balloc+0x78>)
 8007d78:	4818      	ldr	r0, [pc, #96]	@ (8007ddc <_Balloc+0x7c>)
 8007d7a:	216b      	movs	r1, #107	@ 0x6b
 8007d7c:	f000 fe12 	bl	80089a4 <__assert_func>
 8007d80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d84:	6006      	str	r6, [r0, #0]
 8007d86:	60c6      	str	r6, [r0, #12]
 8007d88:	69e6      	ldr	r6, [r4, #28]
 8007d8a:	68f3      	ldr	r3, [r6, #12]
 8007d8c:	b183      	cbz	r3, 8007db0 <_Balloc+0x50>
 8007d8e:	69e3      	ldr	r3, [r4, #28]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d96:	b9b8      	cbnz	r0, 8007dc8 <_Balloc+0x68>
 8007d98:	2101      	movs	r1, #1
 8007d9a:	fa01 f605 	lsl.w	r6, r1, r5
 8007d9e:	1d72      	adds	r2, r6, #5
 8007da0:	0092      	lsls	r2, r2, #2
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 fe1c 	bl	80089e0 <_calloc_r>
 8007da8:	b160      	cbz	r0, 8007dc4 <_Balloc+0x64>
 8007daa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dae:	e00e      	b.n	8007dce <_Balloc+0x6e>
 8007db0:	2221      	movs	r2, #33	@ 0x21
 8007db2:	2104      	movs	r1, #4
 8007db4:	4620      	mov	r0, r4
 8007db6:	f000 fe13 	bl	80089e0 <_calloc_r>
 8007dba:	69e3      	ldr	r3, [r4, #28]
 8007dbc:	60f0      	str	r0, [r6, #12]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e4      	bne.n	8007d8e <_Balloc+0x2e>
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	6802      	ldr	r2, [r0, #0]
 8007dca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007dd4:	e7f7      	b.n	8007dc6 <_Balloc+0x66>
 8007dd6:	bf00      	nop
 8007dd8:	08008da9 	.word	0x08008da9
 8007ddc:	08008e29 	.word	0x08008e29

08007de0 <_Bfree>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	69c6      	ldr	r6, [r0, #28]
 8007de4:	4605      	mov	r5, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	b976      	cbnz	r6, 8007e08 <_Bfree+0x28>
 8007dea:	2010      	movs	r0, #16
 8007dec:	f7ff ff02 	bl	8007bf4 <malloc>
 8007df0:	4602      	mov	r2, r0
 8007df2:	61e8      	str	r0, [r5, #28]
 8007df4:	b920      	cbnz	r0, 8007e00 <_Bfree+0x20>
 8007df6:	4b09      	ldr	r3, [pc, #36]	@ (8007e1c <_Bfree+0x3c>)
 8007df8:	4809      	ldr	r0, [pc, #36]	@ (8007e20 <_Bfree+0x40>)
 8007dfa:	218f      	movs	r1, #143	@ 0x8f
 8007dfc:	f000 fdd2 	bl	80089a4 <__assert_func>
 8007e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e04:	6006      	str	r6, [r0, #0]
 8007e06:	60c6      	str	r6, [r0, #12]
 8007e08:	b13c      	cbz	r4, 8007e1a <_Bfree+0x3a>
 8007e0a:	69eb      	ldr	r3, [r5, #28]
 8007e0c:	6862      	ldr	r2, [r4, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e14:	6021      	str	r1, [r4, #0]
 8007e16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	08008da9 	.word	0x08008da9
 8007e20:	08008e29 	.word	0x08008e29

08007e24 <__multadd>:
 8007e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e28:	690d      	ldr	r5, [r1, #16]
 8007e2a:	4607      	mov	r7, r0
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	461e      	mov	r6, r3
 8007e30:	f101 0c14 	add.w	ip, r1, #20
 8007e34:	2000      	movs	r0, #0
 8007e36:	f8dc 3000 	ldr.w	r3, [ip]
 8007e3a:	b299      	uxth	r1, r3
 8007e3c:	fb02 6101 	mla	r1, r2, r1, r6
 8007e40:	0c1e      	lsrs	r6, r3, #16
 8007e42:	0c0b      	lsrs	r3, r1, #16
 8007e44:	fb02 3306 	mla	r3, r2, r6, r3
 8007e48:	b289      	uxth	r1, r1
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e50:	4285      	cmp	r5, r0
 8007e52:	f84c 1b04 	str.w	r1, [ip], #4
 8007e56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e5a:	dcec      	bgt.n	8007e36 <__multadd+0x12>
 8007e5c:	b30e      	cbz	r6, 8007ea2 <__multadd+0x7e>
 8007e5e:	68a3      	ldr	r3, [r4, #8]
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	dc19      	bgt.n	8007e98 <__multadd+0x74>
 8007e64:	6861      	ldr	r1, [r4, #4]
 8007e66:	4638      	mov	r0, r7
 8007e68:	3101      	adds	r1, #1
 8007e6a:	f7ff ff79 	bl	8007d60 <_Balloc>
 8007e6e:	4680      	mov	r8, r0
 8007e70:	b928      	cbnz	r0, 8007e7e <__multadd+0x5a>
 8007e72:	4602      	mov	r2, r0
 8007e74:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea8 <__multadd+0x84>)
 8007e76:	480d      	ldr	r0, [pc, #52]	@ (8007eac <__multadd+0x88>)
 8007e78:	21ba      	movs	r1, #186	@ 0xba
 8007e7a:	f000 fd93 	bl	80089a4 <__assert_func>
 8007e7e:	6922      	ldr	r2, [r4, #16]
 8007e80:	3202      	adds	r2, #2
 8007e82:	f104 010c 	add.w	r1, r4, #12
 8007e86:	0092      	lsls	r2, r2, #2
 8007e88:	300c      	adds	r0, #12
 8007e8a:	f000 fd7d 	bl	8008988 <memcpy>
 8007e8e:	4621      	mov	r1, r4
 8007e90:	4638      	mov	r0, r7
 8007e92:	f7ff ffa5 	bl	8007de0 <_Bfree>
 8007e96:	4644      	mov	r4, r8
 8007e98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e9c:	3501      	adds	r5, #1
 8007e9e:	615e      	str	r6, [r3, #20]
 8007ea0:	6125      	str	r5, [r4, #16]
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea8:	08008e18 	.word	0x08008e18
 8007eac:	08008e29 	.word	0x08008e29

08007eb0 <__hi0bits>:
 8007eb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	bf36      	itet	cc
 8007eb8:	0403      	lslcc	r3, r0, #16
 8007eba:	2000      	movcs	r0, #0
 8007ebc:	2010      	movcc	r0, #16
 8007ebe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ec2:	bf3c      	itt	cc
 8007ec4:	021b      	lslcc	r3, r3, #8
 8007ec6:	3008      	addcc	r0, #8
 8007ec8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ecc:	bf3c      	itt	cc
 8007ece:	011b      	lslcc	r3, r3, #4
 8007ed0:	3004      	addcc	r0, #4
 8007ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ed6:	bf3c      	itt	cc
 8007ed8:	009b      	lslcc	r3, r3, #2
 8007eda:	3002      	addcc	r0, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	db05      	blt.n	8007eec <__hi0bits+0x3c>
 8007ee0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ee4:	f100 0001 	add.w	r0, r0, #1
 8007ee8:	bf08      	it	eq
 8007eea:	2020      	moveq	r0, #32
 8007eec:	4770      	bx	lr

08007eee <__lo0bits>:
 8007eee:	6803      	ldr	r3, [r0, #0]
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	f013 0007 	ands.w	r0, r3, #7
 8007ef6:	d00b      	beq.n	8007f10 <__lo0bits+0x22>
 8007ef8:	07d9      	lsls	r1, r3, #31
 8007efa:	d421      	bmi.n	8007f40 <__lo0bits+0x52>
 8007efc:	0798      	lsls	r0, r3, #30
 8007efe:	bf49      	itett	mi
 8007f00:	085b      	lsrmi	r3, r3, #1
 8007f02:	089b      	lsrpl	r3, r3, #2
 8007f04:	2001      	movmi	r0, #1
 8007f06:	6013      	strmi	r3, [r2, #0]
 8007f08:	bf5c      	itt	pl
 8007f0a:	6013      	strpl	r3, [r2, #0]
 8007f0c:	2002      	movpl	r0, #2
 8007f0e:	4770      	bx	lr
 8007f10:	b299      	uxth	r1, r3
 8007f12:	b909      	cbnz	r1, 8007f18 <__lo0bits+0x2a>
 8007f14:	0c1b      	lsrs	r3, r3, #16
 8007f16:	2010      	movs	r0, #16
 8007f18:	b2d9      	uxtb	r1, r3
 8007f1a:	b909      	cbnz	r1, 8007f20 <__lo0bits+0x32>
 8007f1c:	3008      	adds	r0, #8
 8007f1e:	0a1b      	lsrs	r3, r3, #8
 8007f20:	0719      	lsls	r1, r3, #28
 8007f22:	bf04      	itt	eq
 8007f24:	091b      	lsreq	r3, r3, #4
 8007f26:	3004      	addeq	r0, #4
 8007f28:	0799      	lsls	r1, r3, #30
 8007f2a:	bf04      	itt	eq
 8007f2c:	089b      	lsreq	r3, r3, #2
 8007f2e:	3002      	addeq	r0, #2
 8007f30:	07d9      	lsls	r1, r3, #31
 8007f32:	d403      	bmi.n	8007f3c <__lo0bits+0x4e>
 8007f34:	085b      	lsrs	r3, r3, #1
 8007f36:	f100 0001 	add.w	r0, r0, #1
 8007f3a:	d003      	beq.n	8007f44 <__lo0bits+0x56>
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	4770      	bx	lr
 8007f40:	2000      	movs	r0, #0
 8007f42:	4770      	bx	lr
 8007f44:	2020      	movs	r0, #32
 8007f46:	4770      	bx	lr

08007f48 <__i2b>:
 8007f48:	b510      	push	{r4, lr}
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	f7ff ff07 	bl	8007d60 <_Balloc>
 8007f52:	4602      	mov	r2, r0
 8007f54:	b928      	cbnz	r0, 8007f62 <__i2b+0x1a>
 8007f56:	4b05      	ldr	r3, [pc, #20]	@ (8007f6c <__i2b+0x24>)
 8007f58:	4805      	ldr	r0, [pc, #20]	@ (8007f70 <__i2b+0x28>)
 8007f5a:	f240 1145 	movw	r1, #325	@ 0x145
 8007f5e:	f000 fd21 	bl	80089a4 <__assert_func>
 8007f62:	2301      	movs	r3, #1
 8007f64:	6144      	str	r4, [r0, #20]
 8007f66:	6103      	str	r3, [r0, #16]
 8007f68:	bd10      	pop	{r4, pc}
 8007f6a:	bf00      	nop
 8007f6c:	08008e18 	.word	0x08008e18
 8007f70:	08008e29 	.word	0x08008e29

08007f74 <__multiply>:
 8007f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f78:	4614      	mov	r4, r2
 8007f7a:	690a      	ldr	r2, [r1, #16]
 8007f7c:	6923      	ldr	r3, [r4, #16]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	bfa8      	it	ge
 8007f82:	4623      	movge	r3, r4
 8007f84:	460f      	mov	r7, r1
 8007f86:	bfa4      	itt	ge
 8007f88:	460c      	movge	r4, r1
 8007f8a:	461f      	movge	r7, r3
 8007f8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007f90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007f94:	68a3      	ldr	r3, [r4, #8]
 8007f96:	6861      	ldr	r1, [r4, #4]
 8007f98:	eb0a 0609 	add.w	r6, sl, r9
 8007f9c:	42b3      	cmp	r3, r6
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	bfb8      	it	lt
 8007fa2:	3101      	addlt	r1, #1
 8007fa4:	f7ff fedc 	bl	8007d60 <_Balloc>
 8007fa8:	b930      	cbnz	r0, 8007fb8 <__multiply+0x44>
 8007faa:	4602      	mov	r2, r0
 8007fac:	4b44      	ldr	r3, [pc, #272]	@ (80080c0 <__multiply+0x14c>)
 8007fae:	4845      	ldr	r0, [pc, #276]	@ (80080c4 <__multiply+0x150>)
 8007fb0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007fb4:	f000 fcf6 	bl	80089a4 <__assert_func>
 8007fb8:	f100 0514 	add.w	r5, r0, #20
 8007fbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007fc0:	462b      	mov	r3, r5
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	4543      	cmp	r3, r8
 8007fc6:	d321      	bcc.n	800800c <__multiply+0x98>
 8007fc8:	f107 0114 	add.w	r1, r7, #20
 8007fcc:	f104 0214 	add.w	r2, r4, #20
 8007fd0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007fd4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007fd8:	9302      	str	r3, [sp, #8]
 8007fda:	1b13      	subs	r3, r2, r4
 8007fdc:	3b15      	subs	r3, #21
 8007fde:	f023 0303 	bic.w	r3, r3, #3
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	f104 0715 	add.w	r7, r4, #21
 8007fe8:	42ba      	cmp	r2, r7
 8007fea:	bf38      	it	cc
 8007fec:	2304      	movcc	r3, #4
 8007fee:	9301      	str	r3, [sp, #4]
 8007ff0:	9b02      	ldr	r3, [sp, #8]
 8007ff2:	9103      	str	r1, [sp, #12]
 8007ff4:	428b      	cmp	r3, r1
 8007ff6:	d80c      	bhi.n	8008012 <__multiply+0x9e>
 8007ff8:	2e00      	cmp	r6, #0
 8007ffa:	dd03      	ble.n	8008004 <__multiply+0x90>
 8007ffc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008000:	2b00      	cmp	r3, #0
 8008002:	d05b      	beq.n	80080bc <__multiply+0x148>
 8008004:	6106      	str	r6, [r0, #16]
 8008006:	b005      	add	sp, #20
 8008008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800c:	f843 2b04 	str.w	r2, [r3], #4
 8008010:	e7d8      	b.n	8007fc4 <__multiply+0x50>
 8008012:	f8b1 a000 	ldrh.w	sl, [r1]
 8008016:	f1ba 0f00 	cmp.w	sl, #0
 800801a:	d024      	beq.n	8008066 <__multiply+0xf2>
 800801c:	f104 0e14 	add.w	lr, r4, #20
 8008020:	46a9      	mov	r9, r5
 8008022:	f04f 0c00 	mov.w	ip, #0
 8008026:	f85e 7b04 	ldr.w	r7, [lr], #4
 800802a:	f8d9 3000 	ldr.w	r3, [r9]
 800802e:	fa1f fb87 	uxth.w	fp, r7
 8008032:	b29b      	uxth	r3, r3
 8008034:	fb0a 330b 	mla	r3, sl, fp, r3
 8008038:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800803c:	f8d9 7000 	ldr.w	r7, [r9]
 8008040:	4463      	add	r3, ip
 8008042:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008046:	fb0a c70b 	mla	r7, sl, fp, ip
 800804a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800804e:	b29b      	uxth	r3, r3
 8008050:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008054:	4572      	cmp	r2, lr
 8008056:	f849 3b04 	str.w	r3, [r9], #4
 800805a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800805e:	d8e2      	bhi.n	8008026 <__multiply+0xb2>
 8008060:	9b01      	ldr	r3, [sp, #4]
 8008062:	f845 c003 	str.w	ip, [r5, r3]
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800806c:	3104      	adds	r1, #4
 800806e:	f1b9 0f00 	cmp.w	r9, #0
 8008072:	d021      	beq.n	80080b8 <__multiply+0x144>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	f104 0c14 	add.w	ip, r4, #20
 800807a:	46ae      	mov	lr, r5
 800807c:	f04f 0a00 	mov.w	sl, #0
 8008080:	f8bc b000 	ldrh.w	fp, [ip]
 8008084:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008088:	fb09 770b 	mla	r7, r9, fp, r7
 800808c:	4457      	add	r7, sl
 800808e:	b29b      	uxth	r3, r3
 8008090:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008094:	f84e 3b04 	str.w	r3, [lr], #4
 8008098:	f85c 3b04 	ldr.w	r3, [ip], #4
 800809c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080a0:	f8be 3000 	ldrh.w	r3, [lr]
 80080a4:	fb09 330a 	mla	r3, r9, sl, r3
 80080a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80080ac:	4562      	cmp	r2, ip
 80080ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080b2:	d8e5      	bhi.n	8008080 <__multiply+0x10c>
 80080b4:	9f01      	ldr	r7, [sp, #4]
 80080b6:	51eb      	str	r3, [r5, r7]
 80080b8:	3504      	adds	r5, #4
 80080ba:	e799      	b.n	8007ff0 <__multiply+0x7c>
 80080bc:	3e01      	subs	r6, #1
 80080be:	e79b      	b.n	8007ff8 <__multiply+0x84>
 80080c0:	08008e18 	.word	0x08008e18
 80080c4:	08008e29 	.word	0x08008e29

080080c8 <__pow5mult>:
 80080c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080cc:	4615      	mov	r5, r2
 80080ce:	f012 0203 	ands.w	r2, r2, #3
 80080d2:	4607      	mov	r7, r0
 80080d4:	460e      	mov	r6, r1
 80080d6:	d007      	beq.n	80080e8 <__pow5mult+0x20>
 80080d8:	4c25      	ldr	r4, [pc, #148]	@ (8008170 <__pow5mult+0xa8>)
 80080da:	3a01      	subs	r2, #1
 80080dc:	2300      	movs	r3, #0
 80080de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080e2:	f7ff fe9f 	bl	8007e24 <__multadd>
 80080e6:	4606      	mov	r6, r0
 80080e8:	10ad      	asrs	r5, r5, #2
 80080ea:	d03d      	beq.n	8008168 <__pow5mult+0xa0>
 80080ec:	69fc      	ldr	r4, [r7, #28]
 80080ee:	b97c      	cbnz	r4, 8008110 <__pow5mult+0x48>
 80080f0:	2010      	movs	r0, #16
 80080f2:	f7ff fd7f 	bl	8007bf4 <malloc>
 80080f6:	4602      	mov	r2, r0
 80080f8:	61f8      	str	r0, [r7, #28]
 80080fa:	b928      	cbnz	r0, 8008108 <__pow5mult+0x40>
 80080fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008174 <__pow5mult+0xac>)
 80080fe:	481e      	ldr	r0, [pc, #120]	@ (8008178 <__pow5mult+0xb0>)
 8008100:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008104:	f000 fc4e 	bl	80089a4 <__assert_func>
 8008108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800810c:	6004      	str	r4, [r0, #0]
 800810e:	60c4      	str	r4, [r0, #12]
 8008110:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008118:	b94c      	cbnz	r4, 800812e <__pow5mult+0x66>
 800811a:	f240 2171 	movw	r1, #625	@ 0x271
 800811e:	4638      	mov	r0, r7
 8008120:	f7ff ff12 	bl	8007f48 <__i2b>
 8008124:	2300      	movs	r3, #0
 8008126:	f8c8 0008 	str.w	r0, [r8, #8]
 800812a:	4604      	mov	r4, r0
 800812c:	6003      	str	r3, [r0, #0]
 800812e:	f04f 0900 	mov.w	r9, #0
 8008132:	07eb      	lsls	r3, r5, #31
 8008134:	d50a      	bpl.n	800814c <__pow5mult+0x84>
 8008136:	4631      	mov	r1, r6
 8008138:	4622      	mov	r2, r4
 800813a:	4638      	mov	r0, r7
 800813c:	f7ff ff1a 	bl	8007f74 <__multiply>
 8008140:	4631      	mov	r1, r6
 8008142:	4680      	mov	r8, r0
 8008144:	4638      	mov	r0, r7
 8008146:	f7ff fe4b 	bl	8007de0 <_Bfree>
 800814a:	4646      	mov	r6, r8
 800814c:	106d      	asrs	r5, r5, #1
 800814e:	d00b      	beq.n	8008168 <__pow5mult+0xa0>
 8008150:	6820      	ldr	r0, [r4, #0]
 8008152:	b938      	cbnz	r0, 8008164 <__pow5mult+0x9c>
 8008154:	4622      	mov	r2, r4
 8008156:	4621      	mov	r1, r4
 8008158:	4638      	mov	r0, r7
 800815a:	f7ff ff0b 	bl	8007f74 <__multiply>
 800815e:	6020      	str	r0, [r4, #0]
 8008160:	f8c0 9000 	str.w	r9, [r0]
 8008164:	4604      	mov	r4, r0
 8008166:	e7e4      	b.n	8008132 <__pow5mult+0x6a>
 8008168:	4630      	mov	r0, r6
 800816a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800816e:	bf00      	nop
 8008170:	08008e84 	.word	0x08008e84
 8008174:	08008da9 	.word	0x08008da9
 8008178:	08008e29 	.word	0x08008e29

0800817c <__lshift>:
 800817c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	460c      	mov	r4, r1
 8008182:	6849      	ldr	r1, [r1, #4]
 8008184:	6923      	ldr	r3, [r4, #16]
 8008186:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800818a:	68a3      	ldr	r3, [r4, #8]
 800818c:	4607      	mov	r7, r0
 800818e:	4691      	mov	r9, r2
 8008190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008194:	f108 0601 	add.w	r6, r8, #1
 8008198:	42b3      	cmp	r3, r6
 800819a:	db0b      	blt.n	80081b4 <__lshift+0x38>
 800819c:	4638      	mov	r0, r7
 800819e:	f7ff fddf 	bl	8007d60 <_Balloc>
 80081a2:	4605      	mov	r5, r0
 80081a4:	b948      	cbnz	r0, 80081ba <__lshift+0x3e>
 80081a6:	4602      	mov	r2, r0
 80081a8:	4b28      	ldr	r3, [pc, #160]	@ (800824c <__lshift+0xd0>)
 80081aa:	4829      	ldr	r0, [pc, #164]	@ (8008250 <__lshift+0xd4>)
 80081ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80081b0:	f000 fbf8 	bl	80089a4 <__assert_func>
 80081b4:	3101      	adds	r1, #1
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	e7ee      	b.n	8008198 <__lshift+0x1c>
 80081ba:	2300      	movs	r3, #0
 80081bc:	f100 0114 	add.w	r1, r0, #20
 80081c0:	f100 0210 	add.w	r2, r0, #16
 80081c4:	4618      	mov	r0, r3
 80081c6:	4553      	cmp	r3, sl
 80081c8:	db33      	blt.n	8008232 <__lshift+0xb6>
 80081ca:	6920      	ldr	r0, [r4, #16]
 80081cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081d0:	f104 0314 	add.w	r3, r4, #20
 80081d4:	f019 091f 	ands.w	r9, r9, #31
 80081d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081e0:	d02b      	beq.n	800823a <__lshift+0xbe>
 80081e2:	f1c9 0e20 	rsb	lr, r9, #32
 80081e6:	468a      	mov	sl, r1
 80081e8:	2200      	movs	r2, #0
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	fa00 f009 	lsl.w	r0, r0, r9
 80081f0:	4310      	orrs	r0, r2
 80081f2:	f84a 0b04 	str.w	r0, [sl], #4
 80081f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081fa:	459c      	cmp	ip, r3
 80081fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008200:	d8f3      	bhi.n	80081ea <__lshift+0x6e>
 8008202:	ebac 0304 	sub.w	r3, ip, r4
 8008206:	3b15      	subs	r3, #21
 8008208:	f023 0303 	bic.w	r3, r3, #3
 800820c:	3304      	adds	r3, #4
 800820e:	f104 0015 	add.w	r0, r4, #21
 8008212:	4584      	cmp	ip, r0
 8008214:	bf38      	it	cc
 8008216:	2304      	movcc	r3, #4
 8008218:	50ca      	str	r2, [r1, r3]
 800821a:	b10a      	cbz	r2, 8008220 <__lshift+0xa4>
 800821c:	f108 0602 	add.w	r6, r8, #2
 8008220:	3e01      	subs	r6, #1
 8008222:	4638      	mov	r0, r7
 8008224:	612e      	str	r6, [r5, #16]
 8008226:	4621      	mov	r1, r4
 8008228:	f7ff fdda 	bl	8007de0 <_Bfree>
 800822c:	4628      	mov	r0, r5
 800822e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008232:	f842 0f04 	str.w	r0, [r2, #4]!
 8008236:	3301      	adds	r3, #1
 8008238:	e7c5      	b.n	80081c6 <__lshift+0x4a>
 800823a:	3904      	subs	r1, #4
 800823c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008240:	f841 2f04 	str.w	r2, [r1, #4]!
 8008244:	459c      	cmp	ip, r3
 8008246:	d8f9      	bhi.n	800823c <__lshift+0xc0>
 8008248:	e7ea      	b.n	8008220 <__lshift+0xa4>
 800824a:	bf00      	nop
 800824c:	08008e18 	.word	0x08008e18
 8008250:	08008e29 	.word	0x08008e29

08008254 <__mcmp>:
 8008254:	690a      	ldr	r2, [r1, #16]
 8008256:	4603      	mov	r3, r0
 8008258:	6900      	ldr	r0, [r0, #16]
 800825a:	1a80      	subs	r0, r0, r2
 800825c:	b530      	push	{r4, r5, lr}
 800825e:	d10e      	bne.n	800827e <__mcmp+0x2a>
 8008260:	3314      	adds	r3, #20
 8008262:	3114      	adds	r1, #20
 8008264:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008268:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800826c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008270:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008274:	4295      	cmp	r5, r2
 8008276:	d003      	beq.n	8008280 <__mcmp+0x2c>
 8008278:	d205      	bcs.n	8008286 <__mcmp+0x32>
 800827a:	f04f 30ff 	mov.w	r0, #4294967295
 800827e:	bd30      	pop	{r4, r5, pc}
 8008280:	42a3      	cmp	r3, r4
 8008282:	d3f3      	bcc.n	800826c <__mcmp+0x18>
 8008284:	e7fb      	b.n	800827e <__mcmp+0x2a>
 8008286:	2001      	movs	r0, #1
 8008288:	e7f9      	b.n	800827e <__mcmp+0x2a>
	...

0800828c <__mdiff>:
 800828c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	4689      	mov	r9, r1
 8008292:	4606      	mov	r6, r0
 8008294:	4611      	mov	r1, r2
 8008296:	4648      	mov	r0, r9
 8008298:	4614      	mov	r4, r2
 800829a:	f7ff ffdb 	bl	8008254 <__mcmp>
 800829e:	1e05      	subs	r5, r0, #0
 80082a0:	d112      	bne.n	80082c8 <__mdiff+0x3c>
 80082a2:	4629      	mov	r1, r5
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff fd5b 	bl	8007d60 <_Balloc>
 80082aa:	4602      	mov	r2, r0
 80082ac:	b928      	cbnz	r0, 80082ba <__mdiff+0x2e>
 80082ae:	4b3f      	ldr	r3, [pc, #252]	@ (80083ac <__mdiff+0x120>)
 80082b0:	f240 2137 	movw	r1, #567	@ 0x237
 80082b4:	483e      	ldr	r0, [pc, #248]	@ (80083b0 <__mdiff+0x124>)
 80082b6:	f000 fb75 	bl	80089a4 <__assert_func>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082c0:	4610      	mov	r0, r2
 80082c2:	b003      	add	sp, #12
 80082c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c8:	bfbc      	itt	lt
 80082ca:	464b      	movlt	r3, r9
 80082cc:	46a1      	movlt	r9, r4
 80082ce:	4630      	mov	r0, r6
 80082d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80082d4:	bfba      	itte	lt
 80082d6:	461c      	movlt	r4, r3
 80082d8:	2501      	movlt	r5, #1
 80082da:	2500      	movge	r5, #0
 80082dc:	f7ff fd40 	bl	8007d60 <_Balloc>
 80082e0:	4602      	mov	r2, r0
 80082e2:	b918      	cbnz	r0, 80082ec <__mdiff+0x60>
 80082e4:	4b31      	ldr	r3, [pc, #196]	@ (80083ac <__mdiff+0x120>)
 80082e6:	f240 2145 	movw	r1, #581	@ 0x245
 80082ea:	e7e3      	b.n	80082b4 <__mdiff+0x28>
 80082ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80082f0:	6926      	ldr	r6, [r4, #16]
 80082f2:	60c5      	str	r5, [r0, #12]
 80082f4:	f109 0310 	add.w	r3, r9, #16
 80082f8:	f109 0514 	add.w	r5, r9, #20
 80082fc:	f104 0e14 	add.w	lr, r4, #20
 8008300:	f100 0b14 	add.w	fp, r0, #20
 8008304:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008308:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	46d9      	mov	r9, fp
 8008310:	f04f 0c00 	mov.w	ip, #0
 8008314:	9b01      	ldr	r3, [sp, #4]
 8008316:	f85e 0b04 	ldr.w	r0, [lr], #4
 800831a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	fa1f f38a 	uxth.w	r3, sl
 8008324:	4619      	mov	r1, r3
 8008326:	b283      	uxth	r3, r0
 8008328:	1acb      	subs	r3, r1, r3
 800832a:	0c00      	lsrs	r0, r0, #16
 800832c:	4463      	add	r3, ip
 800832e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008332:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008336:	b29b      	uxth	r3, r3
 8008338:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800833c:	4576      	cmp	r6, lr
 800833e:	f849 3b04 	str.w	r3, [r9], #4
 8008342:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008346:	d8e5      	bhi.n	8008314 <__mdiff+0x88>
 8008348:	1b33      	subs	r3, r6, r4
 800834a:	3b15      	subs	r3, #21
 800834c:	f023 0303 	bic.w	r3, r3, #3
 8008350:	3415      	adds	r4, #21
 8008352:	3304      	adds	r3, #4
 8008354:	42a6      	cmp	r6, r4
 8008356:	bf38      	it	cc
 8008358:	2304      	movcc	r3, #4
 800835a:	441d      	add	r5, r3
 800835c:	445b      	add	r3, fp
 800835e:	461e      	mov	r6, r3
 8008360:	462c      	mov	r4, r5
 8008362:	4544      	cmp	r4, r8
 8008364:	d30e      	bcc.n	8008384 <__mdiff+0xf8>
 8008366:	f108 0103 	add.w	r1, r8, #3
 800836a:	1b49      	subs	r1, r1, r5
 800836c:	f021 0103 	bic.w	r1, r1, #3
 8008370:	3d03      	subs	r5, #3
 8008372:	45a8      	cmp	r8, r5
 8008374:	bf38      	it	cc
 8008376:	2100      	movcc	r1, #0
 8008378:	440b      	add	r3, r1
 800837a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800837e:	b191      	cbz	r1, 80083a6 <__mdiff+0x11a>
 8008380:	6117      	str	r7, [r2, #16]
 8008382:	e79d      	b.n	80082c0 <__mdiff+0x34>
 8008384:	f854 1b04 	ldr.w	r1, [r4], #4
 8008388:	46e6      	mov	lr, ip
 800838a:	0c08      	lsrs	r0, r1, #16
 800838c:	fa1c fc81 	uxtah	ip, ip, r1
 8008390:	4471      	add	r1, lr
 8008392:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008396:	b289      	uxth	r1, r1
 8008398:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800839c:	f846 1b04 	str.w	r1, [r6], #4
 80083a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083a4:	e7dd      	b.n	8008362 <__mdiff+0xd6>
 80083a6:	3f01      	subs	r7, #1
 80083a8:	e7e7      	b.n	800837a <__mdiff+0xee>
 80083aa:	bf00      	nop
 80083ac:	08008e18 	.word	0x08008e18
 80083b0:	08008e29 	.word	0x08008e29

080083b4 <__d2b>:
 80083b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083b8:	460f      	mov	r7, r1
 80083ba:	2101      	movs	r1, #1
 80083bc:	ec59 8b10 	vmov	r8, r9, d0
 80083c0:	4616      	mov	r6, r2
 80083c2:	f7ff fccd 	bl	8007d60 <_Balloc>
 80083c6:	4604      	mov	r4, r0
 80083c8:	b930      	cbnz	r0, 80083d8 <__d2b+0x24>
 80083ca:	4602      	mov	r2, r0
 80083cc:	4b23      	ldr	r3, [pc, #140]	@ (800845c <__d2b+0xa8>)
 80083ce:	4824      	ldr	r0, [pc, #144]	@ (8008460 <__d2b+0xac>)
 80083d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80083d4:	f000 fae6 	bl	80089a4 <__assert_func>
 80083d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083e0:	b10d      	cbz	r5, 80083e6 <__d2b+0x32>
 80083e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	f1b8 0300 	subs.w	r3, r8, #0
 80083ec:	d023      	beq.n	8008436 <__d2b+0x82>
 80083ee:	4668      	mov	r0, sp
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	f7ff fd7c 	bl	8007eee <__lo0bits>
 80083f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083fa:	b1d0      	cbz	r0, 8008432 <__d2b+0x7e>
 80083fc:	f1c0 0320 	rsb	r3, r0, #32
 8008400:	fa02 f303 	lsl.w	r3, r2, r3
 8008404:	430b      	orrs	r3, r1
 8008406:	40c2      	lsrs	r2, r0
 8008408:	6163      	str	r3, [r4, #20]
 800840a:	9201      	str	r2, [sp, #4]
 800840c:	9b01      	ldr	r3, [sp, #4]
 800840e:	61a3      	str	r3, [r4, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	bf0c      	ite	eq
 8008414:	2201      	moveq	r2, #1
 8008416:	2202      	movne	r2, #2
 8008418:	6122      	str	r2, [r4, #16]
 800841a:	b1a5      	cbz	r5, 8008446 <__d2b+0x92>
 800841c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008420:	4405      	add	r5, r0
 8008422:	603d      	str	r5, [r7, #0]
 8008424:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008428:	6030      	str	r0, [r6, #0]
 800842a:	4620      	mov	r0, r4
 800842c:	b003      	add	sp, #12
 800842e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008432:	6161      	str	r1, [r4, #20]
 8008434:	e7ea      	b.n	800840c <__d2b+0x58>
 8008436:	a801      	add	r0, sp, #4
 8008438:	f7ff fd59 	bl	8007eee <__lo0bits>
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	6163      	str	r3, [r4, #20]
 8008440:	3020      	adds	r0, #32
 8008442:	2201      	movs	r2, #1
 8008444:	e7e8      	b.n	8008418 <__d2b+0x64>
 8008446:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800844a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800844e:	6038      	str	r0, [r7, #0]
 8008450:	6918      	ldr	r0, [r3, #16]
 8008452:	f7ff fd2d 	bl	8007eb0 <__hi0bits>
 8008456:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800845a:	e7e5      	b.n	8008428 <__d2b+0x74>
 800845c:	08008e18 	.word	0x08008e18
 8008460:	08008e29 	.word	0x08008e29

08008464 <__sfputc_r>:
 8008464:	6893      	ldr	r3, [r2, #8]
 8008466:	3b01      	subs	r3, #1
 8008468:	2b00      	cmp	r3, #0
 800846a:	b410      	push	{r4}
 800846c:	6093      	str	r3, [r2, #8]
 800846e:	da08      	bge.n	8008482 <__sfputc_r+0x1e>
 8008470:	6994      	ldr	r4, [r2, #24]
 8008472:	42a3      	cmp	r3, r4
 8008474:	db01      	blt.n	800847a <__sfputc_r+0x16>
 8008476:	290a      	cmp	r1, #10
 8008478:	d103      	bne.n	8008482 <__sfputc_r+0x1e>
 800847a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800847e:	f000 b9df 	b.w	8008840 <__swbuf_r>
 8008482:	6813      	ldr	r3, [r2, #0]
 8008484:	1c58      	adds	r0, r3, #1
 8008486:	6010      	str	r0, [r2, #0]
 8008488:	7019      	strb	r1, [r3, #0]
 800848a:	4608      	mov	r0, r1
 800848c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008490:	4770      	bx	lr

08008492 <__sfputs_r>:
 8008492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008494:	4606      	mov	r6, r0
 8008496:	460f      	mov	r7, r1
 8008498:	4614      	mov	r4, r2
 800849a:	18d5      	adds	r5, r2, r3
 800849c:	42ac      	cmp	r4, r5
 800849e:	d101      	bne.n	80084a4 <__sfputs_r+0x12>
 80084a0:	2000      	movs	r0, #0
 80084a2:	e007      	b.n	80084b4 <__sfputs_r+0x22>
 80084a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a8:	463a      	mov	r2, r7
 80084aa:	4630      	mov	r0, r6
 80084ac:	f7ff ffda 	bl	8008464 <__sfputc_r>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d1f3      	bne.n	800849c <__sfputs_r+0xa>
 80084b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084b8 <_vfiprintf_r>:
 80084b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084bc:	460d      	mov	r5, r1
 80084be:	b09d      	sub	sp, #116	@ 0x74
 80084c0:	4614      	mov	r4, r2
 80084c2:	4698      	mov	r8, r3
 80084c4:	4606      	mov	r6, r0
 80084c6:	b118      	cbz	r0, 80084d0 <_vfiprintf_r+0x18>
 80084c8:	6a03      	ldr	r3, [r0, #32]
 80084ca:	b90b      	cbnz	r3, 80084d0 <_vfiprintf_r+0x18>
 80084cc:	f7fe fbf0 	bl	8006cb0 <__sinit>
 80084d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084d2:	07d9      	lsls	r1, r3, #31
 80084d4:	d405      	bmi.n	80084e2 <_vfiprintf_r+0x2a>
 80084d6:	89ab      	ldrh	r3, [r5, #12]
 80084d8:	059a      	lsls	r2, r3, #22
 80084da:	d402      	bmi.n	80084e2 <_vfiprintf_r+0x2a>
 80084dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084de:	f7fe fcf0 	bl	8006ec2 <__retarget_lock_acquire_recursive>
 80084e2:	89ab      	ldrh	r3, [r5, #12]
 80084e4:	071b      	lsls	r3, r3, #28
 80084e6:	d501      	bpl.n	80084ec <_vfiprintf_r+0x34>
 80084e8:	692b      	ldr	r3, [r5, #16]
 80084ea:	b99b      	cbnz	r3, 8008514 <_vfiprintf_r+0x5c>
 80084ec:	4629      	mov	r1, r5
 80084ee:	4630      	mov	r0, r6
 80084f0:	f000 f9e4 	bl	80088bc <__swsetup_r>
 80084f4:	b170      	cbz	r0, 8008514 <_vfiprintf_r+0x5c>
 80084f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084f8:	07dc      	lsls	r4, r3, #31
 80084fa:	d504      	bpl.n	8008506 <_vfiprintf_r+0x4e>
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	b01d      	add	sp, #116	@ 0x74
 8008502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008506:	89ab      	ldrh	r3, [r5, #12]
 8008508:	0598      	lsls	r0, r3, #22
 800850a:	d4f7      	bmi.n	80084fc <_vfiprintf_r+0x44>
 800850c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800850e:	f7fe fcd9 	bl	8006ec4 <__retarget_lock_release_recursive>
 8008512:	e7f3      	b.n	80084fc <_vfiprintf_r+0x44>
 8008514:	2300      	movs	r3, #0
 8008516:	9309      	str	r3, [sp, #36]	@ 0x24
 8008518:	2320      	movs	r3, #32
 800851a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800851e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008522:	2330      	movs	r3, #48	@ 0x30
 8008524:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80086d4 <_vfiprintf_r+0x21c>
 8008528:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800852c:	f04f 0901 	mov.w	r9, #1
 8008530:	4623      	mov	r3, r4
 8008532:	469a      	mov	sl, r3
 8008534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008538:	b10a      	cbz	r2, 800853e <_vfiprintf_r+0x86>
 800853a:	2a25      	cmp	r2, #37	@ 0x25
 800853c:	d1f9      	bne.n	8008532 <_vfiprintf_r+0x7a>
 800853e:	ebba 0b04 	subs.w	fp, sl, r4
 8008542:	d00b      	beq.n	800855c <_vfiprintf_r+0xa4>
 8008544:	465b      	mov	r3, fp
 8008546:	4622      	mov	r2, r4
 8008548:	4629      	mov	r1, r5
 800854a:	4630      	mov	r0, r6
 800854c:	f7ff ffa1 	bl	8008492 <__sfputs_r>
 8008550:	3001      	adds	r0, #1
 8008552:	f000 80a7 	beq.w	80086a4 <_vfiprintf_r+0x1ec>
 8008556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008558:	445a      	add	r2, fp
 800855a:	9209      	str	r2, [sp, #36]	@ 0x24
 800855c:	f89a 3000 	ldrb.w	r3, [sl]
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 809f 	beq.w	80086a4 <_vfiprintf_r+0x1ec>
 8008566:	2300      	movs	r3, #0
 8008568:	f04f 32ff 	mov.w	r2, #4294967295
 800856c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008570:	f10a 0a01 	add.w	sl, sl, #1
 8008574:	9304      	str	r3, [sp, #16]
 8008576:	9307      	str	r3, [sp, #28]
 8008578:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800857c:	931a      	str	r3, [sp, #104]	@ 0x68
 800857e:	4654      	mov	r4, sl
 8008580:	2205      	movs	r2, #5
 8008582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008586:	4853      	ldr	r0, [pc, #332]	@ (80086d4 <_vfiprintf_r+0x21c>)
 8008588:	f7f7 fe42 	bl	8000210 <memchr>
 800858c:	9a04      	ldr	r2, [sp, #16]
 800858e:	b9d8      	cbnz	r0, 80085c8 <_vfiprintf_r+0x110>
 8008590:	06d1      	lsls	r1, r2, #27
 8008592:	bf44      	itt	mi
 8008594:	2320      	movmi	r3, #32
 8008596:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800859a:	0713      	lsls	r3, r2, #28
 800859c:	bf44      	itt	mi
 800859e:	232b      	movmi	r3, #43	@ 0x2b
 80085a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085a4:	f89a 3000 	ldrb.w	r3, [sl]
 80085a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80085aa:	d015      	beq.n	80085d8 <_vfiprintf_r+0x120>
 80085ac:	9a07      	ldr	r2, [sp, #28]
 80085ae:	4654      	mov	r4, sl
 80085b0:	2000      	movs	r0, #0
 80085b2:	f04f 0c0a 	mov.w	ip, #10
 80085b6:	4621      	mov	r1, r4
 80085b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085bc:	3b30      	subs	r3, #48	@ 0x30
 80085be:	2b09      	cmp	r3, #9
 80085c0:	d94b      	bls.n	800865a <_vfiprintf_r+0x1a2>
 80085c2:	b1b0      	cbz	r0, 80085f2 <_vfiprintf_r+0x13a>
 80085c4:	9207      	str	r2, [sp, #28]
 80085c6:	e014      	b.n	80085f2 <_vfiprintf_r+0x13a>
 80085c8:	eba0 0308 	sub.w	r3, r0, r8
 80085cc:	fa09 f303 	lsl.w	r3, r9, r3
 80085d0:	4313      	orrs	r3, r2
 80085d2:	9304      	str	r3, [sp, #16]
 80085d4:	46a2      	mov	sl, r4
 80085d6:	e7d2      	b.n	800857e <_vfiprintf_r+0xc6>
 80085d8:	9b03      	ldr	r3, [sp, #12]
 80085da:	1d19      	adds	r1, r3, #4
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	9103      	str	r1, [sp, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	bfbb      	ittet	lt
 80085e4:	425b      	neglt	r3, r3
 80085e6:	f042 0202 	orrlt.w	r2, r2, #2
 80085ea:	9307      	strge	r3, [sp, #28]
 80085ec:	9307      	strlt	r3, [sp, #28]
 80085ee:	bfb8      	it	lt
 80085f0:	9204      	strlt	r2, [sp, #16]
 80085f2:	7823      	ldrb	r3, [r4, #0]
 80085f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80085f6:	d10a      	bne.n	800860e <_vfiprintf_r+0x156>
 80085f8:	7863      	ldrb	r3, [r4, #1]
 80085fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80085fc:	d132      	bne.n	8008664 <_vfiprintf_r+0x1ac>
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	1d1a      	adds	r2, r3, #4
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	9203      	str	r2, [sp, #12]
 8008606:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800860a:	3402      	adds	r4, #2
 800860c:	9305      	str	r3, [sp, #20]
 800860e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80086e4 <_vfiprintf_r+0x22c>
 8008612:	7821      	ldrb	r1, [r4, #0]
 8008614:	2203      	movs	r2, #3
 8008616:	4650      	mov	r0, sl
 8008618:	f7f7 fdfa 	bl	8000210 <memchr>
 800861c:	b138      	cbz	r0, 800862e <_vfiprintf_r+0x176>
 800861e:	9b04      	ldr	r3, [sp, #16]
 8008620:	eba0 000a 	sub.w	r0, r0, sl
 8008624:	2240      	movs	r2, #64	@ 0x40
 8008626:	4082      	lsls	r2, r0
 8008628:	4313      	orrs	r3, r2
 800862a:	3401      	adds	r4, #1
 800862c:	9304      	str	r3, [sp, #16]
 800862e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008632:	4829      	ldr	r0, [pc, #164]	@ (80086d8 <_vfiprintf_r+0x220>)
 8008634:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008638:	2206      	movs	r2, #6
 800863a:	f7f7 fde9 	bl	8000210 <memchr>
 800863e:	2800      	cmp	r0, #0
 8008640:	d03f      	beq.n	80086c2 <_vfiprintf_r+0x20a>
 8008642:	4b26      	ldr	r3, [pc, #152]	@ (80086dc <_vfiprintf_r+0x224>)
 8008644:	bb1b      	cbnz	r3, 800868e <_vfiprintf_r+0x1d6>
 8008646:	9b03      	ldr	r3, [sp, #12]
 8008648:	3307      	adds	r3, #7
 800864a:	f023 0307 	bic.w	r3, r3, #7
 800864e:	3308      	adds	r3, #8
 8008650:	9303      	str	r3, [sp, #12]
 8008652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008654:	443b      	add	r3, r7
 8008656:	9309      	str	r3, [sp, #36]	@ 0x24
 8008658:	e76a      	b.n	8008530 <_vfiprintf_r+0x78>
 800865a:	fb0c 3202 	mla	r2, ip, r2, r3
 800865e:	460c      	mov	r4, r1
 8008660:	2001      	movs	r0, #1
 8008662:	e7a8      	b.n	80085b6 <_vfiprintf_r+0xfe>
 8008664:	2300      	movs	r3, #0
 8008666:	3401      	adds	r4, #1
 8008668:	9305      	str	r3, [sp, #20]
 800866a:	4619      	mov	r1, r3
 800866c:	f04f 0c0a 	mov.w	ip, #10
 8008670:	4620      	mov	r0, r4
 8008672:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008676:	3a30      	subs	r2, #48	@ 0x30
 8008678:	2a09      	cmp	r2, #9
 800867a:	d903      	bls.n	8008684 <_vfiprintf_r+0x1cc>
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0c6      	beq.n	800860e <_vfiprintf_r+0x156>
 8008680:	9105      	str	r1, [sp, #20]
 8008682:	e7c4      	b.n	800860e <_vfiprintf_r+0x156>
 8008684:	fb0c 2101 	mla	r1, ip, r1, r2
 8008688:	4604      	mov	r4, r0
 800868a:	2301      	movs	r3, #1
 800868c:	e7f0      	b.n	8008670 <_vfiprintf_r+0x1b8>
 800868e:	ab03      	add	r3, sp, #12
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	462a      	mov	r2, r5
 8008694:	4b12      	ldr	r3, [pc, #72]	@ (80086e0 <_vfiprintf_r+0x228>)
 8008696:	a904      	add	r1, sp, #16
 8008698:	4630      	mov	r0, r6
 800869a:	f7fd fec5 	bl	8006428 <_printf_float>
 800869e:	4607      	mov	r7, r0
 80086a0:	1c78      	adds	r0, r7, #1
 80086a2:	d1d6      	bne.n	8008652 <_vfiprintf_r+0x19a>
 80086a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086a6:	07d9      	lsls	r1, r3, #31
 80086a8:	d405      	bmi.n	80086b6 <_vfiprintf_r+0x1fe>
 80086aa:	89ab      	ldrh	r3, [r5, #12]
 80086ac:	059a      	lsls	r2, r3, #22
 80086ae:	d402      	bmi.n	80086b6 <_vfiprintf_r+0x1fe>
 80086b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086b2:	f7fe fc07 	bl	8006ec4 <__retarget_lock_release_recursive>
 80086b6:	89ab      	ldrh	r3, [r5, #12]
 80086b8:	065b      	lsls	r3, r3, #25
 80086ba:	f53f af1f 	bmi.w	80084fc <_vfiprintf_r+0x44>
 80086be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086c0:	e71e      	b.n	8008500 <_vfiprintf_r+0x48>
 80086c2:	ab03      	add	r3, sp, #12
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	462a      	mov	r2, r5
 80086c8:	4b05      	ldr	r3, [pc, #20]	@ (80086e0 <_vfiprintf_r+0x228>)
 80086ca:	a904      	add	r1, sp, #16
 80086cc:	4630      	mov	r0, r6
 80086ce:	f7fe f943 	bl	8006958 <_printf_i>
 80086d2:	e7e4      	b.n	800869e <_vfiprintf_r+0x1e6>
 80086d4:	08008f80 	.word	0x08008f80
 80086d8:	08008f8a 	.word	0x08008f8a
 80086dc:	08006429 	.word	0x08006429
 80086e0:	08008493 	.word	0x08008493
 80086e4:	08008f86 	.word	0x08008f86

080086e8 <__sflush_r>:
 80086e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f0:	0716      	lsls	r6, r2, #28
 80086f2:	4605      	mov	r5, r0
 80086f4:	460c      	mov	r4, r1
 80086f6:	d454      	bmi.n	80087a2 <__sflush_r+0xba>
 80086f8:	684b      	ldr	r3, [r1, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dc02      	bgt.n	8008704 <__sflush_r+0x1c>
 80086fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008700:	2b00      	cmp	r3, #0
 8008702:	dd48      	ble.n	8008796 <__sflush_r+0xae>
 8008704:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008706:	2e00      	cmp	r6, #0
 8008708:	d045      	beq.n	8008796 <__sflush_r+0xae>
 800870a:	2300      	movs	r3, #0
 800870c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008710:	682f      	ldr	r7, [r5, #0]
 8008712:	6a21      	ldr	r1, [r4, #32]
 8008714:	602b      	str	r3, [r5, #0]
 8008716:	d030      	beq.n	800877a <__sflush_r+0x92>
 8008718:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	0759      	lsls	r1, r3, #29
 800871e:	d505      	bpl.n	800872c <__sflush_r+0x44>
 8008720:	6863      	ldr	r3, [r4, #4]
 8008722:	1ad2      	subs	r2, r2, r3
 8008724:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008726:	b10b      	cbz	r3, 800872c <__sflush_r+0x44>
 8008728:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800872a:	1ad2      	subs	r2, r2, r3
 800872c:	2300      	movs	r3, #0
 800872e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008730:	6a21      	ldr	r1, [r4, #32]
 8008732:	4628      	mov	r0, r5
 8008734:	47b0      	blx	r6
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	d106      	bne.n	800874a <__sflush_r+0x62>
 800873c:	6829      	ldr	r1, [r5, #0]
 800873e:	291d      	cmp	r1, #29
 8008740:	d82b      	bhi.n	800879a <__sflush_r+0xb2>
 8008742:	4a2a      	ldr	r2, [pc, #168]	@ (80087ec <__sflush_r+0x104>)
 8008744:	410a      	asrs	r2, r1
 8008746:	07d6      	lsls	r6, r2, #31
 8008748:	d427      	bmi.n	800879a <__sflush_r+0xb2>
 800874a:	2200      	movs	r2, #0
 800874c:	6062      	str	r2, [r4, #4]
 800874e:	04d9      	lsls	r1, r3, #19
 8008750:	6922      	ldr	r2, [r4, #16]
 8008752:	6022      	str	r2, [r4, #0]
 8008754:	d504      	bpl.n	8008760 <__sflush_r+0x78>
 8008756:	1c42      	adds	r2, r0, #1
 8008758:	d101      	bne.n	800875e <__sflush_r+0x76>
 800875a:	682b      	ldr	r3, [r5, #0]
 800875c:	b903      	cbnz	r3, 8008760 <__sflush_r+0x78>
 800875e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008762:	602f      	str	r7, [r5, #0]
 8008764:	b1b9      	cbz	r1, 8008796 <__sflush_r+0xae>
 8008766:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800876a:	4299      	cmp	r1, r3
 800876c:	d002      	beq.n	8008774 <__sflush_r+0x8c>
 800876e:	4628      	mov	r0, r5
 8008770:	f7ff f9f6 	bl	8007b60 <_free_r>
 8008774:	2300      	movs	r3, #0
 8008776:	6363      	str	r3, [r4, #52]	@ 0x34
 8008778:	e00d      	b.n	8008796 <__sflush_r+0xae>
 800877a:	2301      	movs	r3, #1
 800877c:	4628      	mov	r0, r5
 800877e:	47b0      	blx	r6
 8008780:	4602      	mov	r2, r0
 8008782:	1c50      	adds	r0, r2, #1
 8008784:	d1c9      	bne.n	800871a <__sflush_r+0x32>
 8008786:	682b      	ldr	r3, [r5, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d0c6      	beq.n	800871a <__sflush_r+0x32>
 800878c:	2b1d      	cmp	r3, #29
 800878e:	d001      	beq.n	8008794 <__sflush_r+0xac>
 8008790:	2b16      	cmp	r3, #22
 8008792:	d11e      	bne.n	80087d2 <__sflush_r+0xea>
 8008794:	602f      	str	r7, [r5, #0]
 8008796:	2000      	movs	r0, #0
 8008798:	e022      	b.n	80087e0 <__sflush_r+0xf8>
 800879a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800879e:	b21b      	sxth	r3, r3
 80087a0:	e01b      	b.n	80087da <__sflush_r+0xf2>
 80087a2:	690f      	ldr	r7, [r1, #16]
 80087a4:	2f00      	cmp	r7, #0
 80087a6:	d0f6      	beq.n	8008796 <__sflush_r+0xae>
 80087a8:	0793      	lsls	r3, r2, #30
 80087aa:	680e      	ldr	r6, [r1, #0]
 80087ac:	bf08      	it	eq
 80087ae:	694b      	ldreq	r3, [r1, #20]
 80087b0:	600f      	str	r7, [r1, #0]
 80087b2:	bf18      	it	ne
 80087b4:	2300      	movne	r3, #0
 80087b6:	eba6 0807 	sub.w	r8, r6, r7
 80087ba:	608b      	str	r3, [r1, #8]
 80087bc:	f1b8 0f00 	cmp.w	r8, #0
 80087c0:	dde9      	ble.n	8008796 <__sflush_r+0xae>
 80087c2:	6a21      	ldr	r1, [r4, #32]
 80087c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80087c6:	4643      	mov	r3, r8
 80087c8:	463a      	mov	r2, r7
 80087ca:	4628      	mov	r0, r5
 80087cc:	47b0      	blx	r6
 80087ce:	2800      	cmp	r0, #0
 80087d0:	dc08      	bgt.n	80087e4 <__sflush_r+0xfc>
 80087d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295
 80087e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e4:	4407      	add	r7, r0
 80087e6:	eba8 0800 	sub.w	r8, r8, r0
 80087ea:	e7e7      	b.n	80087bc <__sflush_r+0xd4>
 80087ec:	dfbffffe 	.word	0xdfbffffe

080087f0 <_fflush_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	690b      	ldr	r3, [r1, #16]
 80087f4:	4605      	mov	r5, r0
 80087f6:	460c      	mov	r4, r1
 80087f8:	b913      	cbnz	r3, 8008800 <_fflush_r+0x10>
 80087fa:	2500      	movs	r5, #0
 80087fc:	4628      	mov	r0, r5
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	b118      	cbz	r0, 800880a <_fflush_r+0x1a>
 8008802:	6a03      	ldr	r3, [r0, #32]
 8008804:	b90b      	cbnz	r3, 800880a <_fflush_r+0x1a>
 8008806:	f7fe fa53 	bl	8006cb0 <__sinit>
 800880a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0f3      	beq.n	80087fa <_fflush_r+0xa>
 8008812:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008814:	07d0      	lsls	r0, r2, #31
 8008816:	d404      	bmi.n	8008822 <_fflush_r+0x32>
 8008818:	0599      	lsls	r1, r3, #22
 800881a:	d402      	bmi.n	8008822 <_fflush_r+0x32>
 800881c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800881e:	f7fe fb50 	bl	8006ec2 <__retarget_lock_acquire_recursive>
 8008822:	4628      	mov	r0, r5
 8008824:	4621      	mov	r1, r4
 8008826:	f7ff ff5f 	bl	80086e8 <__sflush_r>
 800882a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800882c:	07da      	lsls	r2, r3, #31
 800882e:	4605      	mov	r5, r0
 8008830:	d4e4      	bmi.n	80087fc <_fflush_r+0xc>
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	059b      	lsls	r3, r3, #22
 8008836:	d4e1      	bmi.n	80087fc <_fflush_r+0xc>
 8008838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800883a:	f7fe fb43 	bl	8006ec4 <__retarget_lock_release_recursive>
 800883e:	e7dd      	b.n	80087fc <_fflush_r+0xc>

08008840 <__swbuf_r>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	460e      	mov	r6, r1
 8008844:	4614      	mov	r4, r2
 8008846:	4605      	mov	r5, r0
 8008848:	b118      	cbz	r0, 8008852 <__swbuf_r+0x12>
 800884a:	6a03      	ldr	r3, [r0, #32]
 800884c:	b90b      	cbnz	r3, 8008852 <__swbuf_r+0x12>
 800884e:	f7fe fa2f 	bl	8006cb0 <__sinit>
 8008852:	69a3      	ldr	r3, [r4, #24]
 8008854:	60a3      	str	r3, [r4, #8]
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	071a      	lsls	r2, r3, #28
 800885a:	d501      	bpl.n	8008860 <__swbuf_r+0x20>
 800885c:	6923      	ldr	r3, [r4, #16]
 800885e:	b943      	cbnz	r3, 8008872 <__swbuf_r+0x32>
 8008860:	4621      	mov	r1, r4
 8008862:	4628      	mov	r0, r5
 8008864:	f000 f82a 	bl	80088bc <__swsetup_r>
 8008868:	b118      	cbz	r0, 8008872 <__swbuf_r+0x32>
 800886a:	f04f 37ff 	mov.w	r7, #4294967295
 800886e:	4638      	mov	r0, r7
 8008870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	6922      	ldr	r2, [r4, #16]
 8008876:	1a98      	subs	r0, r3, r2
 8008878:	6963      	ldr	r3, [r4, #20]
 800887a:	b2f6      	uxtb	r6, r6
 800887c:	4283      	cmp	r3, r0
 800887e:	4637      	mov	r7, r6
 8008880:	dc05      	bgt.n	800888e <__swbuf_r+0x4e>
 8008882:	4621      	mov	r1, r4
 8008884:	4628      	mov	r0, r5
 8008886:	f7ff ffb3 	bl	80087f0 <_fflush_r>
 800888a:	2800      	cmp	r0, #0
 800888c:	d1ed      	bne.n	800886a <__swbuf_r+0x2a>
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	3b01      	subs	r3, #1
 8008892:	60a3      	str	r3, [r4, #8]
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	6022      	str	r2, [r4, #0]
 800889a:	701e      	strb	r6, [r3, #0]
 800889c:	6962      	ldr	r2, [r4, #20]
 800889e:	1c43      	adds	r3, r0, #1
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d004      	beq.n	80088ae <__swbuf_r+0x6e>
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	07db      	lsls	r3, r3, #31
 80088a8:	d5e1      	bpl.n	800886e <__swbuf_r+0x2e>
 80088aa:	2e0a      	cmp	r6, #10
 80088ac:	d1df      	bne.n	800886e <__swbuf_r+0x2e>
 80088ae:	4621      	mov	r1, r4
 80088b0:	4628      	mov	r0, r5
 80088b2:	f7ff ff9d 	bl	80087f0 <_fflush_r>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d0d9      	beq.n	800886e <__swbuf_r+0x2e>
 80088ba:	e7d6      	b.n	800886a <__swbuf_r+0x2a>

080088bc <__swsetup_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4b29      	ldr	r3, [pc, #164]	@ (8008964 <__swsetup_r+0xa8>)
 80088c0:	4605      	mov	r5, r0
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	460c      	mov	r4, r1
 80088c6:	b118      	cbz	r0, 80088d0 <__swsetup_r+0x14>
 80088c8:	6a03      	ldr	r3, [r0, #32]
 80088ca:	b90b      	cbnz	r3, 80088d0 <__swsetup_r+0x14>
 80088cc:	f7fe f9f0 	bl	8006cb0 <__sinit>
 80088d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d4:	0719      	lsls	r1, r3, #28
 80088d6:	d422      	bmi.n	800891e <__swsetup_r+0x62>
 80088d8:	06da      	lsls	r2, r3, #27
 80088da:	d407      	bmi.n	80088ec <__swsetup_r+0x30>
 80088dc:	2209      	movs	r2, #9
 80088de:	602a      	str	r2, [r5, #0]
 80088e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088e4:	81a3      	strh	r3, [r4, #12]
 80088e6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ea:	e033      	b.n	8008954 <__swsetup_r+0x98>
 80088ec:	0758      	lsls	r0, r3, #29
 80088ee:	d512      	bpl.n	8008916 <__swsetup_r+0x5a>
 80088f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088f2:	b141      	cbz	r1, 8008906 <__swsetup_r+0x4a>
 80088f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088f8:	4299      	cmp	r1, r3
 80088fa:	d002      	beq.n	8008902 <__swsetup_r+0x46>
 80088fc:	4628      	mov	r0, r5
 80088fe:	f7ff f92f 	bl	8007b60 <_free_r>
 8008902:	2300      	movs	r3, #0
 8008904:	6363      	str	r3, [r4, #52]	@ 0x34
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800890c:	81a3      	strh	r3, [r4, #12]
 800890e:	2300      	movs	r3, #0
 8008910:	6063      	str	r3, [r4, #4]
 8008912:	6923      	ldr	r3, [r4, #16]
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	f043 0308 	orr.w	r3, r3, #8
 800891c:	81a3      	strh	r3, [r4, #12]
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	b94b      	cbnz	r3, 8008936 <__swsetup_r+0x7a>
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800892c:	d003      	beq.n	8008936 <__swsetup_r+0x7a>
 800892e:	4621      	mov	r1, r4
 8008930:	4628      	mov	r0, r5
 8008932:	f000 f8c1 	bl	8008ab8 <__smakebuf_r>
 8008936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893a:	f013 0201 	ands.w	r2, r3, #1
 800893e:	d00a      	beq.n	8008956 <__swsetup_r+0x9a>
 8008940:	2200      	movs	r2, #0
 8008942:	60a2      	str	r2, [r4, #8]
 8008944:	6962      	ldr	r2, [r4, #20]
 8008946:	4252      	negs	r2, r2
 8008948:	61a2      	str	r2, [r4, #24]
 800894a:	6922      	ldr	r2, [r4, #16]
 800894c:	b942      	cbnz	r2, 8008960 <__swsetup_r+0xa4>
 800894e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008952:	d1c5      	bne.n	80088e0 <__swsetup_r+0x24>
 8008954:	bd38      	pop	{r3, r4, r5, pc}
 8008956:	0799      	lsls	r1, r3, #30
 8008958:	bf58      	it	pl
 800895a:	6962      	ldrpl	r2, [r4, #20]
 800895c:	60a2      	str	r2, [r4, #8]
 800895e:	e7f4      	b.n	800894a <__swsetup_r+0x8e>
 8008960:	2000      	movs	r0, #0
 8008962:	e7f7      	b.n	8008954 <__swsetup_r+0x98>
 8008964:	20000028 	.word	0x20000028

08008968 <_sbrk_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4d06      	ldr	r5, [pc, #24]	@ (8008984 <_sbrk_r+0x1c>)
 800896c:	2300      	movs	r3, #0
 800896e:	4604      	mov	r4, r0
 8008970:	4608      	mov	r0, r1
 8008972:	602b      	str	r3, [r5, #0]
 8008974:	f7f9 fbe2 	bl	800213c <_sbrk>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	d102      	bne.n	8008982 <_sbrk_r+0x1a>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	b103      	cbz	r3, 8008982 <_sbrk_r+0x1a>
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	200004d8 	.word	0x200004d8

08008988 <memcpy>:
 8008988:	440a      	add	r2, r1
 800898a:	4291      	cmp	r1, r2
 800898c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008990:	d100      	bne.n	8008994 <memcpy+0xc>
 8008992:	4770      	bx	lr
 8008994:	b510      	push	{r4, lr}
 8008996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800899a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800899e:	4291      	cmp	r1, r2
 80089a0:	d1f9      	bne.n	8008996 <memcpy+0xe>
 80089a2:	bd10      	pop	{r4, pc}

080089a4 <__assert_func>:
 80089a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089a6:	4614      	mov	r4, r2
 80089a8:	461a      	mov	r2, r3
 80089aa:	4b09      	ldr	r3, [pc, #36]	@ (80089d0 <__assert_func+0x2c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4605      	mov	r5, r0
 80089b0:	68d8      	ldr	r0, [r3, #12]
 80089b2:	b954      	cbnz	r4, 80089ca <__assert_func+0x26>
 80089b4:	4b07      	ldr	r3, [pc, #28]	@ (80089d4 <__assert_func+0x30>)
 80089b6:	461c      	mov	r4, r3
 80089b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089bc:	9100      	str	r1, [sp, #0]
 80089be:	462b      	mov	r3, r5
 80089c0:	4905      	ldr	r1, [pc, #20]	@ (80089d8 <__assert_func+0x34>)
 80089c2:	f000 f841 	bl	8008a48 <fiprintf>
 80089c6:	f000 f8d5 	bl	8008b74 <abort>
 80089ca:	4b04      	ldr	r3, [pc, #16]	@ (80089dc <__assert_func+0x38>)
 80089cc:	e7f4      	b.n	80089b8 <__assert_func+0x14>
 80089ce:	bf00      	nop
 80089d0:	20000028 	.word	0x20000028
 80089d4:	08008fd6 	.word	0x08008fd6
 80089d8:	08008fa8 	.word	0x08008fa8
 80089dc:	08008f9b 	.word	0x08008f9b

080089e0 <_calloc_r>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	fba1 5402 	umull	r5, r4, r1, r2
 80089e6:	b93c      	cbnz	r4, 80089f8 <_calloc_r+0x18>
 80089e8:	4629      	mov	r1, r5
 80089ea:	f7ff f92d 	bl	8007c48 <_malloc_r>
 80089ee:	4606      	mov	r6, r0
 80089f0:	b928      	cbnz	r0, 80089fe <_calloc_r+0x1e>
 80089f2:	2600      	movs	r6, #0
 80089f4:	4630      	mov	r0, r6
 80089f6:	bd70      	pop	{r4, r5, r6, pc}
 80089f8:	220c      	movs	r2, #12
 80089fa:	6002      	str	r2, [r0, #0]
 80089fc:	e7f9      	b.n	80089f2 <_calloc_r+0x12>
 80089fe:	462a      	mov	r2, r5
 8008a00:	4621      	mov	r1, r4
 8008a02:	f7fe f9e0 	bl	8006dc6 <memset>
 8008a06:	e7f5      	b.n	80089f4 <_calloc_r+0x14>

08008a08 <__ascii_mbtowc>:
 8008a08:	b082      	sub	sp, #8
 8008a0a:	b901      	cbnz	r1, 8008a0e <__ascii_mbtowc+0x6>
 8008a0c:	a901      	add	r1, sp, #4
 8008a0e:	b142      	cbz	r2, 8008a22 <__ascii_mbtowc+0x1a>
 8008a10:	b14b      	cbz	r3, 8008a26 <__ascii_mbtowc+0x1e>
 8008a12:	7813      	ldrb	r3, [r2, #0]
 8008a14:	600b      	str	r3, [r1, #0]
 8008a16:	7812      	ldrb	r2, [r2, #0]
 8008a18:	1e10      	subs	r0, r2, #0
 8008a1a:	bf18      	it	ne
 8008a1c:	2001      	movne	r0, #1
 8008a1e:	b002      	add	sp, #8
 8008a20:	4770      	bx	lr
 8008a22:	4610      	mov	r0, r2
 8008a24:	e7fb      	b.n	8008a1e <__ascii_mbtowc+0x16>
 8008a26:	f06f 0001 	mvn.w	r0, #1
 8008a2a:	e7f8      	b.n	8008a1e <__ascii_mbtowc+0x16>

08008a2c <__ascii_wctomb>:
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	4608      	mov	r0, r1
 8008a30:	b141      	cbz	r1, 8008a44 <__ascii_wctomb+0x18>
 8008a32:	2aff      	cmp	r2, #255	@ 0xff
 8008a34:	d904      	bls.n	8008a40 <__ascii_wctomb+0x14>
 8008a36:	228a      	movs	r2, #138	@ 0x8a
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3e:	4770      	bx	lr
 8008a40:	700a      	strb	r2, [r1, #0]
 8008a42:	2001      	movs	r0, #1
 8008a44:	4770      	bx	lr
	...

08008a48 <fiprintf>:
 8008a48:	b40e      	push	{r1, r2, r3}
 8008a4a:	b503      	push	{r0, r1, lr}
 8008a4c:	4601      	mov	r1, r0
 8008a4e:	ab03      	add	r3, sp, #12
 8008a50:	4805      	ldr	r0, [pc, #20]	@ (8008a68 <fiprintf+0x20>)
 8008a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a56:	6800      	ldr	r0, [r0, #0]
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	f7ff fd2d 	bl	80084b8 <_vfiprintf_r>
 8008a5e:	b002      	add	sp, #8
 8008a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a64:	b003      	add	sp, #12
 8008a66:	4770      	bx	lr
 8008a68:	20000028 	.word	0x20000028

08008a6c <__swhatbuf_r>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	460c      	mov	r4, r1
 8008a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a74:	2900      	cmp	r1, #0
 8008a76:	b096      	sub	sp, #88	@ 0x58
 8008a78:	4615      	mov	r5, r2
 8008a7a:	461e      	mov	r6, r3
 8008a7c:	da0d      	bge.n	8008a9a <__swhatbuf_r+0x2e>
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a84:	f04f 0100 	mov.w	r1, #0
 8008a88:	bf14      	ite	ne
 8008a8a:	2340      	movne	r3, #64	@ 0x40
 8008a8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a90:	2000      	movs	r0, #0
 8008a92:	6031      	str	r1, [r6, #0]
 8008a94:	602b      	str	r3, [r5, #0]
 8008a96:	b016      	add	sp, #88	@ 0x58
 8008a98:	bd70      	pop	{r4, r5, r6, pc}
 8008a9a:	466a      	mov	r2, sp
 8008a9c:	f000 f848 	bl	8008b30 <_fstat_r>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	dbec      	blt.n	8008a7e <__swhatbuf_r+0x12>
 8008aa4:	9901      	ldr	r1, [sp, #4]
 8008aa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008aaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008aae:	4259      	negs	r1, r3
 8008ab0:	4159      	adcs	r1, r3
 8008ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ab6:	e7eb      	b.n	8008a90 <__swhatbuf_r+0x24>

08008ab8 <__smakebuf_r>:
 8008ab8:	898b      	ldrh	r3, [r1, #12]
 8008aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008abc:	079d      	lsls	r5, r3, #30
 8008abe:	4606      	mov	r6, r0
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	d507      	bpl.n	8008ad4 <__smakebuf_r+0x1c>
 8008ac4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	6123      	str	r3, [r4, #16]
 8008acc:	2301      	movs	r3, #1
 8008ace:	6163      	str	r3, [r4, #20]
 8008ad0:	b003      	add	sp, #12
 8008ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ad4:	ab01      	add	r3, sp, #4
 8008ad6:	466a      	mov	r2, sp
 8008ad8:	f7ff ffc8 	bl	8008a6c <__swhatbuf_r>
 8008adc:	9f00      	ldr	r7, [sp, #0]
 8008ade:	4605      	mov	r5, r0
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f7ff f8b0 	bl	8007c48 <_malloc_r>
 8008ae8:	b948      	cbnz	r0, 8008afe <__smakebuf_r+0x46>
 8008aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aee:	059a      	lsls	r2, r3, #22
 8008af0:	d4ee      	bmi.n	8008ad0 <__smakebuf_r+0x18>
 8008af2:	f023 0303 	bic.w	r3, r3, #3
 8008af6:	f043 0302 	orr.w	r3, r3, #2
 8008afa:	81a3      	strh	r3, [r4, #12]
 8008afc:	e7e2      	b.n	8008ac4 <__smakebuf_r+0xc>
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	6020      	str	r0, [r4, #0]
 8008b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b06:	81a3      	strh	r3, [r4, #12]
 8008b08:	9b01      	ldr	r3, [sp, #4]
 8008b0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b0e:	b15b      	cbz	r3, 8008b28 <__smakebuf_r+0x70>
 8008b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b14:	4630      	mov	r0, r6
 8008b16:	f000 f81d 	bl	8008b54 <_isatty_r>
 8008b1a:	b128      	cbz	r0, 8008b28 <__smakebuf_r+0x70>
 8008b1c:	89a3      	ldrh	r3, [r4, #12]
 8008b1e:	f023 0303 	bic.w	r3, r3, #3
 8008b22:	f043 0301 	orr.w	r3, r3, #1
 8008b26:	81a3      	strh	r3, [r4, #12]
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	431d      	orrs	r5, r3
 8008b2c:	81a5      	strh	r5, [r4, #12]
 8008b2e:	e7cf      	b.n	8008ad0 <__smakebuf_r+0x18>

08008b30 <_fstat_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	4d07      	ldr	r5, [pc, #28]	@ (8008b50 <_fstat_r+0x20>)
 8008b34:	2300      	movs	r3, #0
 8008b36:	4604      	mov	r4, r0
 8008b38:	4608      	mov	r0, r1
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	602b      	str	r3, [r5, #0]
 8008b3e:	f7f9 fad5 	bl	80020ec <_fstat>
 8008b42:	1c43      	adds	r3, r0, #1
 8008b44:	d102      	bne.n	8008b4c <_fstat_r+0x1c>
 8008b46:	682b      	ldr	r3, [r5, #0]
 8008b48:	b103      	cbz	r3, 8008b4c <_fstat_r+0x1c>
 8008b4a:	6023      	str	r3, [r4, #0]
 8008b4c:	bd38      	pop	{r3, r4, r5, pc}
 8008b4e:	bf00      	nop
 8008b50:	200004d8 	.word	0x200004d8

08008b54 <_isatty_r>:
 8008b54:	b538      	push	{r3, r4, r5, lr}
 8008b56:	4d06      	ldr	r5, [pc, #24]	@ (8008b70 <_isatty_r+0x1c>)
 8008b58:	2300      	movs	r3, #0
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	602b      	str	r3, [r5, #0]
 8008b60:	f7f9 fad4 	bl	800210c <_isatty>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	d102      	bne.n	8008b6e <_isatty_r+0x1a>
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	b103      	cbz	r3, 8008b6e <_isatty_r+0x1a>
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	bd38      	pop	{r3, r4, r5, pc}
 8008b70:	200004d8 	.word	0x200004d8

08008b74 <abort>:
 8008b74:	b508      	push	{r3, lr}
 8008b76:	2006      	movs	r0, #6
 8008b78:	f000 f82c 	bl	8008bd4 <raise>
 8008b7c:	2001      	movs	r0, #1
 8008b7e:	f7f9 fa65 	bl	800204c <_exit>

08008b82 <_raise_r>:
 8008b82:	291f      	cmp	r1, #31
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4605      	mov	r5, r0
 8008b88:	460c      	mov	r4, r1
 8008b8a:	d904      	bls.n	8008b96 <_raise_r+0x14>
 8008b8c:	2316      	movs	r3, #22
 8008b8e:	6003      	str	r3, [r0, #0]
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295
 8008b94:	bd38      	pop	{r3, r4, r5, pc}
 8008b96:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b98:	b112      	cbz	r2, 8008ba0 <_raise_r+0x1e>
 8008b9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b9e:	b94b      	cbnz	r3, 8008bb4 <_raise_r+0x32>
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	f000 f831 	bl	8008c08 <_getpid_r>
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	4601      	mov	r1, r0
 8008baa:	4628      	mov	r0, r5
 8008bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bb0:	f000 b818 	b.w	8008be4 <_kill_r>
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d00a      	beq.n	8008bce <_raise_r+0x4c>
 8008bb8:	1c59      	adds	r1, r3, #1
 8008bba:	d103      	bne.n	8008bc4 <_raise_r+0x42>
 8008bbc:	2316      	movs	r3, #22
 8008bbe:	6003      	str	r3, [r0, #0]
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	e7e7      	b.n	8008b94 <_raise_r+0x12>
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008bca:	4620      	mov	r0, r4
 8008bcc:	4798      	blx	r3
 8008bce:	2000      	movs	r0, #0
 8008bd0:	e7e0      	b.n	8008b94 <_raise_r+0x12>
	...

08008bd4 <raise>:
 8008bd4:	4b02      	ldr	r3, [pc, #8]	@ (8008be0 <raise+0xc>)
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	f7ff bfd2 	b.w	8008b82 <_raise_r>
 8008bde:	bf00      	nop
 8008be0:	20000028 	.word	0x20000028

08008be4 <_kill_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4d07      	ldr	r5, [pc, #28]	@ (8008c04 <_kill_r+0x20>)
 8008be8:	2300      	movs	r3, #0
 8008bea:	4604      	mov	r4, r0
 8008bec:	4608      	mov	r0, r1
 8008bee:	4611      	mov	r1, r2
 8008bf0:	602b      	str	r3, [r5, #0]
 8008bf2:	f7f9 fa1b 	bl	800202c <_kill>
 8008bf6:	1c43      	adds	r3, r0, #1
 8008bf8:	d102      	bne.n	8008c00 <_kill_r+0x1c>
 8008bfa:	682b      	ldr	r3, [r5, #0]
 8008bfc:	b103      	cbz	r3, 8008c00 <_kill_r+0x1c>
 8008bfe:	6023      	str	r3, [r4, #0]
 8008c00:	bd38      	pop	{r3, r4, r5, pc}
 8008c02:	bf00      	nop
 8008c04:	200004d8 	.word	0x200004d8

08008c08 <_getpid_r>:
 8008c08:	f7f9 ba08 	b.w	800201c <_getpid>
 8008c0c:	0000      	movs	r0, r0
	...

08008c10 <floor>:
 8008c10:	ec51 0b10 	vmov	r0, r1, d0
 8008c14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008c20:	2e13      	cmp	r6, #19
 8008c22:	460c      	mov	r4, r1
 8008c24:	4605      	mov	r5, r0
 8008c26:	4680      	mov	r8, r0
 8008c28:	dc34      	bgt.n	8008c94 <floor+0x84>
 8008c2a:	2e00      	cmp	r6, #0
 8008c2c:	da17      	bge.n	8008c5e <floor+0x4e>
 8008c2e:	a332      	add	r3, pc, #200	@ (adr r3, 8008cf8 <floor+0xe8>)
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	f7f7 fb4a 	bl	80002cc <__adddf3>
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f7f7 ff8c 	bl	8000b58 <__aeabi_dcmpgt>
 8008c40:	b150      	cbz	r0, 8008c58 <floor+0x48>
 8008c42:	2c00      	cmp	r4, #0
 8008c44:	da55      	bge.n	8008cf2 <floor+0xe2>
 8008c46:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008c4a:	432c      	orrs	r4, r5
 8008c4c:	2500      	movs	r5, #0
 8008c4e:	42ac      	cmp	r4, r5
 8008c50:	4c2b      	ldr	r4, [pc, #172]	@ (8008d00 <floor+0xf0>)
 8008c52:	bf08      	it	eq
 8008c54:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008c58:	4621      	mov	r1, r4
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	e023      	b.n	8008ca6 <floor+0x96>
 8008c5e:	4f29      	ldr	r7, [pc, #164]	@ (8008d04 <floor+0xf4>)
 8008c60:	4137      	asrs	r7, r6
 8008c62:	ea01 0307 	and.w	r3, r1, r7
 8008c66:	4303      	orrs	r3, r0
 8008c68:	d01d      	beq.n	8008ca6 <floor+0x96>
 8008c6a:	a323      	add	r3, pc, #140	@ (adr r3, 8008cf8 <floor+0xe8>)
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	f7f7 fb2c 	bl	80002cc <__adddf3>
 8008c74:	2200      	movs	r2, #0
 8008c76:	2300      	movs	r3, #0
 8008c78:	f7f7 ff6e 	bl	8000b58 <__aeabi_dcmpgt>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	d0eb      	beq.n	8008c58 <floor+0x48>
 8008c80:	2c00      	cmp	r4, #0
 8008c82:	bfbe      	ittt	lt
 8008c84:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008c88:	4133      	asrlt	r3, r6
 8008c8a:	18e4      	addlt	r4, r4, r3
 8008c8c:	ea24 0407 	bic.w	r4, r4, r7
 8008c90:	2500      	movs	r5, #0
 8008c92:	e7e1      	b.n	8008c58 <floor+0x48>
 8008c94:	2e33      	cmp	r6, #51	@ 0x33
 8008c96:	dd0a      	ble.n	8008cae <floor+0x9e>
 8008c98:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008c9c:	d103      	bne.n	8008ca6 <floor+0x96>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	f7f7 fb13 	bl	80002cc <__adddf3>
 8008ca6:	ec41 0b10 	vmov	d0, r0, r1
 8008caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008cb2:	f04f 37ff 	mov.w	r7, #4294967295
 8008cb6:	40df      	lsrs	r7, r3
 8008cb8:	4207      	tst	r7, r0
 8008cba:	d0f4      	beq.n	8008ca6 <floor+0x96>
 8008cbc:	a30e      	add	r3, pc, #56	@ (adr r3, 8008cf8 <floor+0xe8>)
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	f7f7 fb03 	bl	80002cc <__adddf3>
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f7f7 ff45 	bl	8000b58 <__aeabi_dcmpgt>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d0c2      	beq.n	8008c58 <floor+0x48>
 8008cd2:	2c00      	cmp	r4, #0
 8008cd4:	da0a      	bge.n	8008cec <floor+0xdc>
 8008cd6:	2e14      	cmp	r6, #20
 8008cd8:	d101      	bne.n	8008cde <floor+0xce>
 8008cda:	3401      	adds	r4, #1
 8008cdc:	e006      	b.n	8008cec <floor+0xdc>
 8008cde:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	40b3      	lsls	r3, r6
 8008ce6:	441d      	add	r5, r3
 8008ce8:	4545      	cmp	r5, r8
 8008cea:	d3f6      	bcc.n	8008cda <floor+0xca>
 8008cec:	ea25 0507 	bic.w	r5, r5, r7
 8008cf0:	e7b2      	b.n	8008c58 <floor+0x48>
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	462c      	mov	r4, r5
 8008cf6:	e7af      	b.n	8008c58 <floor+0x48>
 8008cf8:	8800759c 	.word	0x8800759c
 8008cfc:	7e37e43c 	.word	0x7e37e43c
 8008d00:	bff00000 	.word	0xbff00000
 8008d04:	000fffff 	.word	0x000fffff

08008d08 <_init>:
 8008d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0a:	bf00      	nop
 8008d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0e:	bc08      	pop	{r3}
 8008d10:	469e      	mov	lr, r3
 8008d12:	4770      	bx	lr

08008d14 <_fini>:
 8008d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d16:	bf00      	nop
 8008d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d1a:	bc08      	pop	{r3}
 8008d1c:	469e      	mov	lr, r3
 8008d1e:	4770      	bx	lr
