
progetto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005e88  08005e88  00006e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea8  08005ea8  0000701c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea8  08005ea8  00006ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eb0  08005eb0  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb0  08005eb0  00006eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005eb4  08005eb4  00006eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005eb8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000020  08005ed4  00007020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08005ed4  000071d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fea9  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b57  00000000  00000000  00016ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00019a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a20  00000000  00000000  0001a770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f97  00000000  00000000  0001b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138de  00000000  00000000  0003f127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8c0e  00000000  00000000  00052a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b613  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f4  00000000  00000000  0012b658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012ed4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000020 	.word	0x20000020
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005e70 	.word	0x08005e70

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000024 	.word	0x20000024
 8000204:	08005e70 	.word	0x08005e70

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2uiz>:
 8000ab4:	004a      	lsls	r2, r1, #1
 8000ab6:	d211      	bcs.n	8000adc <__aeabi_d2uiz+0x28>
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d211      	bcs.n	8000ae2 <__aeabi_d2uiz+0x2e>
 8000abe:	d50d      	bpl.n	8000adc <__aeabi_d2uiz+0x28>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d40e      	bmi.n	8000ae8 <__aeabi_d2uiz+0x34>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d102      	bne.n	8000aee <__aeabi_d2uiz+0x3a>
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	4770      	bx	lr
 8000aee:	f04f 0000 	mov.w	r0, #0
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_d2f>:
 8000af4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000afc:	bf24      	itt	cs
 8000afe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b06:	d90d      	bls.n	8000b24 <__aeabi_d2f+0x30>
 8000b08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b28:	d121      	bne.n	8000b6e <__aeabi_d2f+0x7a>
 8000b2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2e:	bfbc      	itt	lt
 8000b30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	4770      	bxlt	lr
 8000b36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3e:	f1c2 0218 	rsb	r2, r2, #24
 8000b42:	f1c2 0c20 	rsb	ip, r2, #32
 8000b46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4e:	bf18      	it	ne
 8000b50:	f040 0001 	orrne.w	r0, r0, #1
 8000b54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b60:	ea40 000c 	orr.w	r0, r0, ip
 8000b64:	fa23 f302 	lsr.w	r3, r3, r2
 8000b68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b6c:	e7cc      	b.n	8000b08 <__aeabi_d2f+0x14>
 8000b6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b72:	d107      	bne.n	8000b84 <__aeabi_d2f+0x90>
 8000b74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b78:	bf1e      	ittt	ne
 8000b7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b82:	4770      	bxne	lr
 8000b84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_uldivmod>:
 8000b94:	b953      	cbnz	r3, 8000bac <__aeabi_uldivmod+0x18>
 8000b96:	b94a      	cbnz	r2, 8000bac <__aeabi_uldivmod+0x18>
 8000b98:	2900      	cmp	r1, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	2800      	cmpeq	r0, #0
 8000b9e:	bf1c      	itt	ne
 8000ba0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba8:	f000 b96a 	b.w	8000e80 <__aeabi_idiv0>
 8000bac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb4:	f000 f806 	bl	8000bc4 <__udivmoddi4>
 8000bb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc0:	b004      	add	sp, #16
 8000bc2:	4770      	bx	lr

08000bc4 <__udivmoddi4>:
 8000bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc8:	9d08      	ldr	r5, [sp, #32]
 8000bca:	460c      	mov	r4, r1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d14e      	bne.n	8000c6e <__udivmoddi4+0xaa>
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	458c      	cmp	ip, r1
 8000bd4:	4686      	mov	lr, r0
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	d962      	bls.n	8000ca2 <__udivmoddi4+0xde>
 8000bdc:	b14a      	cbz	r2, 8000bf2 <__udivmoddi4+0x2e>
 8000bde:	f1c2 0320 	rsb	r3, r2, #32
 8000be2:	4091      	lsls	r1, r2
 8000be4:	fa20 f303 	lsr.w	r3, r0, r3
 8000be8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bec:	4319      	orrs	r1, r3
 8000bee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf6:	fa1f f68c 	uxth.w	r6, ip
 8000bfa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c02:	fb07 1114 	mls	r1, r7, r4, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb04 f106 	mul.w	r1, r4, r6
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x64>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c1a:	f080 8112 	bcs.w	8000e42 <__udivmoddi4+0x27e>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 810f 	bls.w	8000e42 <__udivmoddi4+0x27e>
 8000c24:	3c02      	subs	r4, #2
 8000c26:	4463      	add	r3, ip
 8000c28:	1a59      	subs	r1, r3, r1
 8000c2a:	fa1f f38e 	uxth.w	r3, lr
 8000c2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c32:	fb07 1110 	mls	r1, r7, r0, r1
 8000c36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3a:	fb00 f606 	mul.w	r6, r0, r6
 8000c3e:	429e      	cmp	r6, r3
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x94>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c4a:	f080 80fc 	bcs.w	8000e46 <__udivmoddi4+0x282>
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	f240 80f9 	bls.w	8000e46 <__udivmoddi4+0x282>
 8000c54:	4463      	add	r3, ip
 8000c56:	3802      	subs	r0, #2
 8000c58:	1b9b      	subs	r3, r3, r6
 8000c5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11d      	cbz	r5, 8000c6a <__udivmoddi4+0xa6>
 8000c62:	40d3      	lsrs	r3, r2
 8000c64:	2200      	movs	r2, #0
 8000c66:	e9c5 3200 	strd	r3, r2, [r5]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d905      	bls.n	8000c7e <__udivmoddi4+0xba>
 8000c72:	b10d      	cbz	r5, 8000c78 <__udivmoddi4+0xb4>
 8000c74:	e9c5 0100 	strd	r0, r1, [r5]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	e7f5      	b.n	8000c6a <__udivmoddi4+0xa6>
 8000c7e:	fab3 f183 	clz	r1, r3
 8000c82:	2900      	cmp	r1, #0
 8000c84:	d146      	bne.n	8000d14 <__udivmoddi4+0x150>
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xcc>
 8000c8a:	4290      	cmp	r0, r2
 8000c8c:	f0c0 80f0 	bcc.w	8000e70 <__udivmoddi4+0x2ac>
 8000c90:	1a86      	subs	r6, r0, r2
 8000c92:	eb64 0303 	sbc.w	r3, r4, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	2d00      	cmp	r5, #0
 8000c9a:	d0e6      	beq.n	8000c6a <__udivmoddi4+0xa6>
 8000c9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ca0:	e7e3      	b.n	8000c6a <__udivmoddi4+0xa6>
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	f040 8090 	bne.w	8000dc8 <__udivmoddi4+0x204>
 8000ca8:	eba1 040c 	sub.w	r4, r1, ip
 8000cac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb0:	fa1f f78c 	uxth.w	r7, ip
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000cc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc6:	fb07 f006 	mul.w	r0, r7, r6
 8000cca:	4298      	cmp	r0, r3
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x11c>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x11a>
 8000cd8:	4298      	cmp	r0, r3
 8000cda:	f200 80cd 	bhi.w	8000e78 <__udivmoddi4+0x2b4>
 8000cde:	4626      	mov	r6, r4
 8000ce0:	1a1c      	subs	r4, r3, r0
 8000ce2:	fa1f f38e 	uxth.w	r3, lr
 8000ce6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cea:	fb08 4410 	mls	r4, r8, r0, r4
 8000cee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf2:	fb00 f707 	mul.w	r7, r0, r7
 8000cf6:	429f      	cmp	r7, r3
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x148>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x146>
 8000d04:	429f      	cmp	r7, r3
 8000d06:	f200 80b0 	bhi.w	8000e6a <__udivmoddi4+0x2a6>
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	1bdb      	subs	r3, r3, r7
 8000d0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0x9c>
 8000d14:	f1c1 0620 	rsb	r6, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d24:	fa04 f301 	lsl.w	r3, r4, r1
 8000d28:	ea43 030c 	orr.w	r3, r3, ip
 8000d2c:	40f4      	lsrs	r4, r6
 8000d2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d32:	0c38      	lsrs	r0, r7, #16
 8000d34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d38:	fbb4 fef0 	udiv	lr, r4, r0
 8000d3c:	fa1f fc87 	uxth.w	ip, r7
 8000d40:	fb00 441e 	mls	r4, r0, lr, r4
 8000d44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d48:	fb0e f90c 	mul.w	r9, lr, ip
 8000d4c:	45a1      	cmp	r9, r4
 8000d4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x1a6>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d5a:	f080 8084 	bcs.w	8000e66 <__udivmoddi4+0x2a2>
 8000d5e:	45a1      	cmp	r9, r4
 8000d60:	f240 8081 	bls.w	8000e66 <__udivmoddi4+0x2a2>
 8000d64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d68:	443c      	add	r4, r7
 8000d6a:	eba4 0409 	sub.w	r4, r4, r9
 8000d6e:	fa1f f983 	uxth.w	r9, r3
 8000d72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d76:	fb00 4413 	mls	r4, r0, r3, r4
 8000d7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x1d2>
 8000d86:	193c      	adds	r4, r7, r4
 8000d88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d8c:	d267      	bcs.n	8000e5e <__udivmoddi4+0x29a>
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d965      	bls.n	8000e5e <__udivmoddi4+0x29a>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	443c      	add	r4, r7
 8000d96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9e:	eba4 040c 	sub.w	r4, r4, ip
 8000da2:	429c      	cmp	r4, r3
 8000da4:	46ce      	mov	lr, r9
 8000da6:	469c      	mov	ip, r3
 8000da8:	d351      	bcc.n	8000e4e <__udivmoddi4+0x28a>
 8000daa:	d04e      	beq.n	8000e4a <__udivmoddi4+0x286>
 8000dac:	b155      	cbz	r5, 8000dc4 <__udivmoddi4+0x200>
 8000dae:	ebb8 030e 	subs.w	r3, r8, lr
 8000db2:	eb64 040c 	sbc.w	r4, r4, ip
 8000db6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dba:	40cb      	lsrs	r3, r1
 8000dbc:	431e      	orrs	r6, r3
 8000dbe:	40cc      	lsrs	r4, r1
 8000dc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	e750      	b.n	8000c6a <__udivmoddi4+0xa6>
 8000dc8:	f1c2 0320 	rsb	r3, r2, #32
 8000dcc:	fa20 f103 	lsr.w	r1, r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd8:	4094      	lsls	r4, r2
 8000dda:	430c      	orrs	r4, r1
 8000ddc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3110 	mls	r1, r8, r0, r3
 8000df0:	0c23      	lsrs	r3, r4, #16
 8000df2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df6:	fb00 f107 	mul.w	r1, r0, r7
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x24c>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e06:	d22c      	bcs.n	8000e62 <__udivmoddi4+0x29e>
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d92a      	bls.n	8000e62 <__udivmoddi4+0x29e>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1a5b      	subs	r3, r3, r1
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e18:	fb08 3311 	mls	r3, r8, r1, r3
 8000e1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e20:	fb01 f307 	mul.w	r3, r1, r7
 8000e24:	42a3      	cmp	r3, r4
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x276>
 8000e28:	eb1c 0404 	adds.w	r4, ip, r4
 8000e2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e30:	d213      	bcs.n	8000e5a <__udivmoddi4+0x296>
 8000e32:	42a3      	cmp	r3, r4
 8000e34:	d911      	bls.n	8000e5a <__udivmoddi4+0x296>
 8000e36:	3902      	subs	r1, #2
 8000e38:	4464      	add	r4, ip
 8000e3a:	1ae4      	subs	r4, r4, r3
 8000e3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e40:	e739      	b.n	8000cb6 <__udivmoddi4+0xf2>
 8000e42:	4604      	mov	r4, r0
 8000e44:	e6f0      	b.n	8000c28 <__udivmoddi4+0x64>
 8000e46:	4608      	mov	r0, r1
 8000e48:	e706      	b.n	8000c58 <__udivmoddi4+0x94>
 8000e4a:	45c8      	cmp	r8, r9
 8000e4c:	d2ae      	bcs.n	8000dac <__udivmoddi4+0x1e8>
 8000e4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e56:	3801      	subs	r0, #1
 8000e58:	e7a8      	b.n	8000dac <__udivmoddi4+0x1e8>
 8000e5a:	4631      	mov	r1, r6
 8000e5c:	e7ed      	b.n	8000e3a <__udivmoddi4+0x276>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	e799      	b.n	8000d96 <__udivmoddi4+0x1d2>
 8000e62:	4630      	mov	r0, r6
 8000e64:	e7d4      	b.n	8000e10 <__udivmoddi4+0x24c>
 8000e66:	46d6      	mov	lr, sl
 8000e68:	e77f      	b.n	8000d6a <__udivmoddi4+0x1a6>
 8000e6a:	4463      	add	r3, ip
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	e74d      	b.n	8000d0c <__udivmoddi4+0x148>
 8000e70:	4606      	mov	r6, r0
 8000e72:	4623      	mov	r3, r4
 8000e74:	4608      	mov	r0, r1
 8000e76:	e70f      	b.n	8000c98 <__udivmoddi4+0xd4>
 8000e78:	3e02      	subs	r6, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	e730      	b.n	8000ce0 <__udivmoddi4+0x11c>
 8000e7e:	bf00      	nop

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e96:	4b36      	ldr	r3, [pc, #216]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000e98:	4a36      	ldr	r2, [pc, #216]	@ (8000f74 <MX_ADC1_Init+0xf0>)
 8000e9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e9c:	4b34      	ldr	r3, [pc, #208]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000e9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ea2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000eaa:	4b31      	ldr	r3, [pc, #196]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8000f78 <MX_ADC1_Init+0xf4>)
 8000ec8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eca:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000ed0:	4b27      	ldr	r3, [pc, #156]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ede:	4b24      	ldr	r3, [pc, #144]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee4:	4822      	ldr	r0, [pc, #136]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000ee6:	f001 f8e1 	bl	80020ac <HAL_ADC_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ef0:	f000 fd22 	bl	8001938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	4619      	mov	r1, r3
 8000f04:	481a      	ldr	r0, [pc, #104]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000f06:	f001 fa43 	bl	8002390 <HAL_ADC_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f10:	f000 fd12 	bl	8001938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4813      	ldr	r0, [pc, #76]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000f22:	f001 fa35 	bl	8002390 <HAL_ADC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f2c:	f000 fd04 	bl	8001938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f30:	2304      	movs	r3, #4
 8000f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f34:	2303      	movs	r3, #3
 8000f36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000f3e:	f001 fa27 	bl	8002390 <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000f48:	f000 fcf6 	bl	8001938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f50:	2304      	movs	r3, #4
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <MX_ADC1_Init+0xec>)
 8000f5a:	f001 fa19 	bl	8002390 <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000f64:	f000 fce8 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000003c 	.word	0x2000003c
 8000f74:	40012000 	.word	0x40012000
 8000f78:	0f000001 	.word	0x0f000001

08000f7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a33      	ldr	r2, [pc, #204]	@ (8001068 <HAL_ADC_MspInit+0xec>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d160      	bne.n	8001060 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b32      	ldr	r3, [pc, #200]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	4a31      	ldr	r2, [pc, #196]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fae:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b28      	ldr	r3, [pc, #160]	@ (800106c <HAL_ADC_MspInit+0xf0>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 8000fd6:	2353      	movs	r3, #83	@ 0x53
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4821      	ldr	r0, [pc, #132]	@ (8001070 <HAL_ADC_MspInit+0xf4>)
 8000fea:	f002 f903 	bl	80031f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fee:	4b21      	ldr	r3, [pc, #132]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8000ff0:	4a21      	ldr	r2, [pc, #132]	@ (8001078 <HAL_ADC_MspInit+0xfc>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001008:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800100c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001010:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001014:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001018:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800101c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001024:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001026:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 800102e:	2204      	movs	r2, #4
 8001030:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001034:	2203      	movs	r2, #3
 8001036:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 800103a:	2200      	movs	r2, #0
 800103c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001040:	2200      	movs	r2, #0
 8001042:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001044:	480b      	ldr	r0, [pc, #44]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001046:	f001 fd65 	bl	8002b14 <HAL_DMA_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8001050:	f000 fc72 	bl	8001938 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 8001058:	639a      	str	r2, [r3, #56]	@ 0x38
 800105a:	4a06      	ldr	r2, [pc, #24]	@ (8001074 <HAL_ADC_MspInit+0xf8>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	@ 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40012000 	.word	0x40012000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000
 8001074:	20000084 	.word	0x20000084
 8001078:	40026410 	.word	0x40026410

0800107c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_DMA_Init+0x3c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a0b      	ldr	r2, [pc, #44]	@ (80010b8 <MX_DMA_Init+0x3c>)
 800108c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_DMA_Init+0x3c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 3, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2103      	movs	r1, #3
 80010a2:	2038      	movs	r0, #56	@ 0x38
 80010a4:	f001 fcff 	bl	8002aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010a8:	2038      	movs	r0, #56	@ 0x38
 80010aa:	f001 fd18 	bl	8002ade <HAL_NVIC_EnableIRQ>

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b38      	ldr	r3, [pc, #224]	@ (80011b8 <MX_GPIO_Init+0xfc>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a37      	ldr	r2, [pc, #220]	@ (80011b8 <MX_GPIO_Init+0xfc>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b35      	ldr	r3, [pc, #212]	@ (80011b8 <MX_GPIO_Init+0xfc>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b31      	ldr	r3, [pc, #196]	@ (80011b8 <MX_GPIO_Init+0xfc>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a30      	ldr	r2, [pc, #192]	@ (80011b8 <MX_GPIO_Init+0xfc>)
 80010f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <MX_GPIO_Init+0xfc>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <MX_GPIO_Init+0xfc>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a29      	ldr	r2, [pc, #164]	@ (80011b8 <MX_GPIO_Init+0xfc>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <MX_GPIO_Init+0xfc>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <MX_GPIO_Init+0xfc>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a22      	ldr	r2, [pc, #136]	@ (80011b8 <MX_GPIO_Init+0xfc>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <MX_GPIO_Init+0xfc>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2120      	movs	r1, #32
 8001146:	481d      	ldr	r0, [pc, #116]	@ (80011bc <MX_GPIO_Init+0x100>)
 8001148:	f002 f9e8 	bl	800351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800114c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001152:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4817      	ldr	r0, [pc, #92]	@ (80011c0 <MX_GPIO_Init+0x104>)
 8001164:	f002 f846 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001168:	2301      	movs	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800116c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001172:	2301      	movs	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4810      	ldr	r0, [pc, #64]	@ (80011c0 <MX_GPIO_Init+0x104>)
 800117e:	f002 f839 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001182:	2320      	movs	r3, #32
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	4808      	ldr	r0, [pc, #32]	@ (80011bc <MX_GPIO_Init+0x100>)
 800119a:	f002 f82b 	bl	80031f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2103      	movs	r1, #3
 80011a2:	2006      	movs	r0, #6
 80011a4:	f001 fc7f 	bl	8002aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011a8:	2006      	movs	r0, #6
 80011aa:	f001 fc98 	bl	8002ade <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	@ 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020800 	.word	0x40020800

080011c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <MX_I2C1_Init+0x50>)
 80011ca:	4a13      	ldr	r2, [pc, #76]	@ (8001218 <MX_I2C1_Init+0x54>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011ce:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_I2C1_Init+0x50>)
 80011d0:	4a12      	ldr	r2, [pc, #72]	@ (800121c <MX_I2C1_Init+0x58>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <MX_I2C1_Init+0x50>)
 80011e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <MX_I2C1_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_I2C1_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f4:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <MX_I2C1_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <MX_I2C1_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	@ (8001214 <MX_I2C1_Init+0x50>)
 8001202:	f002 f9bd 	bl	8003580 <HAL_I2C_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800120c:	f000 fb94 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200000e4 	.word	0x200000e4
 8001218:	40005400 	.word	0x40005400
 800121c:	00061a80 	.word	0x00061a80

08001220 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	@ (80012a4 <HAL_I2C_MspInit+0x84>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12b      	bne.n	800129a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <HAL_I2C_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a17      	ldr	r2, [pc, #92]	@ (80012a8 <HAL_I2C_MspInit+0x88>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_I2C_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800125e:	23c0      	movs	r3, #192	@ 0xc0
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001262:	2312      	movs	r3, #18
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800126e:	2304      	movs	r3, #4
 8001270:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	480c      	ldr	r0, [pc, #48]	@ (80012ac <HAL_I2C_MspInit+0x8c>)
 800127a:	f001 ffbb 	bl	80031f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <HAL_I2C_MspInit+0x88>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <HAL_I2C_MspInit+0x88>)
 8001288:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800128c:	6413      	str	r3, [r2, #64]	@ 0x40
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_I2C_MspInit+0x88>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	@ 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40005400 	.word	0x40005400
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020400 	.word	0x40020400

080012b0 <INA219_Init>:

HAL_StatusTypeDef INA219_I2C_Status;


uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address, double maxCurrent)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	@ 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6178      	str	r0, [r7, #20]
 80012b8:	6139      	str	r1, [r7, #16]
 80012ba:	4613      	mov	r3, r2
 80012bc:	ed87 0b00 	vstr	d0, [r7]
 80012c0:	73fb      	strb	r3, [r7, #15]
	ina219->ina219_i2c = i2c;
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	711a      	strb	r2, [r3, #4]

	HAL_StatusTypeDef ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	b299      	uxth	r1, r3
 80012d6:	2302      	movs	r3, #2
 80012d8:	2203      	movs	r2, #3
 80012da:	6938      	ldr	r0, [r7, #16]
 80012dc:	f002 febe 	bl	800405c <HAL_I2C_IsDeviceReady>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if(ina219_isReady == HAL_OK)
 80012e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d13a      	bne.n	8001364 <INA219_Init+0xb4>
	{
		INA219_Reset(ina219);	// Reset the INA219
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f000 f877 	bl	80013e2 <INA219_Reset>

		ina219->current_LSB = maxCurrent/pow(2.0, 15.0);
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <INA219_Init+0xd0>)
 80012fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012fe:	f7ff fa69 	bl	80007d4 <__aeabi_ddiv>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	6979      	ldr	r1, [r7, #20]
 8001308:	e9c1 2302 	strd	r2, r3, [r1, #8]

		double resistor = ((double)SHUNT_RESISTOR)/1000.0;
 800130c:	a318      	add	r3, pc, #96	@ (adr r3, 8001370 <INA219_Init+0xc0>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	e9c7 2308 	strd	r2, r3, [r7, #32]
		// Using datasheet formula
		uint16_t cal =  (uint16_t) floor(0.04096/(ina219->current_LSB * resistor));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800131c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001320:	f7ff f92e 	bl	8000580 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	a113      	add	r1, pc, #76	@ (adr r1, 8001378 <INA219_Init+0xc8>)
 800132a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800132e:	f7ff fa51 	bl	80007d4 <__aeabi_ddiv>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	ec43 2b17 	vmov	d7, r2, r3
 800133a:	eeb0 0a47 	vmov.f32	s0, s14
 800133e:	eef0 0a67 	vmov.f32	s1, s15
 8001342:	f004 fd19 	bl	8005d78 <floor>
 8001346:	ec53 2b10 	vmov	r2, r3, d0
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fbb1 	bl	8000ab4 <__aeabi_d2uiz>
 8001352:	4603      	mov	r3, r0
 8001354:	83fb      	strh	r3, [r7, #30]

		INA219_setCalibration(ina219, cal);
 8001356:	8bfb      	ldrh	r3, [r7, #30]
 8001358:	4619      	mov	r1, r3
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f000 f84f 	bl	80013fe <INA219_setCalibration>

		return 1;
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <INA219_Init+0xb6>
	}

	return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3730      	adds	r7, #48	@ 0x30
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	9999999a 	.word	0x9999999a
 8001374:	3fb99999 	.word	0x3fb99999
 8001378:	88e368f1 	.word	0x88e368f1
 800137c:	3fa4f8b5 	.word	0x3fa4f8b5
 8001380:	40e00000 	.word	0x40e00000

08001384 <INA219_ReadRawCurrent>:
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
	return ((result >> 3  ) * 4);
}

uint16_t INA219_ReadRawCurrent(INA219_t *ina219)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	return Read16(ina219, INA219_REG_CURRENT);
 800138c:	2104      	movs	r1, #4
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f846 	bl	8001420 <Read16>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <INA219_ReadCurrent>:

double INA219_ReadCurrent(INA219_t *ina219)
{
 800139e:	b5b0      	push	{r4, r5, r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadRawCurrent(ina219);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffec 	bl	8001384 <INA219_ReadRawCurrent>
 80013ac:	4603      	mov	r3, r0
 80013ae:	81fb      	strh	r3, [r7, #14]

	return ina219->current_LSB * result;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80013b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f876 	bl	80004ac <__aeabi_i2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4620      	mov	r0, r4
 80013c6:	4629      	mov	r1, r5
 80013c8:	f7ff f8da 	bl	8000580 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013d4:	eeb0 0a47 	vmov.f32	s0, s14
 80013d8:	eef0 0a67 	vmov.f32	s1, s15
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bdb0      	pop	{r4, r5, r7, pc}

080013e2 <INA219_Reset>:


/* === Configuration functions === */

void INA219_Reset(INA219_t *ina219)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 80013ea:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013ee:	2100      	movs	r1, #0
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 f841 	bl	8001478 <Write16>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <INA219_setCalibration>:
{
	Write16(ina219, INA219_REG_CONFIG, Config);
}

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	461a      	mov	r2, r3
 800140e:	2105      	movs	r1, #5
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f831 	bl	8001478 <Write16>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <Read16>:


/* === Read/Write register I2C functions === */

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af04      	add	r7, sp, #16
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	INA219_I2C_Status = HAL_I2C_Mem_Read(ina219->ina219_i2c, (ina219->Address << 1), Register, 1, Value, 2, HAL_MAX_DELAY);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	791b      	ldrb	r3, [r3, #4]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	b299      	uxth	r1, r3
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	b29a      	uxth	r2, r3
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2302      	movs	r3, #2
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	f002 fbd2 	bl	8003bf8 <HAL_I2C_Mem_Read>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <Read16+0x54>)
 800145a:	701a      	strb	r2, [r3, #0]

	return ((Value[0] << 8) | Value[1]);
 800145c:	7b3b      	ldrb	r3, [r7, #12]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	7b7b      	ldrb	r3, [r7, #13]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	b29b      	uxth	r3, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000138 	.word	0x20000138

08001478 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af04      	add	r7, sp, #16
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	70fb      	strb	r3, [r7, #3]
 8001484:	4613      	mov	r3, r2
 8001486:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // MSByte
 8001488:	883b      	ldrh	r3, [r7, #0]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	b29b      	uxth	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // LSByte
 8001492:	883b      	ldrh	r3, [r7, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	737b      	strb	r3, [r7, #13]
	INA219_I2C_Status = HAL_I2C_Mem_Write(ina219->ina219_i2c, (ina219->Address << 1), Register, 1, (uint8_t*)addr, 2, HAL_MAX_DELAY);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	791b      	ldrb	r3, [r3, #4]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	b299      	uxth	r1, r3
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	9302      	str	r3, [sp, #8]
 80014b0:	2302      	movs	r3, #2
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	f002 faa2 	bl	8003a04 <HAL_I2C_Mem_Write>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b02      	ldr	r3, [pc, #8]	@ (80014d0 <Write16+0x58>)
 80014c6:	701a      	strb	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000138 	.word	0x20000138

080014d4 <HAL_GPIO_EXTI_Callback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == Button_Pin) {
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d10a      	bne.n	80014fa <HAL_GPIO_EXTI_Callback+0x26>
    	if(gripper == 0){
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <HAL_GPIO_EXTI_Callback+0x34>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d103      	bne.n	80014f4 <HAL_GPIO_EXTI_Callback+0x20>
    		gripper = 1;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_GPIO_EXTI_Callback+0x34>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
    	}
    	else{
    		gripper = 0;
    	}
    }
}
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_EXTI_Callback+0x26>
    		gripper = 0;
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <HAL_GPIO_EXTI_Callback+0x34>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000148 	.word	0x20000148

0800150c <PI_Control>:

// PID control loop
float PI_Control(float setpoint, float current_value) {
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	ed87 0a01 	vstr	s0, [r7, #4]
 8001516:	edc7 0a00 	vstr	s1, [r7]
    error = setpoint - current_value;
 800151a:	ed97 7a01 	vldr	s14, [r7, #4]
 800151e:	edd7 7a00 	vldr	s15, [r7]
 8001522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001526:	4b30      	ldr	r3, [pc, #192]	@ (80015e8 <PI_Control+0xdc>)
 8001528:	edc3 7a00 	vstr	s15, [r3]
    integral += error;
 800152c:	4b2f      	ldr	r3, [pc, #188]	@ (80015ec <PI_Control+0xe0>)
 800152e:	ed93 7a00 	vldr	s14, [r3]
 8001532:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <PI_Control+0xdc>)
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153c:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <PI_Control+0xe0>)
 800153e:	edc3 7a00 	vstr	s15, [r3]
    derivative = error - previous_error;  // Derivata dell'errore
 8001542:	4b29      	ldr	r3, [pc, #164]	@ (80015e8 <PI_Control+0xdc>)
 8001544:	ed93 7a00 	vldr	s14, [r3]
 8001548:	4b29      	ldr	r3, [pc, #164]	@ (80015f0 <PI_Control+0xe4>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <PI_Control+0xe8>)
 8001554:	edc3 7a00 	vstr	s15, [r3]
    previous_error = error;                    // Aggiorna l'errore precedente
 8001558:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <PI_Control+0xdc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a24      	ldr	r2, [pc, #144]	@ (80015f0 <PI_Control+0xe4>)
 800155e:	6013      	str	r3, [r2, #0]

    // Calcola il valore di uscita PID
    float output = (Kp * error) + (Ki * integral) + (Kd * derivative);
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <PI_Control+0xec>)
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <PI_Control+0xdc>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001570:	4b22      	ldr	r3, [pc, #136]	@ (80015fc <PI_Control+0xf0>)
 8001572:	edd3 6a00 	vldr	s13, [r3]
 8001576:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <PI_Control+0xe0>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001584:	4b1e      	ldr	r3, [pc, #120]	@ (8001600 <PI_Control+0xf4>)
 8001586:	edd3 6a00 	vldr	s13, [r3]
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <PI_Control+0xe8>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001598:	edc7 7a03 	vstr	s15, [r7, #12]

    // Limita l'output tra i valori massimi e minimi del PWM
    if (output > pwm_max) {
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <PI_Control+0xf8>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80015a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ae:	dd03      	ble.n	80015b8 <PI_Control+0xac>
        output = pwm_max;
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <PI_Control+0xf8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e00c      	b.n	80015d2 <PI_Control+0xc6>
    } else if (output < pwm_min) {
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <PI_Control+0xfc>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ed97 7a03 	vldr	s14, [r7, #12]
 80015c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	d502      	bpl.n	80015d2 <PI_Control+0xc6>
        output = pwm_min;
 80015cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <PI_Control+0xfc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
    /*
    if (output == pwm_max || output == pwm_min) {
    	integral -= error; // riduci l'accumulo integrale
    }
    */
    return output;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	ee07 3a90 	vmov	s15, r3
}
 80015d8:	eeb0 0a67 	vmov.f32	s0, s15
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000174 	.word	0x20000174
 80015ec:	20000164 	.word	0x20000164
 80015f0:	20000160 	.word	0x20000160
 80015f4:	20000168 	.word	0x20000168
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000004 	.word	0x20000004
 8001600:	20000008 	.word	0x20000008
 8001604:	2000000c 	.word	0x2000000c
 8001608:	2000016c 	.word	0x2000016c

0800160c <Control_Loop>:

void Control_Loop(float setpoint) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	ed87 0a01 	vstr	s0, [r7, #4]

    // Leggi la corrente attuale dal sensore
    current_value = INA219_ReadCurrent(&ina219);
 8001616:	4815      	ldr	r0, [pc, #84]	@ (800166c <Control_Loop+0x60>)
 8001618:	f7ff fec1 	bl	800139e <INA219_ReadCurrent>
 800161c:	ec53 2b10 	vmov	r2, r3, d0
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa66 	bl	8000af4 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	4a11      	ldr	r2, [pc, #68]	@ (8001670 <Control_Loop+0x64>)
 800162c:	6013      	str	r3, [r2, #0]

    // Applica il controllo PID per regolare il PWM in base alla corrente
    pwm_value = PI_Control(setpoint, current_value);
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <Control_Loop+0x64>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	eef0 0a67 	vmov.f32	s1, s15
 8001638:	ed97 0a01 	vldr	s0, [r7, #4]
 800163c:	f7ff ff66 	bl	800150c <PI_Control>
 8001640:	eef0 7a40 	vmov.f32	s15, s0
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <Control_Loop+0x68>)
 8001646:	edc3 7a00 	vstr	s15, [r3]

    // Imposta il valore di PWM calcolato per il servo
    PCA9685_SetPin(4, pwm_value, 0);
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <Control_Loop+0x68>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001654:	ee17 3a90 	vmov	r3, s15
 8001658:	b29b      	uxth	r3, r3
 800165a:	2200      	movs	r2, #0
 800165c:	4619      	mov	r1, r3
 800165e:	2004      	movs	r0, #4
 8001660:	f000 facc 	bl	8001bfc <PCA9685_SetPin>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000150 	.word	0x20000150
 8001670:	2000017c 	.word	0x2000017c
 8001674:	20000170 	.word	0x20000170

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167c:	f000 fca4 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001680:	f000 f8e8 	bl	8001854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001684:	f7ff fd1a 	bl	80010bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001688:	f7ff fcf8 	bl	800107c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800168c:	f000 fc00 	bl	8001e90 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001690:	f7ff fd98 	bl	80011c4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001694:	f7ff fbf6 	bl	8000e84 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcValues, 4);  // Avvia l'ADC in modalità DMA
 8001698:	2204      	movs	r2, #4
 800169a:	4965      	ldr	r1, [pc, #404]	@ (8001830 <main+0x1b8>)
 800169c:	4865      	ldr	r0, [pc, #404]	@ (8001834 <main+0x1bc>)
 800169e:	f000 fd49 	bl	8002134 <HAL_ADC_Start_DMA>

  PCA9685_Init(&hi2c1);
 80016a2:	4865      	ldr	r0, [pc, #404]	@ (8001838 <main+0x1c0>)
 80016a4:	f000 fb64 	bl	8001d70 <PCA9685_Init>
  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS, 0.500)){}
 80016a8:	bf00      	nop
 80016aa:	ed9f 0b5f 	vldr	d0, [pc, #380]	@ 8001828 <main+0x1b0>
 80016ae:	2241      	movs	r2, #65	@ 0x41
 80016b0:	4961      	ldr	r1, [pc, #388]	@ (8001838 <main+0x1c0>)
 80016b2:	4862      	ldr	r0, [pc, #392]	@ (800183c <main+0x1c4>)
 80016b4:	f7ff fdfc 	bl	80012b0 <INA219_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f5      	beq.n	80016aa <main+0x32>

  // Debug I2C
  if (HAL_I2C_IsDeviceReady(&hi2c1, PCA9685_ADDRESS, 1, HAL_MAX_DELAY) != HAL_OK) {
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	2201      	movs	r2, #1
 80016c4:	2180      	movs	r1, #128	@ 0x80
 80016c6:	485c      	ldr	r0, [pc, #368]	@ (8001838 <main+0x1c0>)
 80016c8:	f002 fcc8 	bl	800405c <HAL_I2C_IsDeviceReady>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <main+0x5e>
        // Errore: il dispositivo non risponde
        Error_Handler();
 80016d2:	f000 f931 	bl	8001938 <Error_Handler>
    }

  if (HAL_I2C_IsDeviceReady(&hi2c1, INA219_ADDRESS<<1, 1, HAL_MAX_DELAY) != HAL_OK) {
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	2201      	movs	r2, #1
 80016dc:	2182      	movs	r1, #130	@ 0x82
 80016de:	4856      	ldr	r0, [pc, #344]	@ (8001838 <main+0x1c0>)
 80016e0:	f002 fcbc 	bl	800405c <HAL_I2C_IsDeviceReady>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <main+0x76>
      // Errore: il dispositivo non risponde
      Error_Handler();
 80016ea:	f000 f925 	bl	8001938 <Error_Handler>
  }

  PCA9685_SetServoAngle(0, 0);
 80016ee:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8001840 <main+0x1c8>
 80016f2:	2000      	movs	r0, #0
 80016f4:	f000 fae0 	bl	8001cb8 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(1, 0);
 80016f8:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8001840 <main+0x1c8>
 80016fc:	2001      	movs	r0, #1
 80016fe:	f000 fadb 	bl	8001cb8 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(2, 0);
 8001702:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8001840 <main+0x1c8>
 8001706:	2002      	movs	r0, #2
 8001708:	f000 fad6 	bl	8001cb8 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(3, 0);
 800170c:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8001840 <main+0x1c8>
 8001710:	2003      	movs	r0, #3
 8001712:	f000 fad1 	bl	8001cb8 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(4, 0);
 8001716:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8001840 <main+0x1c8>
 800171a:	2004      	movs	r0, #4
 800171c:	f000 facc 	bl	8001cb8 <PCA9685_SetServoAngle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  angles[0] = (uint8_t)((adcValues[0]*180)/4096);
 8001720:	4b43      	ldr	r3, [pc, #268]	@ (8001830 <main+0x1b8>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	23b4      	movs	r3, #180	@ 0xb4
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	da01      	bge.n	8001734 <main+0xbc>
 8001730:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001734:	131b      	asrs	r3, r3, #12
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b42      	ldr	r3, [pc, #264]	@ (8001844 <main+0x1cc>)
 800173a:	701a      	strb	r2, [r3, #0]
	  angles[1] = (uint8_t)((adcValues[1]*180)/4096);
 800173c:	4b3c      	ldr	r3, [pc, #240]	@ (8001830 <main+0x1b8>)
 800173e:	885b      	ldrh	r3, [r3, #2]
 8001740:	461a      	mov	r2, r3
 8001742:	23b4      	movs	r3, #180	@ 0xb4
 8001744:	fb02 f303 	mul.w	r3, r2, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	da01      	bge.n	8001750 <main+0xd8>
 800174c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001750:	131b      	asrs	r3, r3, #12
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b3b      	ldr	r3, [pc, #236]	@ (8001844 <main+0x1cc>)
 8001756:	705a      	strb	r2, [r3, #1]
	  angles[2] = (uint8_t)((adcValues[2]*180)/4096);
 8001758:	4b35      	ldr	r3, [pc, #212]	@ (8001830 <main+0x1b8>)
 800175a:	889b      	ldrh	r3, [r3, #4]
 800175c:	461a      	mov	r2, r3
 800175e:	23b4      	movs	r3, #180	@ 0xb4
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	da01      	bge.n	800176c <main+0xf4>
 8001768:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800176c:	131b      	asrs	r3, r3, #12
 800176e:	b2da      	uxtb	r2, r3
 8001770:	4b34      	ldr	r3, [pc, #208]	@ (8001844 <main+0x1cc>)
 8001772:	709a      	strb	r2, [r3, #2]
	  angles[3] = (uint8_t)((adcValues[3]*180)/4096);
 8001774:	4b2e      	ldr	r3, [pc, #184]	@ (8001830 <main+0x1b8>)
 8001776:	88db      	ldrh	r3, [r3, #6]
 8001778:	461a      	mov	r2, r3
 800177a:	23b4      	movs	r3, #180	@ 0xb4
 800177c:	fb02 f303 	mul.w	r3, r2, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	da01      	bge.n	8001788 <main+0x110>
 8001784:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001788:	131b      	asrs	r3, r3, #12
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b2d      	ldr	r3, [pc, #180]	@ (8001844 <main+0x1cc>)
 800178e:	70da      	strb	r2, [r3, #3]

	  PCA9685_SetServoAngle(0, angles[0]);
 8001790:	4b2c      	ldr	r3, [pc, #176]	@ (8001844 <main+0x1cc>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800179c:	eeb0 0a67 	vmov.f32	s0, s15
 80017a0:	2000      	movs	r0, #0
 80017a2:	f000 fa89 	bl	8001cb8 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(1, angles[1]);
 80017a6:	4b27      	ldr	r3, [pc, #156]	@ (8001844 <main+0x1cc>)
 80017a8:	785b      	ldrb	r3, [r3, #1]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b2:	eeb0 0a67 	vmov.f32	s0, s15
 80017b6:	2001      	movs	r0, #1
 80017b8:	f000 fa7e 	bl	8001cb8 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(2, angles[2]);
 80017bc:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <main+0x1cc>)
 80017be:	789b      	ldrb	r3, [r3, #2]
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c8:	eeb0 0a67 	vmov.f32	s0, s15
 80017cc:	2002      	movs	r0, #2
 80017ce:	f000 fa73 	bl	8001cb8 <PCA9685_SetServoAngle>
	  PCA9685_SetServoAngle(3, angles[3]);
 80017d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <main+0x1cc>)
 80017d4:	78db      	ldrb	r3, [r3, #3]
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017de:	eeb0 0a67 	vmov.f32	s0, s15
 80017e2:	2003      	movs	r0, #3
 80017e4:	f000 fa68 	bl	8001cb8 <PCA9685_SetServoAngle>


	  if(gripper == 1){
 80017e8:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <main+0x1d0>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d10a      	bne.n	8001806 <main+0x18e>
		  setpoint = 0.300;
 80017f0:	4b16      	ldr	r3, [pc, #88]	@ (800184c <main+0x1d4>)
 80017f2:	4a17      	ldr	r2, [pc, #92]	@ (8001850 <main+0x1d8>)
 80017f4:	601a      	str	r2, [r3, #0]
		  Control_Loop(setpoint);
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <main+0x1d4>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001800:	f7ff ff04 	bl	800160c <Control_Loop>
 8001804:	e78c      	b.n	8001720 <main+0xa8>
	  }
	  else if (gripper == 0){
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <main+0x1d0>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d188      	bne.n	8001720 <main+0xa8>
		  setpoint = 0;
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <main+0x1d4>)
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
		  PCA9685_SetServoAngle(4, 0);
 8001816:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001840 <main+0x1c8>
 800181a:	2004      	movs	r0, #4
 800181c:	f000 fa4c 	bl	8001cb8 <PCA9685_SetServoAngle>
	  angles[0] = (uint8_t)((adcValues[0]*180)/4096);
 8001820:	e77e      	b.n	8001720 <main+0xa8>
 8001822:	bf00      	nop
 8001824:	f3af 8000 	nop.w
 8001828:	00000000 	.word	0x00000000
 800182c:	3fe00000 	.word	0x3fe00000
 8001830:	2000013c 	.word	0x2000013c
 8001834:	2000003c 	.word	0x2000003c
 8001838:	200000e4 	.word	0x200000e4
 800183c:	20000150 	.word	0x20000150
 8001840:	00000000 	.word	0x00000000
 8001844:	20000144 	.word	0x20000144
 8001848:	20000148 	.word	0x20000148
 800184c:	20000178 	.word	0x20000178
 8001850:	3e99999a 	.word	0x3e99999a

08001854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b094      	sub	sp, #80	@ 0x50
 8001858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	2234      	movs	r2, #52	@ 0x34
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f004 fa5a 	bl	8005d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	4b2c      	ldr	r3, [pc, #176]	@ (8001930 <SystemClock_Config+0xdc>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001880:	4a2b      	ldr	r2, [pc, #172]	@ (8001930 <SystemClock_Config+0xdc>)
 8001882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001886:	6413      	str	r3, [r2, #64]	@ 0x40
 8001888:	4b29      	ldr	r3, [pc, #164]	@ (8001930 <SystemClock_Config+0xdc>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001894:	2300      	movs	r3, #0
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	4b26      	ldr	r3, [pc, #152]	@ (8001934 <SystemClock_Config+0xe0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a25      	ldr	r2, [pc, #148]	@ (8001934 <SystemClock_Config+0xe0>)
 800189e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <SystemClock_Config+0xe0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b0:	2301      	movs	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ba:	2302      	movs	r3, #2
 80018bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018c4:	2304      	movs	r3, #4
 80018c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018c8:	23b4      	movs	r3, #180	@ 0xb4
 80018ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fcbb 	bl	8005258 <HAL_RCC_OscConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018e8:	f000 f826 	bl	8001938 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018ec:	f003 f91a 	bl	8004b24 <HAL_PWREx_EnableOverDrive>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018f6:	f000 f81f 	bl	8001938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fa:	230f      	movs	r3, #15
 80018fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fe:	2302      	movs	r3, #2
 8001900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001906:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800190a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800190c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001910:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	2105      	movs	r1, #5
 8001918:	4618      	mov	r0, r3
 800191a:	f003 f953 	bl	8004bc4 <HAL_RCC_ClockConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001924:	f000 f808 	bl	8001938 <Error_Handler>
  }
}
 8001928:	bf00      	nop
 800192a:	3750      	adds	r7, #80	@ 0x50
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	40007000 	.word	0x40007000

08001938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800193c:	b672      	cpsid	i
}
 800193e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <Error_Handler+0x8>

08001944 <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af04      	add	r7, sp, #16
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	460b      	mov	r3, r1
 8001950:	71bb      	strb	r3, [r7, #6]
 8001952:	4613      	mov	r3, r2
 8001954:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 8001956:	797b      	ldrb	r3, [r7, #5]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <PCA9685_SetBit+0x1c>
 800195c:	2301      	movs	r3, #1
 800195e:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001960:	4b24      	ldr	r3, [pc, #144]	@ (80019f4 <PCA9685_SetBit+0xb0>)
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	b29a      	uxth	r2, r3
 8001968:	230a      	movs	r3, #10
 800196a:	9302      	str	r3, [sp, #8]
 800196c:	2301      	movs	r3, #1
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	f107 030f 	add.w	r3, r7, #15
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2301      	movs	r3, #1
 8001978:	2180      	movs	r1, #128	@ 0x80
 800197a:	f002 f93d 	bl	8003bf8 <HAL_I2C_Mem_Read>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e031      	b.n	80019ec <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	2201      	movs	r2, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	b25b      	sxtb	r3, r3
 8001992:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001996:	b25b      	sxtb	r3, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	b25a      	sxtb	r2, r3
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	4013      	ands	r3, r2
 80019a2:	b25b      	sxtb	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 80019a8:	797b      	ldrb	r3, [r7, #5]
 80019aa:	f003 0201 	and.w	r2, r3, #1
 80019ae:	79bb      	ldrb	r3, [r7, #6]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	b25a      	sxtb	r2, r3
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <PCA9685_SetBit+0xb0>)
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	230a      	movs	r3, #10
 80019cc:	9302      	str	r3, [sp, #8]
 80019ce:	2301      	movs	r3, #1
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	f107 030f 	add.w	r3, r7, #15
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2301      	movs	r3, #1
 80019da:	2180      	movs	r1, #128	@ 0x80
 80019dc:	f002 f812 	bl	8003a04 <HAL_I2C_Mem_Write>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000180 	.word	0x20000180

080019f8 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 80019fe:	2306      	movs	r3, #6
 8001a00:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <PCA9685_SoftwareReset+0x30>)
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	1dfa      	adds	r2, r7, #7
 8001a08:	230a      	movs	r3, #10
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	2100      	movs	r1, #0
 8001a10:	f001 fefa 	bl	8003808 <HAL_I2C_Master_Transmit>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000180 	.word	0x20000180

08001a2c <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff ff81 	bl	8001944 <PCA9685_SetBit>
 8001a42:	4603      	mov	r3, r0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2107      	movs	r1, #7
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff ff71 	bl	8001944 <PCA9685_SetBit>
 8001a62:	4603      	mov	r3, r0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2105      	movs	r1, #5
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff ff61 	bl	8001944 <PCA9685_SetBit>
 8001a82:	4603      	mov	r3, r0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	0000      	movs	r0, r0
	...

08001a90 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af04      	add	r7, sp, #16
 8001a96:	4603      	mov	r3, r0
 8001a98:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d902      	bls.n	8001aaa <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	72fb      	strb	r3, [r7, #11]
 8001aa8:	e046      	b.n	8001b38 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	2b18      	cmp	r3, #24
 8001aae:	d802      	bhi.n	8001ab6 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001ab0:	23ff      	movs	r3, #255	@ 0xff
 8001ab2:	72fb      	strb	r3, [r7, #11]
 8001ab4:	e040      	b.n	8001b38 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ac0:	ee17 0a90 	vmov	r0, s15
 8001ac4:	f7fe fd04 	bl	80004d0 <__aeabi_f2d>
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <PCA9685_SetPwmFrequency+0xe8>)
 8001ace:	f7fe fd57 	bl	8000580 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	a126      	add	r1, pc, #152	@ (adr r1, 8001b70 <PCA9685_SetPwmFrequency+0xe0>)
 8001ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001adc:	f7fe fe7a 	bl	80007d4 <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <PCA9685_SetPwmFrequency+0xec>)
 8001aee:	f7fe fb8f 	bl	8000210 <__aeabi_dsub>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7fe fffb 	bl	8000af4 <__aeabi_d2f>
 8001afe:	4603      	mov	r3, r0
 8001b00:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f7fe fce4 	bl	80004d0 <__aeabi_f2d>
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b80 <PCA9685_SetPwmFrequency+0xf0>)
 8001b0e:	f7fe fb81 	bl	8000214 <__adddf3>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	ec43 2b17 	vmov	d7, r2, r3
 8001b1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b1e:	eef0 0a67 	vmov.f32	s1, s15
 8001b22:	f004 f929 	bl	8005d78 <floor>
 8001b26:	ec53 2b10 	vmov	r2, r3, d0
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f7fe ffc1 	bl	8000ab4 <__aeabi_d2uiz>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f7ff ff77 	bl	8001a2c <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <PCA9685_SetPwmFrequency+0xf4>)
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	230a      	movs	r3, #10
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	2301      	movs	r3, #1
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	f107 030b 	add.w	r3, r7, #11
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2301      	movs	r3, #1
 8001b52:	22fe      	movs	r2, #254	@ 0xfe
 8001b54:	2180      	movs	r1, #128	@ 0x80
 8001b56:	f001 ff55 	bl	8003a04 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7ff ff66 	bl	8001a2c <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001b60:	2001      	movs	r0, #1
 8001b62:	f7ff ff73 	bl	8001a4c <PCA9685_RestartMode>
	return PCA9685_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	00000000 	.word	0x00000000
 8001b74:	4177d784 	.word	0x4177d784
 8001b78:	40b00000 	.word	0x40b00000
 8001b7c:	3ff00000 	.word	0x3ff00000
 8001b80:	3fe00000 	.word	0x3fe00000
 8001b84:	20000180 	.word	0x20000180

08001b88 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af04      	add	r7, sp, #16
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
 8001b92:	460b      	mov	r3, r1
 8001b94:	80bb      	strh	r3, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	3306      	adds	r3, #6
 8001ba2:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8001ba4:	88bb      	ldrh	r3, [r7, #4]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8001baa:	88bb      	ldrh	r3, [r7, #4]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <PCA9685_SetPwm+0x70>)
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	230a      	movs	r3, #10
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2301      	movs	r3, #1
 8001bdc:	2180      	movs	r1, #128	@ 0x80
 8001bde:	f001 ff11 	bl	8003a04 <HAL_I2C_Mem_Write>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000180 	.word	0x20000180

08001bfc <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
 8001c06:	460b      	mov	r3, r1
 8001c08:	80bb      	strh	r3, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 8001c0e:	88bb      	ldrh	r3, [r7, #4]
 8001c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c14:	d302      	bcc.n	8001c1c <PCA9685_SetPin+0x20>
 8001c16:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001c1a:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d025      	beq.n	8001c6e <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8001c22:	88bb      	ldrh	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d108      	bne.n	8001c3a <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ffa9 	bl	8001b88 <PCA9685_SetPwm>
 8001c36:	4603      	mov	r3, r0
 8001c38:	e03a      	b.n	8001cb0 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8001c3a:	88bb      	ldrh	r3, [r7, #4]
 8001c3c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d108      	bne.n	8001c56 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff9b 	bl	8001b88 <PCA9685_SetPwm>
 8001c52:	4603      	mov	r3, r0
 8001c54:	e02c      	b.n	8001cb0 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8001c56:	88bb      	ldrh	r3, [r7, #4]
 8001c58:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001c5c:	330f      	adds	r3, #15
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff8f 	bl	8001b88 <PCA9685_SetPwm>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	e020      	b.n	8001cb0 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8001c6e:	88bb      	ldrh	r3, [r7, #4]
 8001c70:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d108      	bne.n	8001c8a <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff81 	bl	8001b88 <PCA9685_SetPwm>
 8001c86:	4603      	mov	r3, r0
 8001c88:	e012      	b.n	8001cb0 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8001c8a:	88bb      	ldrh	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d108      	bne.n	8001ca2 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff75 	bl	8001b88 <PCA9685_SetPwm>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	e006      	b.n	8001cb0 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8001ca2:	88ba      	ldrh	r2, [r7, #4]
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff6d 	bl	8001b88 <PCA9685_SetPwm>
 8001cae:	4603      	mov	r3, r0
    }
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	ed87 0a00 	vstr	s0, [r7]
 8001cc4:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8001cc6:	edd7 7a00 	vldr	s15, [r7]
 8001cca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd2:	d502      	bpl.n	8001cda <PCA9685_SetServoAngle+0x22>
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8001cda:	edd7 7a00 	vldr	s15, [r7]
 8001cde:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001d60 <PCA9685_SetServoAngle+0xa8>
 8001ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	dd01      	ble.n	8001cf0 <PCA9685_SetServoAngle+0x38>
 8001cec:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <PCA9685_SetServoAngle+0xac>)
 8001cee:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001cf0:	6838      	ldr	r0, [r7, #0]
 8001cf2:	f7fe fbed 	bl	80004d0 <__aeabi_f2d>
 8001cf6:	a318      	add	r3, pc, #96	@ (adr r3, 8001d58 <PCA9685_SetServoAngle+0xa0>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fc40 	bl	8000580 <__aeabi_dmul>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <PCA9685_SetServoAngle+0xb0>)
 8001d0e:	f7fe fd61 	bl	80007d4 <__aeabi_ddiv>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <PCA9685_SetServoAngle+0xb4>)
 8001d20:	f7fe fa78 	bl	8000214 <__adddf3>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe fee2 	bl	8000af4 <__aeabi_d2f>
 8001d30:	4603      	mov	r3, r0
 8001d32:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8001d34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d3c:	ee17 3a90 	vmov	r3, s15
 8001d40:	b299      	uxth	r1, r3
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2200      	movs	r2, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff58 	bl	8001bfc <PCA9685_SetPin>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	40786000 	.word	0x40786000
 8001d60:	43340000 	.word	0x43340000
 8001d64:	43340000 	.word	0x43340000
 8001d68:	40668000 	.word	0x40668000
 8001d6c:	405b8000 	.word	0x405b8000

08001d70 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001d78:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <PCA9685_Init+0x28>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8001d7e:	f7ff fe3b 	bl	80019f8 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8001d82:	2030      	movs	r0, #48	@ 0x30
 8001d84:	f7ff fe84 	bl	8001a90 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f7ff fe6f 	bl	8001a6c <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000180 	.word	0x20000180

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	4a0f      	ldr	r2, [pc, #60]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db2:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	4a08      	ldr	r2, [pc, #32]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001dda:	2005      	movs	r0, #5
 8001ddc:	f000 fe58 	bl	8002a90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800

08001dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <NMI_Handler+0x4>

08001df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <HardFault_Handler+0x4>

08001dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <MemManage_Handler+0x4>

08001e04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <BusFault_Handler+0x4>

08001e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <UsageFault_Handler+0x4>

08001e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e42:	f000 f913 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f001 fb7e 	bl	8003550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <DMA2_Stream0_IRQHandler+0x10>)
 8001e5e:	f000 ff5f 	bl	8002d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000084 	.word	0x20000084

08001e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <SystemInit+0x20>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e76:	4a05      	ldr	r2, [pc, #20]	@ (8001e8c <SystemInit+0x20>)
 8001e78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	@ (8001ee0 <MX_USART2_UART_Init+0x50>)
 8001e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001e9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	@ (8001edc <MX_USART2_UART_Init+0x4c>)
 8001ec8:	f003 fc64 	bl	8005794 <HAL_UART_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ed2:	f7ff fd31 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000184 	.word	0x20000184
 8001ee0:	40004400 	.word	0x40004400

08001ee4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	@ (8001f68 <HAL_UART_MspInit+0x84>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12b      	bne.n	8001f5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <HAL_UART_MspInit+0x88>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	4a17      	ldr	r2, [pc, #92]	@ (8001f6c <HAL_UART_MspInit+0x88>)
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <HAL_UART_MspInit+0x88>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_UART_MspInit+0x88>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	4a10      	ldr	r2, [pc, #64]	@ (8001f6c <HAL_UART_MspInit+0x88>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <HAL_UART_MspInit+0x88>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f3e:	230c      	movs	r3, #12
 8001f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f4e:	2307      	movs	r3, #7
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <HAL_UART_MspInit+0x8c>)
 8001f5a:	f001 f94b 	bl	80031f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f5e:	bf00      	nop
 8001f60:	3728      	adds	r7, #40	@ 0x28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40004400 	.word	0x40004400
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020000 	.word	0x40020000

08001f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f78:	f7ff ff78 	bl	8001e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f7c:	480c      	ldr	r0, [pc, #48]	@ (8001fb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f7e:	490d      	ldr	r1, [pc, #52]	@ (8001fb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f80:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f84:	e002      	b.n	8001f8c <LoopCopyDataInit>

08001f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8a:	3304      	adds	r3, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f90:	d3f9      	bcc.n	8001f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f94:	4c0a      	ldr	r4, [pc, #40]	@ (8001fc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f98:	e001      	b.n	8001f9e <LoopFillZerobss>

08001f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f9c:	3204      	adds	r2, #4

08001f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa0:	d3fb      	bcc.n	8001f9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f003 fec3 	bl	8005d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa6:	f7ff fb67 	bl	8001678 <main>
  bx  lr    
 8001faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001fb8:	08005eb8 	.word	0x08005eb8
  ldr r2, =_sbss
 8001fbc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001fc0:	200001d0 	.word	0x200001d0

08001fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <HAL_Init+0x40>)
 8001fd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <HAL_Init+0x40>)
 8001fde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe4:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a07      	ldr	r2, [pc, #28]	@ (8002008 <HAL_Init+0x40>)
 8001fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 fd4d 	bl	8002a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f000 f808 	bl	800200c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffc:	f7ff fece 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00

0800200c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002014:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_InitTick+0x54>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <HAL_InitTick+0x58>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002022:	fbb3 f3f1 	udiv	r3, r3, r1
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fd65 	bl	8002afa <HAL_SYSTICK_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e00e      	b.n	8002058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d80a      	bhi.n	8002056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f000 fd2d 	bl	8002aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800204c:	4a06      	ldr	r2, [pc, #24]	@ (8002068 <HAL_InitTick+0x5c>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000010 	.word	0x20000010
 8002064:	20000018 	.word	0x20000018
 8002068:	20000014 	.word	0x20000014

0800206c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_IncTick+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_IncTick+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <HAL_IncTick+0x24>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000018 	.word	0x20000018
 8002090:	200001cc 	.word	0x200001cc

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	200001cc 	.word	0x200001cc

080020ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e033      	b.n	800212a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe ff56 	bl	8000f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d118      	bne.n	800211c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020f2:	f023 0302 	bic.w	r3, r3, #2
 80020f6:	f043 0202 	orr.w	r2, r3, #2
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fa78 	bl	80025f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	641a      	str	r2, [r3, #64]	@ 0x40
 800211a:	e001      	b.n	8002120 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_ADC_Start_DMA+0x1e>
 800214e:	2302      	movs	r3, #2
 8002150:	e0e9      	b.n	8002326 <HAL_ADC_Start_DMA+0x1f2>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	d018      	beq.n	800219a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002178:	4b6d      	ldr	r3, [pc, #436]	@ (8002330 <HAL_ADC_Start_DMA+0x1fc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a6d      	ldr	r2, [pc, #436]	@ (8002334 <HAL_ADC_Start_DMA+0x200>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0c9a      	lsrs	r2, r3, #18
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800218c:	e002      	b.n	8002194 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	3b01      	subs	r3, #1
 8002192:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f9      	bne.n	800218e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021a8:	d107      	bne.n	80021ba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021b8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	f040 80a1 	bne.w	800230c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002208:	d106      	bne.n	8002218 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	f023 0206 	bic.w	r2, r3, #6
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44
 8002216:	e002      	b.n	800221e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002226:	4b44      	ldr	r3, [pc, #272]	@ (8002338 <HAL_ADC_Start_DMA+0x204>)
 8002228:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222e:	4a43      	ldr	r2, [pc, #268]	@ (800233c <HAL_ADC_Start_DMA+0x208>)
 8002230:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002236:	4a42      	ldr	r2, [pc, #264]	@ (8002340 <HAL_ADC_Start_DMA+0x20c>)
 8002238:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800223e:	4a41      	ldr	r2, [pc, #260]	@ (8002344 <HAL_ADC_Start_DMA+0x210>)
 8002240:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800224a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800225a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800226a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	334c      	adds	r3, #76	@ 0x4c
 8002276:	4619      	mov	r1, r3
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f000 fcf8 	bl	8002c70 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	2b00      	cmp	r3, #0
 800228a:	d12a      	bne.n	80022e2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a2d      	ldr	r2, [pc, #180]	@ (8002348 <HAL_ADC_Start_DMA+0x214>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d015      	beq.n	80022c2 <HAL_ADC_Start_DMA+0x18e>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a2c      	ldr	r2, [pc, #176]	@ (800234c <HAL_ADC_Start_DMA+0x218>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d105      	bne.n	80022ac <HAL_ADC_Start_DMA+0x178>
 80022a0:	4b25      	ldr	r3, [pc, #148]	@ (8002338 <HAL_ADC_Start_DMA+0x204>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a27      	ldr	r2, [pc, #156]	@ (8002350 <HAL_ADC_Start_DMA+0x21c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d136      	bne.n	8002324 <HAL_ADC_Start_DMA+0x1f0>
 80022b6:	4b20      	ldr	r3, [pc, #128]	@ (8002338 <HAL_ADC_Start_DMA+0x204>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d130      	bne.n	8002324 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d129      	bne.n	8002324 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	e020      	b.n	8002324 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a18      	ldr	r2, [pc, #96]	@ (8002348 <HAL_ADC_Start_DMA+0x214>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d11b      	bne.n	8002324 <HAL_ADC_Start_DMA+0x1f0>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d114      	bne.n	8002324 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	e00b      	b.n	8002324 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	f043 0210 	orr.w	r2, r3, #16
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231c:	f043 0201 	orr.w	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000010 	.word	0x20000010
 8002334:	431bde83 	.word	0x431bde83
 8002338:	40012300 	.word	0x40012300
 800233c:	080027ed 	.word	0x080027ed
 8002340:	080028a7 	.word	0x080028a7
 8002344:	080028c3 	.word	0x080028c3
 8002348:	40012000 	.word	0x40012000
 800234c:	40012100 	.word	0x40012100
 8002350:	40012200 	.word	0x40012200

08002354 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x1c>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e113      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x244>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b09      	cmp	r3, #9
 80023ba:	d925      	bls.n	8002408 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68d9      	ldr	r1, [r3, #12]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	3b1e      	subs	r3, #30
 80023d2:	2207      	movs	r2, #7
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43da      	mvns	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	400a      	ands	r2, r1
 80023e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68d9      	ldr	r1, [r3, #12]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	4603      	mov	r3, r0
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4403      	add	r3, r0
 80023fa:	3b1e      	subs	r3, #30
 80023fc:	409a      	lsls	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	e022      	b.n	800244e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6919      	ldr	r1, [r3, #16]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	2207      	movs	r2, #7
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	400a      	ands	r2, r1
 800242a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6919      	ldr	r1, [r3, #16]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	4618      	mov	r0, r3
 800243e:	4603      	mov	r3, r0
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4403      	add	r3, r0
 8002444:	409a      	lsls	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b06      	cmp	r3, #6
 8002454:	d824      	bhi.n	80024a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	3b05      	subs	r3, #5
 8002468:	221f      	movs	r2, #31
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	400a      	ands	r2, r1
 8002476:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	4618      	mov	r0, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3b05      	subs	r3, #5
 8002492:	fa00 f203 	lsl.w	r2, r0, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34
 800249e:	e04c      	b.n	800253a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b0c      	cmp	r3, #12
 80024a6:	d824      	bhi.n	80024f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	3b23      	subs	r3, #35	@ 0x23
 80024ba:	221f      	movs	r2, #31
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43da      	mvns	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	400a      	ands	r2, r1
 80024c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	4618      	mov	r0, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	3b23      	subs	r3, #35	@ 0x23
 80024e4:	fa00 f203 	lsl.w	r2, r0, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80024f0:	e023      	b.n	800253a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	3b41      	subs	r3, #65	@ 0x41
 8002504:	221f      	movs	r2, #31
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	400a      	ands	r2, r1
 8002512:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b29b      	uxth	r3, r3
 8002520:	4618      	mov	r0, r3
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	3b41      	subs	r3, #65	@ 0x41
 800252e:	fa00 f203 	lsl.w	r2, r0, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800253a:	4b29      	ldr	r3, [pc, #164]	@ (80025e0 <HAL_ADC_ConfigChannel+0x250>)
 800253c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a28      	ldr	r2, [pc, #160]	@ (80025e4 <HAL_ADC_ConfigChannel+0x254>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d10f      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x1d8>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b12      	cmp	r3, #18
 800254e:	d10b      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1d      	ldr	r2, [pc, #116]	@ (80025e4 <HAL_ADC_ConfigChannel+0x254>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d12b      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x23a>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1c      	ldr	r2, [pc, #112]	@ (80025e8 <HAL_ADC_ConfigChannel+0x258>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d003      	beq.n	8002584 <HAL_ADC_ConfigChannel+0x1f4>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b11      	cmp	r3, #17
 8002582:	d122      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <HAL_ADC_ConfigChannel+0x258>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d111      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025a6:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <HAL_ADC_ConfigChannel+0x25c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a11      	ldr	r2, [pc, #68]	@ (80025f0 <HAL_ADC_ConfigChannel+0x260>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	0c9a      	lsrs	r2, r3, #18
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025bc:	e002      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f9      	bne.n	80025be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40012300 	.word	0x40012300
 80025e4:	40012000 	.word	0x40012000
 80025e8:	10000012 	.word	0x10000012
 80025ec:	20000010 	.word	0x20000010
 80025f0:	431bde83 	.word	0x431bde83

080025f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025fc:	4b79      	ldr	r3, [pc, #484]	@ (80027e4 <ADC_Init+0x1f0>)
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	431a      	orrs	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	021a      	lsls	r2, r3, #8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800264c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800266e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6899      	ldr	r1, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002686:	4a58      	ldr	r2, [pc, #352]	@ (80027e8 <ADC_Init+0x1f4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d022      	beq.n	80026d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800269a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6899      	ldr	r1, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6899      	ldr	r1, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	e00f      	b.n	80026f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0202 	bic.w	r2, r2, #2
 8002700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6899      	ldr	r1, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7e1b      	ldrb	r3, [r3, #24]
 800270c:	005a      	lsls	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01b      	beq.n	8002758 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800272e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800273e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	3b01      	subs	r3, #1
 800274c:	035a      	lsls	r2, r3, #13
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	e007      	b.n	8002768 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002766:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	3b01      	subs	r3, #1
 8002784:	051a      	lsls	r2, r3, #20
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800279c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6899      	ldr	r1, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027aa:	025a      	lsls	r2, r3, #9
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6899      	ldr	r1, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	029a      	lsls	r2, r3, #10
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40012300 	.word	0x40012300
 80027e8:	0f000001 	.word	0x0f000001

080027ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002802:	2b00      	cmp	r3, #0
 8002804:	d13c      	bne.n	8002880 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d12b      	bne.n	8002878 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002824:	2b00      	cmp	r3, #0
 8002826:	d127      	bne.n	8002878 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002832:	2b00      	cmp	r3, #0
 8002834:	d006      	beq.n	8002844 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002840:	2b00      	cmp	r3, #0
 8002842:	d119      	bne.n	8002878 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0220 	bic.w	r2, r2, #32
 8002852:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f7ff fd6b 	bl	8002354 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800287e:	e00e      	b.n	800289e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff fd75 	bl	800237c <HAL_ADC_ErrorCallback>
}
 8002892:	e004      	b.n	800289e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff fd57 	bl	8002368 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ce:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2240      	movs	r2, #64	@ 0x40
 80028d4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028da:	f043 0204 	orr.w	r2, r3, #4
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f7ff fd4a 	bl	800237c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002900:	4b0c      	ldr	r3, [pc, #48]	@ (8002934 <__NVIC_SetPriorityGrouping+0x44>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800290c:	4013      	ands	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002918:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800291c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002922:	4a04      	ldr	r2, [pc, #16]	@ (8002934 <__NVIC_SetPriorityGrouping+0x44>)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	60d3      	str	r3, [r2, #12]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800293c:	4b04      	ldr	r3, [pc, #16]	@ (8002950 <__NVIC_GetPriorityGrouping+0x18>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	f003 0307 	and.w	r3, r3, #7
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	2b00      	cmp	r3, #0
 8002964:	db0b      	blt.n	800297e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	f003 021f 	and.w	r2, r3, #31
 800296c:	4907      	ldr	r1, [pc, #28]	@ (800298c <__NVIC_EnableIRQ+0x38>)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	2001      	movs	r0, #1
 8002976:	fa00 f202 	lsl.w	r2, r0, r2
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000e100 	.word	0xe000e100

08002990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	6039      	str	r1, [r7, #0]
 800299a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	db0a      	blt.n	80029ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	490c      	ldr	r1, [pc, #48]	@ (80029dc <__NVIC_SetPriority+0x4c>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	0112      	lsls	r2, r2, #4
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	440b      	add	r3, r1
 80029b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b8:	e00a      	b.n	80029d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	4908      	ldr	r1, [pc, #32]	@ (80029e0 <__NVIC_SetPriority+0x50>)
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	3b04      	subs	r3, #4
 80029c8:	0112      	lsls	r2, r2, #4
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	440b      	add	r3, r1
 80029ce:	761a      	strb	r2, [r3, #24]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000e100 	.word	0xe000e100
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	@ 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f1c3 0307 	rsb	r3, r3, #7
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	bf28      	it	cs
 8002a02:	2304      	movcs	r3, #4
 8002a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d902      	bls.n	8002a14 <NVIC_EncodePriority+0x30>
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3b03      	subs	r3, #3
 8002a12:	e000      	b.n	8002a16 <NVIC_EncodePriority+0x32>
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43da      	mvns	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	401a      	ands	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	43d9      	mvns	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	4313      	orrs	r3, r2
         );
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3724      	adds	r7, #36	@ 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a5c:	d301      	bcc.n	8002a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e00f      	b.n	8002a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a62:	4a0a      	ldr	r2, [pc, #40]	@ (8002a8c <SysTick_Config+0x40>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6a:	210f      	movs	r1, #15
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	f7ff ff8e 	bl	8002990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a74:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <SysTick_Config+0x40>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7a:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <SysTick_Config+0x40>)
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	e000e010 	.word	0xe000e010

08002a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff29 	bl	80028f0 <__NVIC_SetPriorityGrouping>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ab8:	f7ff ff3e 	bl	8002938 <__NVIC_GetPriorityGrouping>
 8002abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	6978      	ldr	r0, [r7, #20]
 8002ac4:	f7ff ff8e 	bl	80029e4 <NVIC_EncodePriority>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff5d 	bl	8002990 <__NVIC_SetPriority>
}
 8002ad6:	bf00      	nop
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff31 	bl	8002954 <__NVIC_EnableIRQ>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ffa2 	bl	8002a4c <SysTick_Config>
 8002b08:	4603      	mov	r3, r0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b20:	f7ff fab8 	bl	8002094 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e099      	b.n	8002c64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b50:	e00f      	b.n	8002b72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b52:	f7ff fa9f 	bl	8002094 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b05      	cmp	r3, #5
 8002b5e:	d908      	bls.n	8002b72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2203      	movs	r2, #3
 8002b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e078      	b.n	8002c64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1e8      	bne.n	8002b52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4b38      	ldr	r3, [pc, #224]	@ (8002c6c <HAL_DMA_Init+0x158>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d107      	bne.n	8002bdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f023 0307 	bic.w	r3, r3, #7
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d117      	bne.n	8002c36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00e      	beq.n	8002c36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fa6f 	bl	80030fc <DMA_CheckFifoParam>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2240      	movs	r2, #64	@ 0x40
 8002c28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c32:	2301      	movs	r3, #1
 8002c34:	e016      	b.n	8002c64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fa26 	bl	8003090 <DMA_CalcBaseAndBitshift>
 8002c44:	4603      	mov	r3, r0
 8002c46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4c:	223f      	movs	r2, #63	@ 0x3f
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	f010803f 	.word	0xf010803f

08002c70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_DMA_Start_IT+0x26>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e040      	b.n	8002d18 <HAL_DMA_Start_IT+0xa8>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d12f      	bne.n	8002d0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2202      	movs	r2, #2
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f9b8 	bl	8003034 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc8:	223f      	movs	r2, #63	@ 0x3f
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0216 	orr.w	r2, r2, #22
 8002cde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0208 	orr.w	r2, r2, #8
 8002cf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	e005      	b.n	8002d16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
 8002d14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d2c:	4b8e      	ldr	r3, [pc, #568]	@ (8002f68 <HAL_DMA_IRQHandler+0x248>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a8e      	ldr	r2, [pc, #568]	@ (8002f6c <HAL_DMA_IRQHandler+0x24c>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	0a9b      	lsrs	r3, r3, #10
 8002d38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d01a      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d013      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0204 	bic.w	r2, r2, #4
 8002d72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d78:	2208      	movs	r2, #8
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d84:	f043 0201 	orr.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d90:	2201      	movs	r2, #1
 8002d92:	409a      	lsls	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d012      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dae:	2201      	movs	r2, #1
 8002db0:	409a      	lsls	r2, r3
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dba:	f043 0202 	orr.w	r2, r3, #2
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d012      	beq.n	8002df8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00b      	beq.n	8002df8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de4:	2204      	movs	r2, #4
 8002de6:	409a      	lsls	r2, r3
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	f043 0204 	orr.w	r2, r3, #4
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfc:	2210      	movs	r2, #16
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d043      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d03c      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d018      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d108      	bne.n	8002e50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d024      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	4798      	blx	r3
 8002e4e:	e01f      	b.n	8002e90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01b      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
 8002e60:	e016      	b.n	8002e90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d107      	bne.n	8002e80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0208 	bic.w	r2, r2, #8
 8002e7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	2220      	movs	r2, #32
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 808f 	beq.w	8002fc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8087 	beq.w	8002fc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b05      	cmp	r3, #5
 8002ec8:	d136      	bne.n	8002f38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0216 	bic.w	r2, r2, #22
 8002ed8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ee8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d103      	bne.n	8002efa <HAL_DMA_IRQHandler+0x1da>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0208 	bic.w	r2, r2, #8
 8002f08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0e:	223f      	movs	r2, #63	@ 0x3f
 8002f10:	409a      	lsls	r2, r3
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d07e      	beq.n	800302c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
        }
        return;
 8002f36:	e079      	b.n	800302c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01d      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10d      	bne.n	8002f70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d031      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4798      	blx	r3
 8002f64:	e02c      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x2a0>
 8002f66:	bf00      	nop
 8002f68:	20000010 	.word	0x20000010
 8002f6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d023      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	4798      	blx	r3
 8002f80:	e01e      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10f      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0210 	bic.w	r2, r2, #16
 8002f9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d032      	beq.n	800302e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d022      	beq.n	800301a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2205      	movs	r2, #5
 8002fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d307      	bcc.n	8003008 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f2      	bne.n	8002fec <HAL_DMA_IRQHandler+0x2cc>
 8003006:	e000      	b.n	800300a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003008:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	4798      	blx	r3
 800302a:	e000      	b.n	800302e <HAL_DMA_IRQHandler+0x30e>
        return;
 800302c:	bf00      	nop
    }
  }
}
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003050:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b40      	cmp	r3, #64	@ 0x40
 8003060:	d108      	bne.n	8003074 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003072:	e007      	b.n	8003084 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	60da      	str	r2, [r3, #12]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	3b10      	subs	r3, #16
 80030a0:	4a14      	ldr	r2, [pc, #80]	@ (80030f4 <DMA_CalcBaseAndBitshift+0x64>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030aa:	4a13      	ldr	r2, [pc, #76]	@ (80030f8 <DMA_CalcBaseAndBitshift+0x68>)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d909      	bls.n	80030d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030c6:	f023 0303 	bic.w	r3, r3, #3
 80030ca:	1d1a      	adds	r2, r3, #4
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80030d0:	e007      	b.n	80030e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030da:	f023 0303 	bic.w	r3, r3, #3
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	aaaaaaab 	.word	0xaaaaaaab
 80030f8:	08005ea0 	.word	0x08005ea0

080030fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d11f      	bne.n	8003156 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d856      	bhi.n	80031ca <DMA_CheckFifoParam+0xce>
 800311c:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <DMA_CheckFifoParam+0x28>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003135 	.word	0x08003135
 8003128:	08003147 	.word	0x08003147
 800312c:	08003135 	.word	0x08003135
 8003130:	080031cb 	.word	0x080031cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d046      	beq.n	80031ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003144:	e043      	b.n	80031ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800314e:	d140      	bne.n	80031d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003154:	e03d      	b.n	80031d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800315e:	d121      	bne.n	80031a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d837      	bhi.n	80031d6 <DMA_CheckFifoParam+0xda>
 8003166:	a201      	add	r2, pc, #4	@ (adr r2, 800316c <DMA_CheckFifoParam+0x70>)
 8003168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316c:	0800317d 	.word	0x0800317d
 8003170:	08003183 	.word	0x08003183
 8003174:	0800317d 	.word	0x0800317d
 8003178:	08003195 	.word	0x08003195
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
      break;
 8003180:	e030      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003186:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d025      	beq.n	80031da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003192:	e022      	b.n	80031da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800319c:	d11f      	bne.n	80031de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031a2:	e01c      	b.n	80031de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d903      	bls.n	80031b2 <DMA_CheckFifoParam+0xb6>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d003      	beq.n	80031b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031b0:	e018      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
      break;
 80031b6:	e015      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00e      	beq.n	80031e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e00b      	b.n	80031e2 <DMA_CheckFifoParam+0xe6>
      break;
 80031ca:	bf00      	nop
 80031cc:	e00a      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      break;
 80031ce:	bf00      	nop
 80031d0:	e008      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      break;
 80031d2:	bf00      	nop
 80031d4:	e006      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      break;
 80031d6:	bf00      	nop
 80031d8:	e004      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      break;
 80031da:	bf00      	nop
 80031dc:	e002      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      break;
 80031e2:	bf00      	nop
    }
  } 
  
  return status; 
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop

080031f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	@ 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	e165      	b.n	80034dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003210:	2201      	movs	r2, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	429a      	cmp	r2, r3
 800322a:	f040 8154 	bne.w	80034d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d005      	beq.n	8003246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003242:	2b02      	cmp	r3, #2
 8003244:	d130      	bne.n	80032a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	2203      	movs	r2, #3
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800327c:	2201      	movs	r2, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 0201 	and.w	r2, r3, #1
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d017      	beq.n	80032e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d123      	bne.n	8003338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	08da      	lsrs	r2, r3, #3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3208      	adds	r2, #8
 80032f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	220f      	movs	r2, #15
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	08da      	lsrs	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3208      	adds	r2, #8
 8003332:	69b9      	ldr	r1, [r7, #24]
 8003334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	2203      	movs	r2, #3
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0203 	and.w	r2, r3, #3
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80ae 	beq.w	80034d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4b5d      	ldr	r3, [pc, #372]	@ (80034f4 <HAL_GPIO_Init+0x300>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	4a5c      	ldr	r2, [pc, #368]	@ (80034f4 <HAL_GPIO_Init+0x300>)
 8003384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003388:	6453      	str	r3, [r2, #68]	@ 0x44
 800338a:	4b5a      	ldr	r3, [pc, #360]	@ (80034f4 <HAL_GPIO_Init+0x300>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003396:	4a58      	ldr	r2, [pc, #352]	@ (80034f8 <HAL_GPIO_Init+0x304>)
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	3302      	adds	r3, #2
 800339e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4f      	ldr	r2, [pc, #316]	@ (80034fc <HAL_GPIO_Init+0x308>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d025      	beq.n	800340e <HAL_GPIO_Init+0x21a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4e      	ldr	r2, [pc, #312]	@ (8003500 <HAL_GPIO_Init+0x30c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01f      	beq.n	800340a <HAL_GPIO_Init+0x216>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4d      	ldr	r2, [pc, #308]	@ (8003504 <HAL_GPIO_Init+0x310>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d019      	beq.n	8003406 <HAL_GPIO_Init+0x212>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a4c      	ldr	r2, [pc, #304]	@ (8003508 <HAL_GPIO_Init+0x314>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_GPIO_Init+0x20e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4b      	ldr	r2, [pc, #300]	@ (800350c <HAL_GPIO_Init+0x318>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00d      	beq.n	80033fe <HAL_GPIO_Init+0x20a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003510 <HAL_GPIO_Init+0x31c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <HAL_GPIO_Init+0x206>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a49      	ldr	r2, [pc, #292]	@ (8003514 <HAL_GPIO_Init+0x320>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_GPIO_Init+0x202>
 80033f2:	2306      	movs	r3, #6
 80033f4:	e00c      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 80033f6:	2307      	movs	r3, #7
 80033f8:	e00a      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 80033fa:	2305      	movs	r3, #5
 80033fc:	e008      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 80033fe:	2304      	movs	r3, #4
 8003400:	e006      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 8003402:	2303      	movs	r3, #3
 8003404:	e004      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 8003406:	2302      	movs	r3, #2
 8003408:	e002      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_GPIO_Init+0x21c>
 800340e:	2300      	movs	r3, #0
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	f002 0203 	and.w	r2, r2, #3
 8003416:	0092      	lsls	r2, r2, #2
 8003418:	4093      	lsls	r3, r2
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003420:	4935      	ldr	r1, [pc, #212]	@ (80034f8 <HAL_GPIO_Init+0x304>)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	089b      	lsrs	r3, r3, #2
 8003426:	3302      	adds	r3, #2
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800342e:	4b3a      	ldr	r3, [pc, #232]	@ (8003518 <HAL_GPIO_Init+0x324>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003452:	4a31      	ldr	r2, [pc, #196]	@ (8003518 <HAL_GPIO_Init+0x324>)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003458:	4b2f      	ldr	r3, [pc, #188]	@ (8003518 <HAL_GPIO_Init+0x324>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800347c:	4a26      	ldr	r2, [pc, #152]	@ (8003518 <HAL_GPIO_Init+0x324>)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003482:	4b25      	ldr	r3, [pc, #148]	@ (8003518 <HAL_GPIO_Init+0x324>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003518 <HAL_GPIO_Init+0x324>)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003518 <HAL_GPIO_Init+0x324>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034d0:	4a11      	ldr	r2, [pc, #68]	@ (8003518 <HAL_GPIO_Init+0x324>)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3301      	adds	r3, #1
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b0f      	cmp	r3, #15
 80034e0:	f67f ae96 	bls.w	8003210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop
 80034e8:	3724      	adds	r7, #36	@ 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40013800 	.word	0x40013800
 80034fc:	40020000 	.word	0x40020000
 8003500:	40020400 	.word	0x40020400
 8003504:	40020800 	.word	0x40020800
 8003508:	40020c00 	.word	0x40020c00
 800350c:	40021000 	.word	0x40021000
 8003510:	40021400 	.word	0x40021400
 8003514:	40021800 	.word	0x40021800
 8003518:	40013c00 	.word	0x40013c00

0800351c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
 8003528:	4613      	mov	r3, r2
 800352a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800352c:	787b      	ldrb	r3, [r7, #1]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003538:	e003      	b.n	8003542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800353a:	887b      	ldrh	r3, [r7, #2]
 800353c:	041a      	lsls	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	619a      	str	r2, [r3, #24]
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800355a:	4b08      	ldr	r3, [pc, #32]	@ (800357c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003566:	4a05      	ldr	r2, [pc, #20]	@ (800357c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fd ffb0 	bl	80014d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40013c00 	.word	0x40013c00

08003580 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e12b      	b.n	80037ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd fe3a 	bl	8001220 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	@ 0x24
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035e4:	f001 fbe0 	bl	8004da8 <HAL_RCC_GetPCLK1Freq>
 80035e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4a81      	ldr	r2, [pc, #516]	@ (80037f4 <HAL_I2C_Init+0x274>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d807      	bhi.n	8003604 <HAL_I2C_Init+0x84>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4a80      	ldr	r2, [pc, #512]	@ (80037f8 <HAL_I2C_Init+0x278>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	bf94      	ite	ls
 80035fc:	2301      	movls	r3, #1
 80035fe:	2300      	movhi	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	e006      	b.n	8003612 <HAL_I2C_Init+0x92>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a7d      	ldr	r2, [pc, #500]	@ (80037fc <HAL_I2C_Init+0x27c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	bf94      	ite	ls
 800360c:	2301      	movls	r3, #1
 800360e:	2300      	movhi	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e0e7      	b.n	80037ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a78      	ldr	r2, [pc, #480]	@ (8003800 <HAL_I2C_Init+0x280>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	0c9b      	lsrs	r3, r3, #18
 8003624:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	4a6a      	ldr	r2, [pc, #424]	@ (80037f4 <HAL_I2C_Init+0x274>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d802      	bhi.n	8003654 <HAL_I2C_Init+0xd4>
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	3301      	adds	r3, #1
 8003652:	e009      	b.n	8003668 <HAL_I2C_Init+0xe8>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	4a69      	ldr	r2, [pc, #420]	@ (8003804 <HAL_I2C_Init+0x284>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	099b      	lsrs	r3, r3, #6
 8003666:	3301      	adds	r3, #1
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	430b      	orrs	r3, r1
 800366e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800367a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	495c      	ldr	r1, [pc, #368]	@ (80037f4 <HAL_I2C_Init+0x274>)
 8003684:	428b      	cmp	r3, r1
 8003686:	d819      	bhi.n	80036bc <HAL_I2C_Init+0x13c>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1e59      	subs	r1, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	fbb1 f3f3 	udiv	r3, r1, r3
 8003696:	1c59      	adds	r1, r3, #1
 8003698:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800369c:	400b      	ands	r3, r1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_I2C_Init+0x138>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1e59      	subs	r1, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80036b0:	3301      	adds	r3, #1
 80036b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b6:	e051      	b.n	800375c <HAL_I2C_Init+0x1dc>
 80036b8:	2304      	movs	r3, #4
 80036ba:	e04f      	b.n	800375c <HAL_I2C_Init+0x1dc>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d111      	bne.n	80036e8 <HAL_I2C_Init+0x168>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1e58      	subs	r0, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	440b      	add	r3, r1
 80036d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d6:	3301      	adds	r3, #1
 80036d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	e012      	b.n	800370e <HAL_I2C_Init+0x18e>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1e58      	subs	r0, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6859      	ldr	r1, [r3, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	0099      	lsls	r1, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80036fe:	3301      	adds	r3, #1
 8003700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_I2C_Init+0x196>
 8003712:	2301      	movs	r3, #1
 8003714:	e022      	b.n	800375c <HAL_I2C_Init+0x1dc>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10e      	bne.n	800373c <HAL_I2C_Init+0x1bc>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1e58      	subs	r0, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6859      	ldr	r1, [r3, #4]
 8003726:	460b      	mov	r3, r1
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	440b      	add	r3, r1
 800372c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003730:	3301      	adds	r3, #1
 8003732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800373a:	e00f      	b.n	800375c <HAL_I2C_Init+0x1dc>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1e58      	subs	r0, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	0099      	lsls	r1, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003752:	3301      	adds	r3, #1
 8003754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003758:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	6809      	ldr	r1, [r1, #0]
 8003760:	4313      	orrs	r3, r2
 8003762:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69da      	ldr	r2, [r3, #28]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800378a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6911      	ldr	r1, [r2, #16]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68d2      	ldr	r2, [r2, #12]
 8003796:	4311      	orrs	r1, r2
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	430b      	orrs	r3, r1
 800379e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	000186a0 	.word	0x000186a0
 80037f8:	001e847f 	.word	0x001e847f
 80037fc:	003d08ff 	.word	0x003d08ff
 8003800:	431bde83 	.word	0x431bde83
 8003804:	10624dd3 	.word	0x10624dd3

08003808 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	461a      	mov	r2, r3
 8003814:	460b      	mov	r3, r1
 8003816:	817b      	strh	r3, [r7, #10]
 8003818:	4613      	mov	r3, r2
 800381a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800381c:	f7fe fc3a 	bl	8002094 <HAL_GetTick>
 8003820:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b20      	cmp	r3, #32
 800382c:	f040 80e0 	bne.w	80039f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	2319      	movs	r3, #25
 8003836:	2201      	movs	r2, #1
 8003838:	4970      	ldr	r1, [pc, #448]	@ (80039fc <HAL_I2C_Master_Transmit+0x1f4>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 ff3c 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003846:	2302      	movs	r3, #2
 8003848:	e0d3      	b.n	80039f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_I2C_Master_Transmit+0x50>
 8003854:	2302      	movs	r3, #2
 8003856:	e0cc      	b.n	80039f2 <HAL_I2C_Master_Transmit+0x1ea>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d007      	beq.n	800387e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800388c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2221      	movs	r2, #33	@ 0x21
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2210      	movs	r2, #16
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	893a      	ldrh	r2, [r7, #8]
 80038ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a50      	ldr	r2, [pc, #320]	@ (8003a00 <HAL_I2C_Master_Transmit+0x1f8>)
 80038be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038c0:	8979      	ldrh	r1, [r7, #10]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fcf6 	bl	80042b8 <I2C_MasterRequestWrite>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e08d      	b.n	80039f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038ec:	e066      	b.n	80039bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	6a39      	ldr	r1, [r7, #32]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fffa 	bl	80048ec <I2C_WaitOnTXEFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00d      	beq.n	800391a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	2b04      	cmp	r3, #4
 8003904:	d107      	bne.n	8003916 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003914:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e06b      	b.n	80039f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b04      	cmp	r3, #4
 8003956:	d11b      	bne.n	8003990 <HAL_I2C_Master_Transmit+0x188>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395c:	2b00      	cmp	r3, #0
 800395e:	d017      	beq.n	8003990 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	781a      	ldrb	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	6a39      	ldr	r1, [r7, #32]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fff1 	bl	800497c <I2C_WaitOnBTFFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d107      	bne.n	80039b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e01a      	b.n	80039f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d194      	bne.n	80038ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e000      	b.n	80039f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	00100002 	.word	0x00100002
 8003a00:	ffff0000 	.word	0xffff0000

08003a04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	4608      	mov	r0, r1
 8003a0e:	4611      	mov	r1, r2
 8003a10:	461a      	mov	r2, r3
 8003a12:	4603      	mov	r3, r0
 8003a14:	817b      	strh	r3, [r7, #10]
 8003a16:	460b      	mov	r3, r1
 8003a18:	813b      	strh	r3, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a1e:	f7fe fb39 	bl	8002094 <HAL_GetTick>
 8003a22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	f040 80d9 	bne.w	8003be4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	2319      	movs	r3, #25
 8003a38:	2201      	movs	r2, #1
 8003a3a:	496d      	ldr	r1, [pc, #436]	@ (8003bf0 <HAL_I2C_Mem_Write+0x1ec>)
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fe3b 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e0cc      	b.n	8003be6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_I2C_Mem_Write+0x56>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e0c5      	b.n	8003be6 <HAL_I2C_Mem_Write+0x1e2>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d007      	beq.n	8003a80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2221      	movs	r2, #33	@ 0x21
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2240      	movs	r2, #64	@ 0x40
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a3a      	ldr	r2, [r7, #32]
 8003aaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a4d      	ldr	r2, [pc, #308]	@ (8003bf4 <HAL_I2C_Mem_Write+0x1f0>)
 8003ac0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ac2:	88f8      	ldrh	r0, [r7, #6]
 8003ac4:	893a      	ldrh	r2, [r7, #8]
 8003ac6:	8979      	ldrh	r1, [r7, #10]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fc72 	bl	80043bc <I2C_RequestMemoryWrite>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d052      	beq.n	8003b84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e081      	b.n	8003be6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 ff00 	bl	80048ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00d      	beq.n	8003b0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d107      	bne.n	8003b0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e06b      	b.n	8003be6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	781a      	ldrb	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d11b      	bne.n	8003b84 <HAL_I2C_Mem_Write+0x180>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d017      	beq.n	8003b84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	781a      	ldrb	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1aa      	bne.n	8003ae2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fef3 	bl	800497c <I2C_WaitOnBTFFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00d      	beq.n	8003bb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d107      	bne.n	8003bb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e016      	b.n	8003be6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	00100002 	.word	0x00100002
 8003bf4:	ffff0000 	.word	0xffff0000

08003bf8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08c      	sub	sp, #48	@ 0x30
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	817b      	strh	r3, [r7, #10]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	813b      	strh	r3, [r7, #8]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c12:	f7fe fa3f 	bl	8002094 <HAL_GetTick>
 8003c16:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	f040 8214 	bne.w	800404e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2319      	movs	r3, #25
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	497b      	ldr	r1, [pc, #492]	@ (8003e1c <HAL_I2C_Mem_Read+0x224>)
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fd41 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e207      	b.n	8004050 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_I2C_Mem_Read+0x56>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e200      	b.n	8004050 <HAL_I2C_Mem_Read+0x458>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d007      	beq.n	8003c74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2222      	movs	r2, #34	@ 0x22
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2240      	movs	r2, #64	@ 0x40
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a5b      	ldr	r2, [pc, #364]	@ (8003e20 <HAL_I2C_Mem_Read+0x228>)
 8003cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cb6:	88f8      	ldrh	r0, [r7, #6]
 8003cb8:	893a      	ldrh	r2, [r7, #8]
 8003cba:	8979      	ldrh	r1, [r7, #10]
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fc0e 	bl	80044e8 <I2C_RequestMemoryRead>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e1bc      	b.n	8004050 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d113      	bne.n	8003d06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	623b      	str	r3, [r7, #32]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	623b      	str	r3, [r7, #32]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e190      	b.n	8004028 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d11b      	bne.n	8003d46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e170      	b.n	8004028 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d11b      	bne.n	8003d86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	e150      	b.n	8004028 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d9c:	e144      	b.n	8004028 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	f200 80f1 	bhi.w	8003f8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d123      	bne.n	8003df8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fe29 	bl	8004a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e145      	b.n	8004050 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003df6:	e117      	b.n	8004028 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d14e      	bne.n	8003e9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e06:	2200      	movs	r2, #0
 8003e08:	4906      	ldr	r1, [pc, #24]	@ (8003e24 <HAL_I2C_Mem_Read+0x22c>)
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fc54 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e11a      	b.n	8004050 <HAL_I2C_Mem_Read+0x458>
 8003e1a:	bf00      	nop
 8003e1c:	00100002 	.word	0x00100002
 8003e20:	ffff0000 	.word	0xffff0000
 8003e24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e9c:	e0c4      	b.n	8004028 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	496c      	ldr	r1, [pc, #432]	@ (8004058 <HAL_I2C_Mem_Read+0x460>)
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 fc05 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0cb      	b.n	8004050 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f00:	2200      	movs	r2, #0
 8003f02:	4955      	ldr	r1, [pc, #340]	@ (8004058 <HAL_I2C_Mem_Read+0x460>)
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fbd7 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e09d      	b.n	8004050 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f88:	e04e      	b.n	8004028 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fd3c 	bl	8004a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e058      	b.n	8004050 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d124      	bne.n	8004028 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d107      	bne.n	8003ff6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	f47f aeb6 	bne.w	8003d9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	e000      	b.n	8004050 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800404e:	2302      	movs	r3, #2
  }
}
 8004050:	4618      	mov	r0, r3
 8004052:	3728      	adds	r7, #40	@ 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	00010004 	.word	0x00010004

0800405c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	@ 0x28
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	460b      	mov	r3, r1
 800406a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800406c:	f7fe f812 	bl	8002094 <HAL_GetTick>
 8004070:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b20      	cmp	r3, #32
 8004080:	f040 8111 	bne.w	80042a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2319      	movs	r3, #25
 800408a:	2201      	movs	r2, #1
 800408c:	4988      	ldr	r1, [pc, #544]	@ (80042b0 <HAL_I2C_IsDeviceReady+0x254>)
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fb12 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800409a:	2302      	movs	r3, #2
 800409c:	e104      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_I2C_IsDeviceReady+0x50>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e0fd      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d007      	beq.n	80040d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0201 	orr.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2224      	movs	r2, #36	@ 0x24
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4a70      	ldr	r2, [pc, #448]	@ (80042b4 <HAL_I2C_IsDeviceReady+0x258>)
 80040f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004104:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2200      	movs	r2, #0
 800410e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fad0 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800412c:	d103      	bne.n	8004136 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004134:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e0b6      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800413a:	897b      	ldrh	r3, [r7, #10]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004148:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800414a:	f7fd ffa3 	bl	8002094 <HAL_GetTick>
 800414e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b02      	cmp	r3, #2
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004174:	bf0c      	ite	eq
 8004176:	2301      	moveq	r3, #1
 8004178:	2300      	movne	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800417e:	e025      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004180:	f7fd ff88 	bl	8002094 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d302      	bcc.n	8004196 <HAL_I2C_IsDeviceReady+0x13a>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	22a0      	movs	r2, #160	@ 0xa0
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80041d6:	d005      	beq.n	80041e4 <HAL_I2C_IsDeviceReady+0x188>
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d102      	bne.n	80041e4 <HAL_I2C_IsDeviceReady+0x188>
 80041de:	7dbb      	ldrb	r3, [r7, #22]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0cd      	beq.n	8004180 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d129      	bne.n	800424e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004208:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2319      	movs	r3, #25
 8004226:	2201      	movs	r2, #1
 8004228:	4921      	ldr	r1, [pc, #132]	@ (80042b0 <HAL_I2C_IsDeviceReady+0x254>)
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fa44 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e036      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e02c      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800425c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004266:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	2319      	movs	r3, #25
 800426e:	2201      	movs	r2, #1
 8004270:	490f      	ldr	r1, [pc, #60]	@ (80042b0 <HAL_I2C_IsDeviceReady+0x254>)
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fa20 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e012      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	3301      	adds	r3, #1
 8004286:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	f4ff af32 	bcc.w	80040f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
  }
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	00100002 	.word	0x00100002
 80042b4:	ffff0000 	.word	0xffff0000

080042b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	460b      	mov	r3, r1
 80042c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d006      	beq.n	80042e2 <I2C_MasterRequestWrite+0x2a>
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d003      	beq.n	80042e2 <I2C_MasterRequestWrite+0x2a>
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042e0:	d108      	bne.n	80042f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e00b      	b.n	800430c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f8:	2b12      	cmp	r3, #18
 80042fa:	d107      	bne.n	800430c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800430a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f9cd 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004332:	d103      	bne.n	800433c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800433a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e035      	b.n	80043ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004348:	d108      	bne.n	800435c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800434a:	897b      	ldrh	r3, [r7, #10]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004358:	611a      	str	r2, [r3, #16]
 800435a:	e01b      	b.n	8004394 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800435c:	897b      	ldrh	r3, [r7, #10]
 800435e:	11db      	asrs	r3, r3, #7
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 0306 	and.w	r3, r3, #6
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f063 030f 	orn	r3, r3, #15
 800436c:	b2da      	uxtb	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	490e      	ldr	r1, [pc, #56]	@ (80043b4 <I2C_MasterRequestWrite+0xfc>)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fa16 	bl	80047ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e010      	b.n	80043ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800438a:	897b      	ldrh	r3, [r7, #10]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4907      	ldr	r1, [pc, #28]	@ (80043b8 <I2C_MasterRequestWrite+0x100>)
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fa06 	bl	80047ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	00010008 	.word	0x00010008
 80043b8:	00010002 	.word	0x00010002

080043bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	4608      	mov	r0, r1
 80043c6:	4611      	mov	r1, r2
 80043c8:	461a      	mov	r2, r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	817b      	strh	r3, [r7, #10]
 80043ce:	460b      	mov	r3, r1
 80043d0:	813b      	strh	r3, [r7, #8]
 80043d2:	4613      	mov	r3, r2
 80043d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f960 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00d      	beq.n	800441a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800440c:	d103      	bne.n	8004416 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004414:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e05f      	b.n	80044da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441a:	897b      	ldrh	r3, [r7, #10]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004428:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	6a3a      	ldr	r2, [r7, #32]
 800442e:	492d      	ldr	r1, [pc, #180]	@ (80044e4 <I2C_RequestMemoryWrite+0x128>)
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f9bb 	bl	80047ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e04c      	b.n	80044da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004458:	6a39      	ldr	r1, [r7, #32]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fa46 	bl	80048ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00d      	beq.n	8004482 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	2b04      	cmp	r3, #4
 800446c:	d107      	bne.n	800447e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800447c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e02b      	b.n	80044da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004488:	893b      	ldrh	r3, [r7, #8]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]
 8004492:	e021      	b.n	80044d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004494:	893b      	ldrh	r3, [r7, #8]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	b29b      	uxth	r3, r3
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a4:	6a39      	ldr	r1, [r7, #32]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fa20 	bl	80048ec <I2C_WaitOnTXEFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d107      	bne.n	80044ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e005      	b.n	80044da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ce:	893b      	ldrh	r3, [r7, #8]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	00010002 	.word	0x00010002

080044e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	4608      	mov	r0, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	461a      	mov	r2, r3
 80044f6:	4603      	mov	r3, r0
 80044f8:	817b      	strh	r3, [r7, #10]
 80044fa:	460b      	mov	r3, r1
 80044fc:	813b      	strh	r3, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004510:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004520:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	2200      	movs	r2, #0
 800452a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f8c2 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00d      	beq.n	8004556 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004548:	d103      	bne.n	8004552 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004550:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0aa      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004564:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	6a3a      	ldr	r2, [r7, #32]
 800456a:	4952      	ldr	r1, [pc, #328]	@ (80046b4 <I2C_RequestMemoryRead+0x1cc>)
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f91d 	bl	80047ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e097      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004594:	6a39      	ldr	r1, [r7, #32]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f9a8 	bl	80048ec <I2C_WaitOnTXEFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d107      	bne.n	80045ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e076      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045c4:	893b      	ldrh	r3, [r7, #8]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	611a      	str	r2, [r3, #16]
 80045ce:	e021      	b.n	8004614 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045d0:	893b      	ldrh	r3, [r7, #8]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e0:	6a39      	ldr	r1, [r7, #32]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f982 	bl	80048ec <I2C_WaitOnTXEFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00d      	beq.n	800460a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d107      	bne.n	8004606 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004604:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e050      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800460a:	893b      	ldrh	r3, [r7, #8]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004616:	6a39      	ldr	r1, [r7, #32]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f967 	bl	80048ec <I2C_WaitOnTXEFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004628:	2b04      	cmp	r3, #4
 800462a:	d107      	bne.n	800463c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800463a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e035      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800464e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	2200      	movs	r2, #0
 8004658:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f82b 	bl	80046b8 <I2C_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004676:	d103      	bne.n	8004680 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800467e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e013      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004684:	897b      	ldrh	r3, [r7, #10]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	b2da      	uxtb	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	6a3a      	ldr	r2, [r7, #32]
 8004698:	4906      	ldr	r1, [pc, #24]	@ (80046b4 <I2C_RequestMemoryRead+0x1cc>)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f886 	bl	80047ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	00010002 	.word	0x00010002

080046b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046c8:	e048      	b.n	800475c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d044      	beq.n	800475c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d2:	f7fd fcdf 	bl	8002094 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d302      	bcc.n	80046e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d139      	bne.n	800475c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	0c1b      	lsrs	r3, r3, #16
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d10d      	bne.n	800470e <I2C_WaitOnFlagUntilTimeout+0x56>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	43da      	mvns	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4013      	ands	r3, r2
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	bf0c      	ite	eq
 8004704:	2301      	moveq	r3, #1
 8004706:	2300      	movne	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	e00c      	b.n	8004728 <I2C_WaitOnFlagUntilTimeout+0x70>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	43da      	mvns	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4013      	ands	r3, r2
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	429a      	cmp	r2, r3
 800472c:	d116      	bne.n	800475c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	f043 0220 	orr.w	r2, r3, #32
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e023      	b.n	80047a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	0c1b      	lsrs	r3, r3, #16
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d10d      	bne.n	8004782 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	43da      	mvns	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4013      	ands	r3, r2
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	e00c      	b.n	800479c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	43da      	mvns	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4013      	ands	r3, r2
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf0c      	ite	eq
 8004794:	2301      	moveq	r3, #1
 8004796:	2300      	movne	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d093      	beq.n	80046ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ba:	e071      	b.n	80048a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ca:	d123      	bne.n	8004814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	f043 0204 	orr.w	r2, r3, #4
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e067      	b.n	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481a:	d041      	beq.n	80048a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481c:	f7fd fc3a 	bl	8002094 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	429a      	cmp	r2, r3
 800482a:	d302      	bcc.n	8004832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d136      	bne.n	80048a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	0c1b      	lsrs	r3, r3, #16
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d10c      	bne.n	8004856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	43da      	mvns	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4013      	ands	r3, r2
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	bf14      	ite	ne
 800484e:	2301      	movne	r3, #1
 8004850:	2300      	moveq	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	e00b      	b.n	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	43da      	mvns	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4013      	ands	r3, r2
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf14      	ite	ne
 8004868:	2301      	movne	r3, #1
 800486a:	2300      	moveq	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d016      	beq.n	80048a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488c:	f043 0220 	orr.w	r2, r3, #32
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e021      	b.n	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d10c      	bne.n	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	43da      	mvns	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4013      	ands	r3, r2
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e00b      	b.n	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	43da      	mvns	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4013      	ands	r3, r2
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf14      	ite	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	2300      	moveq	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f47f af6d 	bne.w	80047bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048f8:	e034      	b.n	8004964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f8e3 	bl	8004ac6 <I2C_IsAcknowledgeFailed>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e034      	b.n	8004974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004910:	d028      	beq.n	8004964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004912:	f7fd fbbf 	bl	8002094 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	d302      	bcc.n	8004928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d11d      	bne.n	8004964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004932:	2b80      	cmp	r3, #128	@ 0x80
 8004934:	d016      	beq.n	8004964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004950:	f043 0220 	orr.w	r2, r3, #32
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e007      	b.n	8004974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800496e:	2b80      	cmp	r3, #128	@ 0x80
 8004970:	d1c3      	bne.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004988:	e034      	b.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 f89b 	bl	8004ac6 <I2C_IsAcknowledgeFailed>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e034      	b.n	8004a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a0:	d028      	beq.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a2:	f7fd fb77 	bl	8002094 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d302      	bcc.n	80049b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d11d      	bne.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d016      	beq.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e0:	f043 0220 	orr.w	r2, r3, #32
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e007      	b.n	8004a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d1c3      	bne.n	800498a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a18:	e049      	b.n	8004aae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b10      	cmp	r3, #16
 8004a26:	d119      	bne.n	8004a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0210 	mvn.w	r2, #16
 8004a30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e030      	b.n	8004abe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5c:	f7fd fb1a 	bl	8002094 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d302      	bcc.n	8004a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d11d      	bne.n	8004aae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a7c:	2b40      	cmp	r3, #64	@ 0x40
 8004a7e:	d016      	beq.n	8004aae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	f043 0220 	orr.w	r2, r3, #32
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e007      	b.n	8004abe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab8:	2b40      	cmp	r3, #64	@ 0x40
 8004aba:	d1ae      	bne.n	8004a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004adc:	d11b      	bne.n	8004b16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ae6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	f043 0204 	orr.w	r2, r3, #4
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	4b20      	ldr	r3, [pc, #128]	@ (8004bb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb8 <HAL_PWREx_EnableOverDrive+0x94>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b50:	f7fd faa0 	bl	8002094 <HAL_GetTick>
 8004b54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b56:	e009      	b.n	8004b6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b58:	f7fd fa9c 	bl	8002094 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b66:	d901      	bls.n	8004b6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e01f      	b.n	8004bac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b6c:	4b13      	ldr	r3, [pc, #76]	@ (8004bbc <HAL_PWREx_EnableOverDrive+0x98>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b78:	d1ee      	bne.n	8004b58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004b7a:	4b11      	ldr	r3, [pc, #68]	@ (8004bc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b80:	f7fd fa88 	bl	8002094 <HAL_GetTick>
 8004b84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b86:	e009      	b.n	8004b9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b88:	f7fd fa84 	bl	8002094 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b96:	d901      	bls.n	8004b9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e007      	b.n	8004bac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b9c:	4b07      	ldr	r3, [pc, #28]	@ (8004bbc <HAL_PWREx_EnableOverDrive+0x98>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ba8:	d1ee      	bne.n	8004b88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	420e0040 	.word	0x420e0040
 8004bbc:	40007000 	.word	0x40007000
 8004bc0:	420e0044 	.word	0x420e0044

08004bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0cc      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd8:	4b68      	ldr	r3, [pc, #416]	@ (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d90c      	bls.n	8004c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be6:	4b65      	ldr	r3, [pc, #404]	@ (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bee:	4b63      	ldr	r3, [pc, #396]	@ (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0b8      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d020      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c18:	4b59      	ldr	r3, [pc, #356]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	4a58      	ldr	r2, [pc, #352]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c30:	4b53      	ldr	r3, [pc, #332]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4a52      	ldr	r2, [pc, #328]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c3c:	4b50      	ldr	r3, [pc, #320]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	494d      	ldr	r1, [pc, #308]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d044      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d107      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c62:	4b47      	ldr	r3, [pc, #284]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d119      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e07f      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d003      	beq.n	8004c82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d107      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c82:	4b3f      	ldr	r3, [pc, #252]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e06f      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c92:	4b3b      	ldr	r3, [pc, #236]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e067      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ca2:	4b37      	ldr	r3, [pc, #220]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f023 0203 	bic.w	r2, r3, #3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	4934      	ldr	r1, [pc, #208]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cb4:	f7fd f9ee 	bl	8002094 <HAL_GetTick>
 8004cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cbc:	f7fd f9ea 	bl	8002094 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e04f      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 020c 	and.w	r2, r3, #12
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d1eb      	bne.n	8004cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce4:	4b25      	ldr	r3, [pc, #148]	@ (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 030f 	and.w	r3, r3, #15
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d20c      	bcs.n	8004d0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf2:	4b22      	ldr	r3, [pc, #136]	@ (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	4b20      	ldr	r3, [pc, #128]	@ (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e032      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d18:	4b19      	ldr	r3, [pc, #100]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	4916      	ldr	r1, [pc, #88]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d36:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	490e      	ldr	r1, [pc, #56]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d4a:	f000 f855 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	490a      	ldr	r1, [pc, #40]	@ (8004d84 <HAL_RCC_ClockConfig+0x1c0>)
 8004d5c:	5ccb      	ldrb	r3, [r1, r3]
 8004d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d62:	4a09      	ldr	r2, [pc, #36]	@ (8004d88 <HAL_RCC_ClockConfig+0x1c4>)
 8004d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d66:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fd f94e 	bl	800200c <HAL_InitTick>

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40023c00 	.word	0x40023c00
 8004d80:	40023800 	.word	0x40023800
 8004d84:	08005e88 	.word	0x08005e88
 8004d88:	20000010 	.word	0x20000010
 8004d8c:	20000014 	.word	0x20000014

08004d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d94:	4b03      	ldr	r3, [pc, #12]	@ (8004da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d96:	681b      	ldr	r3, [r3, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000010 	.word	0x20000010

08004da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dac:	f7ff fff0 	bl	8004d90 <HAL_RCC_GetHCLKFreq>
 8004db0:	4602      	mov	r2, r0
 8004db2:	4b05      	ldr	r3, [pc, #20]	@ (8004dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	0a9b      	lsrs	r3, r3, #10
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	4903      	ldr	r1, [pc, #12]	@ (8004dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dbe:	5ccb      	ldrb	r3, [r1, r3]
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	08005e98 	.word	0x08005e98

08004dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dd4:	f7ff ffdc 	bl	8004d90 <HAL_RCC_GetHCLKFreq>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	4b05      	ldr	r3, [pc, #20]	@ (8004df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	0b5b      	lsrs	r3, r3, #13
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	4903      	ldr	r1, [pc, #12]	@ (8004df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de6:	5ccb      	ldrb	r3, [r1, r3]
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40023800 	.word	0x40023800
 8004df4:	08005e98 	.word	0x08005e98

08004df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dfc:	b0ae      	sub	sp, #184	@ 0xb8
 8004dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e1e:	4bcb      	ldr	r3, [pc, #812]	@ (800514c <HAL_RCC_GetSysClockFreq+0x354>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 030c 	and.w	r3, r3, #12
 8004e26:	2b0c      	cmp	r3, #12
 8004e28:	f200 8206 	bhi.w	8005238 <HAL_RCC_GetSysClockFreq+0x440>
 8004e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e32:	bf00      	nop
 8004e34:	08004e69 	.word	0x08004e69
 8004e38:	08005239 	.word	0x08005239
 8004e3c:	08005239 	.word	0x08005239
 8004e40:	08005239 	.word	0x08005239
 8004e44:	08004e71 	.word	0x08004e71
 8004e48:	08005239 	.word	0x08005239
 8004e4c:	08005239 	.word	0x08005239
 8004e50:	08005239 	.word	0x08005239
 8004e54:	08004e79 	.word	0x08004e79
 8004e58:	08005239 	.word	0x08005239
 8004e5c:	08005239 	.word	0x08005239
 8004e60:	08005239 	.word	0x08005239
 8004e64:	08005069 	.word	0x08005069
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e68:	4bb9      	ldr	r3, [pc, #740]	@ (8005150 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e6e:	e1e7      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e70:	4bb8      	ldr	r3, [pc, #736]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e76:	e1e3      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e78:	4bb4      	ldr	r3, [pc, #720]	@ (800514c <HAL_RCC_GetSysClockFreq+0x354>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e84:	4bb1      	ldr	r3, [pc, #708]	@ (800514c <HAL_RCC_GetSysClockFreq+0x354>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d071      	beq.n	8004f74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e90:	4bae      	ldr	r3, [pc, #696]	@ (800514c <HAL_RCC_GetSysClockFreq+0x354>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	099b      	lsrs	r3, r3, #6
 8004e96:	2200      	movs	r2, #0
 8004e98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e9c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004eac:	2300      	movs	r3, #0
 8004eae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	462b      	mov	r3, r5
 8004eba:	f04f 0000 	mov.w	r0, #0
 8004ebe:	f04f 0100 	mov.w	r1, #0
 8004ec2:	0159      	lsls	r1, r3, #5
 8004ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ec8:	0150      	lsls	r0, r2, #5
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4621      	mov	r1, r4
 8004ed0:	1a51      	subs	r1, r2, r1
 8004ed2:	6439      	str	r1, [r7, #64]	@ 0x40
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004ee8:	4649      	mov	r1, r9
 8004eea:	018b      	lsls	r3, r1, #6
 8004eec:	4641      	mov	r1, r8
 8004eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ef2:	4641      	mov	r1, r8
 8004ef4:	018a      	lsls	r2, r1, #6
 8004ef6:	4641      	mov	r1, r8
 8004ef8:	1a51      	subs	r1, r2, r1
 8004efa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004efc:	4649      	mov	r1, r9
 8004efe:	eb63 0301 	sbc.w	r3, r3, r1
 8004f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004f10:	4649      	mov	r1, r9
 8004f12:	00cb      	lsls	r3, r1, #3
 8004f14:	4641      	mov	r1, r8
 8004f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1a:	4641      	mov	r1, r8
 8004f1c:	00ca      	lsls	r2, r1, #3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	4619      	mov	r1, r3
 8004f22:	4603      	mov	r3, r0
 8004f24:	4622      	mov	r2, r4
 8004f26:	189b      	adds	r3, r3, r2
 8004f28:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f2a:	462b      	mov	r3, r5
 8004f2c:	460a      	mov	r2, r1
 8004f2e:	eb42 0303 	adc.w	r3, r2, r3
 8004f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f40:	4629      	mov	r1, r5
 8004f42:	024b      	lsls	r3, r1, #9
 8004f44:	4621      	mov	r1, r4
 8004f46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	024a      	lsls	r2, r1, #9
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004f64:	f7fb fe16 	bl	8000b94 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f72:	e067      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f74:	4b75      	ldr	r3, [pc, #468]	@ (800514c <HAL_RCC_GetSysClockFreq+0x354>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	099b      	lsrs	r3, r3, #6
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f80:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004f84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f8e:	2300      	movs	r3, #0
 8004f90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004f96:	4622      	mov	r2, r4
 8004f98:	462b      	mov	r3, r5
 8004f9a:	f04f 0000 	mov.w	r0, #0
 8004f9e:	f04f 0100 	mov.w	r1, #0
 8004fa2:	0159      	lsls	r1, r3, #5
 8004fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fa8:	0150      	lsls	r0, r2, #5
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4621      	mov	r1, r4
 8004fb0:	1a51      	subs	r1, r2, r1
 8004fb2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8004fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004fc8:	4649      	mov	r1, r9
 8004fca:	018b      	lsls	r3, r1, #6
 8004fcc:	4641      	mov	r1, r8
 8004fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	018a      	lsls	r2, r1, #6
 8004fd6:	4641      	mov	r1, r8
 8004fd8:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fdc:	4649      	mov	r1, r9
 8004fde:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ff2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ff6:	4692      	mov	sl, r2
 8004ff8:	469b      	mov	fp, r3
 8004ffa:	4623      	mov	r3, r4
 8004ffc:	eb1a 0303 	adds.w	r3, sl, r3
 8005000:	623b      	str	r3, [r7, #32]
 8005002:	462b      	mov	r3, r5
 8005004:	eb4b 0303 	adc.w	r3, fp, r3
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005016:	4629      	mov	r1, r5
 8005018:	028b      	lsls	r3, r1, #10
 800501a:	4621      	mov	r1, r4
 800501c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005020:	4621      	mov	r1, r4
 8005022:	028a      	lsls	r2, r1, #10
 8005024:	4610      	mov	r0, r2
 8005026:	4619      	mov	r1, r3
 8005028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800502c:	2200      	movs	r2, #0
 800502e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005030:	677a      	str	r2, [r7, #116]	@ 0x74
 8005032:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005036:	f7fb fdad 	bl	8000b94 <__aeabi_uldivmod>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4613      	mov	r3, r2
 8005040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005044:	4b41      	ldr	r3, [pc, #260]	@ (800514c <HAL_RCC_GetSysClockFreq+0x354>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	0c1b      	lsrs	r3, r3, #16
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	3301      	adds	r3, #1
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800505a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800505e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005062:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005066:	e0eb      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005068:	4b38      	ldr	r3, [pc, #224]	@ (800514c <HAL_RCC_GetSysClockFreq+0x354>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005070:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005074:	4b35      	ldr	r3, [pc, #212]	@ (800514c <HAL_RCC_GetSysClockFreq+0x354>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d06b      	beq.n	8005158 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005080:	4b32      	ldr	r3, [pc, #200]	@ (800514c <HAL_RCC_GetSysClockFreq+0x354>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	099b      	lsrs	r3, r3, #6
 8005086:	2200      	movs	r2, #0
 8005088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800508a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800508c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800508e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005092:	663b      	str	r3, [r7, #96]	@ 0x60
 8005094:	2300      	movs	r3, #0
 8005096:	667b      	str	r3, [r7, #100]	@ 0x64
 8005098:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800509c:	4622      	mov	r2, r4
 800509e:	462b      	mov	r3, r5
 80050a0:	f04f 0000 	mov.w	r0, #0
 80050a4:	f04f 0100 	mov.w	r1, #0
 80050a8:	0159      	lsls	r1, r3, #5
 80050aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ae:	0150      	lsls	r0, r2, #5
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4621      	mov	r1, r4
 80050b6:	1a51      	subs	r1, r2, r1
 80050b8:	61b9      	str	r1, [r7, #24]
 80050ba:	4629      	mov	r1, r5
 80050bc:	eb63 0301 	sbc.w	r3, r3, r1
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80050ce:	4659      	mov	r1, fp
 80050d0:	018b      	lsls	r3, r1, #6
 80050d2:	4651      	mov	r1, sl
 80050d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050d8:	4651      	mov	r1, sl
 80050da:	018a      	lsls	r2, r1, #6
 80050dc:	4651      	mov	r1, sl
 80050de:	ebb2 0801 	subs.w	r8, r2, r1
 80050e2:	4659      	mov	r1, fp
 80050e4:	eb63 0901 	sbc.w	r9, r3, r1
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050fc:	4690      	mov	r8, r2
 80050fe:	4699      	mov	r9, r3
 8005100:	4623      	mov	r3, r4
 8005102:	eb18 0303 	adds.w	r3, r8, r3
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	462b      	mov	r3, r5
 800510a:	eb49 0303 	adc.w	r3, r9, r3
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800511c:	4629      	mov	r1, r5
 800511e:	024b      	lsls	r3, r1, #9
 8005120:	4621      	mov	r1, r4
 8005122:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005126:	4621      	mov	r1, r4
 8005128:	024a      	lsls	r2, r1, #9
 800512a:	4610      	mov	r0, r2
 800512c:	4619      	mov	r1, r3
 800512e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005132:	2200      	movs	r2, #0
 8005134:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005136:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005138:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800513c:	f7fb fd2a 	bl	8000b94 <__aeabi_uldivmod>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4613      	mov	r3, r2
 8005146:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800514a:	e065      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x420>
 800514c:	40023800 	.word	0x40023800
 8005150:	00f42400 	.word	0x00f42400
 8005154:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005158:	4b3d      	ldr	r3, [pc, #244]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x458>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	099b      	lsrs	r3, r3, #6
 800515e:	2200      	movs	r2, #0
 8005160:	4618      	mov	r0, r3
 8005162:	4611      	mov	r1, r2
 8005164:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005168:	653b      	str	r3, [r7, #80]	@ 0x50
 800516a:	2300      	movs	r3, #0
 800516c:	657b      	str	r3, [r7, #84]	@ 0x54
 800516e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005172:	4642      	mov	r2, r8
 8005174:	464b      	mov	r3, r9
 8005176:	f04f 0000 	mov.w	r0, #0
 800517a:	f04f 0100 	mov.w	r1, #0
 800517e:	0159      	lsls	r1, r3, #5
 8005180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005184:	0150      	lsls	r0, r2, #5
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4641      	mov	r1, r8
 800518c:	1a51      	subs	r1, r2, r1
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	4649      	mov	r1, r9
 8005192:	eb63 0301 	sbc.w	r3, r3, r1
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80051a4:	4659      	mov	r1, fp
 80051a6:	018b      	lsls	r3, r1, #6
 80051a8:	4651      	mov	r1, sl
 80051aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ae:	4651      	mov	r1, sl
 80051b0:	018a      	lsls	r2, r1, #6
 80051b2:	4651      	mov	r1, sl
 80051b4:	1a54      	subs	r4, r2, r1
 80051b6:	4659      	mov	r1, fp
 80051b8:	eb63 0501 	sbc.w	r5, r3, r1
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	00eb      	lsls	r3, r5, #3
 80051c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ca:	00e2      	lsls	r2, r4, #3
 80051cc:	4614      	mov	r4, r2
 80051ce:	461d      	mov	r5, r3
 80051d0:	4643      	mov	r3, r8
 80051d2:	18e3      	adds	r3, r4, r3
 80051d4:	603b      	str	r3, [r7, #0]
 80051d6:	464b      	mov	r3, r9
 80051d8:	eb45 0303 	adc.w	r3, r5, r3
 80051dc:	607b      	str	r3, [r7, #4]
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051ea:	4629      	mov	r1, r5
 80051ec:	028b      	lsls	r3, r1, #10
 80051ee:	4621      	mov	r1, r4
 80051f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051f4:	4621      	mov	r1, r4
 80051f6:	028a      	lsls	r2, r1, #10
 80051f8:	4610      	mov	r0, r2
 80051fa:	4619      	mov	r1, r3
 80051fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005200:	2200      	movs	r2, #0
 8005202:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005204:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005206:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800520a:	f7fb fcc3 	bl	8000b94 <__aeabi_uldivmod>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4613      	mov	r3, r2
 8005214:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005218:	4b0d      	ldr	r3, [pc, #52]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x458>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	0f1b      	lsrs	r3, r3, #28
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800522a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800522e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005232:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005236:	e003      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x45c>)
 800523a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800523e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005240:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005244:	4618      	mov	r0, r3
 8005246:	37b8      	adds	r7, #184	@ 0xb8
 8005248:	46bd      	mov	sp, r7
 800524a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
 8005254:	00f42400 	.word	0x00f42400

08005258 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e28d      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 8083 	beq.w	800537e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005278:	4b94      	ldr	r3, [pc, #592]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 030c 	and.w	r3, r3, #12
 8005280:	2b04      	cmp	r3, #4
 8005282:	d019      	beq.n	80052b8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005284:	4b91      	ldr	r3, [pc, #580]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 030c 	and.w	r3, r3, #12
        || \
 800528c:	2b08      	cmp	r3, #8
 800528e:	d106      	bne.n	800529e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005290:	4b8e      	ldr	r3, [pc, #568]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005298:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800529c:	d00c      	beq.n	80052b8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800529e:	4b8b      	ldr	r3, [pc, #556]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052a6:	2b0c      	cmp	r3, #12
 80052a8:	d112      	bne.n	80052d0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052aa:	4b88      	ldr	r3, [pc, #544]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052b6:	d10b      	bne.n	80052d0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b8:	4b84      	ldr	r3, [pc, #528]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d05b      	beq.n	800537c <HAL_RCC_OscConfig+0x124>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d157      	bne.n	800537c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e25a      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d8:	d106      	bne.n	80052e8 <HAL_RCC_OscConfig+0x90>
 80052da:	4b7c      	ldr	r3, [pc, #496]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a7b      	ldr	r2, [pc, #492]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80052e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	e01d      	b.n	8005324 <HAL_RCC_OscConfig+0xcc>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052f0:	d10c      	bne.n	800530c <HAL_RCC_OscConfig+0xb4>
 80052f2:	4b76      	ldr	r3, [pc, #472]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a75      	ldr	r2, [pc, #468]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80052f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	4b73      	ldr	r3, [pc, #460]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a72      	ldr	r2, [pc, #456]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 8005304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	e00b      	b.n	8005324 <HAL_RCC_OscConfig+0xcc>
 800530c:	4b6f      	ldr	r3, [pc, #444]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a6e      	ldr	r2, [pc, #440]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 8005312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	4b6c      	ldr	r3, [pc, #432]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a6b      	ldr	r2, [pc, #428]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 800531e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d013      	beq.n	8005354 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532c:	f7fc feb2 	bl	8002094 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005334:	f7fc feae 	bl	8002094 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b64      	cmp	r3, #100	@ 0x64
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e21f      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005346:	4b61      	ldr	r3, [pc, #388]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0f0      	beq.n	8005334 <HAL_RCC_OscConfig+0xdc>
 8005352:	e014      	b.n	800537e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fc fe9e 	bl	8002094 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800535c:	f7fc fe9a 	bl	8002094 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b64      	cmp	r3, #100	@ 0x64
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e20b      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536e:	4b57      	ldr	r3, [pc, #348]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x104>
 800537a:	e000      	b.n	800537e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800537c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d06f      	beq.n	800546a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800538a:	4b50      	ldr	r3, [pc, #320]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 030c 	and.w	r3, r3, #12
 8005392:	2b00      	cmp	r3, #0
 8005394:	d017      	beq.n	80053c6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005396:	4b4d      	ldr	r3, [pc, #308]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 030c 	and.w	r3, r3, #12
        || \
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d105      	bne.n	80053ae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053a2:	4b4a      	ldr	r3, [pc, #296]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ae:	4b47      	ldr	r3, [pc, #284]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053b6:	2b0c      	cmp	r3, #12
 80053b8:	d11c      	bne.n	80053f4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ba:	4b44      	ldr	r3, [pc, #272]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d116      	bne.n	80053f4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c6:	4b41      	ldr	r3, [pc, #260]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <HAL_RCC_OscConfig+0x186>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d001      	beq.n	80053de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e1d3      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053de:	4b3b      	ldr	r3, [pc, #236]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4937      	ldr	r1, [pc, #220]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f2:	e03a      	b.n	800546a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d020      	beq.n	800543e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053fc:	4b34      	ldr	r3, [pc, #208]	@ (80054d0 <HAL_RCC_OscConfig+0x278>)
 80053fe:	2201      	movs	r2, #1
 8005400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005402:	f7fc fe47 	bl	8002094 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800540a:	f7fc fe43 	bl	8002094 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e1b4      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541c:	4b2b      	ldr	r3, [pc, #172]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f0      	beq.n	800540a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005428:	4b28      	ldr	r3, [pc, #160]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4925      	ldr	r1, [pc, #148]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 8005438:	4313      	orrs	r3, r2
 800543a:	600b      	str	r3, [r1, #0]
 800543c:	e015      	b.n	800546a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800543e:	4b24      	ldr	r3, [pc, #144]	@ (80054d0 <HAL_RCC_OscConfig+0x278>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fc fe26 	bl	8002094 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800544c:	f7fc fe22 	bl	8002094 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e193      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800545e:	4b1b      	ldr	r3, [pc, #108]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d036      	beq.n	80054e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d016      	beq.n	80054ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800547e:	4b15      	ldr	r3, [pc, #84]	@ (80054d4 <HAL_RCC_OscConfig+0x27c>)
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005484:	f7fc fe06 	bl	8002094 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800548c:	f7fc fe02 	bl	8002094 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e173      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800549e:	4b0b      	ldr	r3, [pc, #44]	@ (80054cc <HAL_RCC_OscConfig+0x274>)
 80054a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0x234>
 80054aa:	e01b      	b.n	80054e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ac:	4b09      	ldr	r3, [pc, #36]	@ (80054d4 <HAL_RCC_OscConfig+0x27c>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b2:	f7fc fdef 	bl	8002094 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b8:	e00e      	b.n	80054d8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ba:	f7fc fdeb 	bl	8002094 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d907      	bls.n	80054d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e15c      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
 80054cc:	40023800 	.word	0x40023800
 80054d0:	42470000 	.word	0x42470000
 80054d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d8:	4b8a      	ldr	r3, [pc, #552]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 80054da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1ea      	bne.n	80054ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8097 	beq.w	8005620 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054f2:	2300      	movs	r3, #0
 80054f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f6:	4b83      	ldr	r3, [pc, #524]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10f      	bne.n	8005522 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005502:	2300      	movs	r3, #0
 8005504:	60bb      	str	r3, [r7, #8]
 8005506:	4b7f      	ldr	r3, [pc, #508]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 8005508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550a:	4a7e      	ldr	r2, [pc, #504]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 800550c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005510:	6413      	str	r3, [r2, #64]	@ 0x40
 8005512:	4b7c      	ldr	r3, [pc, #496]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551e:	2301      	movs	r3, #1
 8005520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005522:	4b79      	ldr	r3, [pc, #484]	@ (8005708 <HAL_RCC_OscConfig+0x4b0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552a:	2b00      	cmp	r3, #0
 800552c:	d118      	bne.n	8005560 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800552e:	4b76      	ldr	r3, [pc, #472]	@ (8005708 <HAL_RCC_OscConfig+0x4b0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a75      	ldr	r2, [pc, #468]	@ (8005708 <HAL_RCC_OscConfig+0x4b0>)
 8005534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800553a:	f7fc fdab 	bl	8002094 <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005542:	f7fc fda7 	bl	8002094 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e118      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005554:	4b6c      	ldr	r3, [pc, #432]	@ (8005708 <HAL_RCC_OscConfig+0x4b0>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0f0      	beq.n	8005542 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d106      	bne.n	8005576 <HAL_RCC_OscConfig+0x31e>
 8005568:	4b66      	ldr	r3, [pc, #408]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556c:	4a65      	ldr	r2, [pc, #404]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 800556e:	f043 0301 	orr.w	r3, r3, #1
 8005572:	6713      	str	r3, [r2, #112]	@ 0x70
 8005574:	e01c      	b.n	80055b0 <HAL_RCC_OscConfig+0x358>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b05      	cmp	r3, #5
 800557c:	d10c      	bne.n	8005598 <HAL_RCC_OscConfig+0x340>
 800557e:	4b61      	ldr	r3, [pc, #388]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005582:	4a60      	ldr	r2, [pc, #384]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 8005584:	f043 0304 	orr.w	r3, r3, #4
 8005588:	6713      	str	r3, [r2, #112]	@ 0x70
 800558a:	4b5e      	ldr	r3, [pc, #376]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558e:	4a5d      	ldr	r2, [pc, #372]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	6713      	str	r3, [r2, #112]	@ 0x70
 8005596:	e00b      	b.n	80055b0 <HAL_RCC_OscConfig+0x358>
 8005598:	4b5a      	ldr	r3, [pc, #360]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 800559a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800559c:	4a59      	ldr	r2, [pc, #356]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 800559e:	f023 0301 	bic.w	r3, r3, #1
 80055a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80055a4:	4b57      	ldr	r3, [pc, #348]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a8:	4a56      	ldr	r2, [pc, #344]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 80055aa:	f023 0304 	bic.w	r3, r3, #4
 80055ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d015      	beq.n	80055e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b8:	f7fc fd6c 	bl	8002094 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055be:	e00a      	b.n	80055d6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c0:	f7fc fd68 	bl	8002094 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e0d7      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 80055d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0ee      	beq.n	80055c0 <HAL_RCC_OscConfig+0x368>
 80055e2:	e014      	b.n	800560e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e4:	f7fc fd56 	bl	8002094 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ea:	e00a      	b.n	8005602 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ec:	f7fc fd52 	bl	8002094 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e0c1      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005602:	4b40      	ldr	r3, [pc, #256]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1ee      	bne.n	80055ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800560e:	7dfb      	ldrb	r3, [r7, #23]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d105      	bne.n	8005620 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005614:	4b3b      	ldr	r3, [pc, #236]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 8005616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005618:	4a3a      	ldr	r2, [pc, #232]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 800561a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800561e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80ad 	beq.w	8005784 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800562a:	4b36      	ldr	r3, [pc, #216]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 030c 	and.w	r3, r3, #12
 8005632:	2b08      	cmp	r3, #8
 8005634:	d060      	beq.n	80056f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d145      	bne.n	80056ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563e:	4b33      	ldr	r3, [pc, #204]	@ (800570c <HAL_RCC_OscConfig+0x4b4>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fc fd26 	bl	8002094 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564c:	f7fc fd22 	bl	8002094 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e093      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565e:	4b29      	ldr	r3, [pc, #164]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69da      	ldr	r2, [r3, #28]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005678:	019b      	lsls	r3, r3, #6
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005680:	085b      	lsrs	r3, r3, #1
 8005682:	3b01      	subs	r3, #1
 8005684:	041b      	lsls	r3, r3, #16
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568c:	061b      	lsls	r3, r3, #24
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005694:	071b      	lsls	r3, r3, #28
 8005696:	491b      	ldr	r1, [pc, #108]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 8005698:	4313      	orrs	r3, r2
 800569a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800569c:	4b1b      	ldr	r3, [pc, #108]	@ (800570c <HAL_RCC_OscConfig+0x4b4>)
 800569e:	2201      	movs	r2, #1
 80056a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a2:	f7fc fcf7 	bl	8002094 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056aa:	f7fc fcf3 	bl	8002094 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e064      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056bc:	4b11      	ldr	r3, [pc, #68]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f0      	beq.n	80056aa <HAL_RCC_OscConfig+0x452>
 80056c8:	e05c      	b.n	8005784 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ca:	4b10      	ldr	r3, [pc, #64]	@ (800570c <HAL_RCC_OscConfig+0x4b4>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fc fce0 	bl	8002094 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d8:	f7fc fcdc 	bl	8002094 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e04d      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ea:	4b06      	ldr	r3, [pc, #24]	@ (8005704 <HAL_RCC_OscConfig+0x4ac>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x480>
 80056f6:	e045      	b.n	8005784 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d107      	bne.n	8005710 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e040      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
 8005704:	40023800 	.word	0x40023800
 8005708:	40007000 	.word	0x40007000
 800570c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005710:	4b1f      	ldr	r3, [pc, #124]	@ (8005790 <HAL_RCC_OscConfig+0x538>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d030      	beq.n	8005780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005728:	429a      	cmp	r2, r3
 800572a:	d129      	bne.n	8005780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005736:	429a      	cmp	r2, r3
 8005738:	d122      	bne.n	8005780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005740:	4013      	ands	r3, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005746:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005748:	4293      	cmp	r3, r2
 800574a:	d119      	bne.n	8005780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	3b01      	subs	r3, #1
 800575a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800575c:	429a      	cmp	r2, r3
 800575e:	d10f      	bne.n	8005780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800576c:	429a      	cmp	r2, r3
 800576e:	d107      	bne.n	8005780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800577c:	429a      	cmp	r2, r3
 800577e:	d001      	beq.n	8005784 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40023800 	.word	0x40023800

08005794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e042      	b.n	800582c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fc fb92 	bl	8001ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2224      	movs	r2, #36	@ 0x24
 80057c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f82b 	bl	8005834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695a      	ldr	r2, [r3, #20]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800580c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005838:	b0c0      	sub	sp, #256	@ 0x100
 800583a:	af00      	add	r7, sp, #0
 800583c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800584c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005850:	68d9      	ldr	r1, [r3, #12]
 8005852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	ea40 0301 	orr.w	r3, r0, r1
 800585c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800585e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	431a      	orrs	r2, r3
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	431a      	orrs	r2, r3
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800588c:	f021 010c 	bic.w	r1, r1, #12
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800589a:	430b      	orrs	r3, r1
 800589c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800589e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ae:	6999      	ldr	r1, [r3, #24]
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	ea40 0301 	orr.w	r3, r0, r1
 80058ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b8f      	ldr	r3, [pc, #572]	@ (8005b00 <UART_SetConfig+0x2cc>)
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d005      	beq.n	80058d4 <UART_SetConfig+0xa0>
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005b04 <UART_SetConfig+0x2d0>)
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d104      	bne.n	80058de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058d4:	f7ff fa7c 	bl	8004dd0 <HAL_RCC_GetPCLK2Freq>
 80058d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058dc:	e003      	b.n	80058e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058de:	f7ff fa63 	bl	8004da8 <HAL_RCC_GetPCLK1Freq>
 80058e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058f0:	f040 810c 	bne.w	8005b0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058f8:	2200      	movs	r2, #0
 80058fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005902:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005906:	4622      	mov	r2, r4
 8005908:	462b      	mov	r3, r5
 800590a:	1891      	adds	r1, r2, r2
 800590c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800590e:	415b      	adcs	r3, r3
 8005910:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005912:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005916:	4621      	mov	r1, r4
 8005918:	eb12 0801 	adds.w	r8, r2, r1
 800591c:	4629      	mov	r1, r5
 800591e:	eb43 0901 	adc.w	r9, r3, r1
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800592e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005936:	4690      	mov	r8, r2
 8005938:	4699      	mov	r9, r3
 800593a:	4623      	mov	r3, r4
 800593c:	eb18 0303 	adds.w	r3, r8, r3
 8005940:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005944:	462b      	mov	r3, r5
 8005946:	eb49 0303 	adc.w	r3, r9, r3
 800594a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800594e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800595a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800595e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005962:	460b      	mov	r3, r1
 8005964:	18db      	adds	r3, r3, r3
 8005966:	653b      	str	r3, [r7, #80]	@ 0x50
 8005968:	4613      	mov	r3, r2
 800596a:	eb42 0303 	adc.w	r3, r2, r3
 800596e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005970:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005974:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005978:	f7fb f90c 	bl	8000b94 <__aeabi_uldivmod>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4b61      	ldr	r3, [pc, #388]	@ (8005b08 <UART_SetConfig+0x2d4>)
 8005982:	fba3 2302 	umull	r2, r3, r3, r2
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	011c      	lsls	r4, r3, #4
 800598a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800598e:	2200      	movs	r2, #0
 8005990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005994:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005998:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800599c:	4642      	mov	r2, r8
 800599e:	464b      	mov	r3, r9
 80059a0:	1891      	adds	r1, r2, r2
 80059a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059a4:	415b      	adcs	r3, r3
 80059a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059ac:	4641      	mov	r1, r8
 80059ae:	eb12 0a01 	adds.w	sl, r2, r1
 80059b2:	4649      	mov	r1, r9
 80059b4:	eb43 0b01 	adc.w	fp, r3, r1
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059cc:	4692      	mov	sl, r2
 80059ce:	469b      	mov	fp, r3
 80059d0:	4643      	mov	r3, r8
 80059d2:	eb1a 0303 	adds.w	r3, sl, r3
 80059d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059da:	464b      	mov	r3, r9
 80059dc:	eb4b 0303 	adc.w	r3, fp, r3
 80059e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059f8:	460b      	mov	r3, r1
 80059fa:	18db      	adds	r3, r3, r3
 80059fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80059fe:	4613      	mov	r3, r2
 8005a00:	eb42 0303 	adc.w	r3, r2, r3
 8005a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a0e:	f7fb f8c1 	bl	8000b94 <__aeabi_uldivmod>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4611      	mov	r1, r2
 8005a18:	4b3b      	ldr	r3, [pc, #236]	@ (8005b08 <UART_SetConfig+0x2d4>)
 8005a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	2264      	movs	r2, #100	@ 0x64
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	1acb      	subs	r3, r1, r3
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a2e:	4b36      	ldr	r3, [pc, #216]	@ (8005b08 <UART_SetConfig+0x2d4>)
 8005a30:	fba3 2302 	umull	r2, r3, r3, r2
 8005a34:	095b      	lsrs	r3, r3, #5
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a3c:	441c      	add	r4, r3
 8005a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a50:	4642      	mov	r2, r8
 8005a52:	464b      	mov	r3, r9
 8005a54:	1891      	adds	r1, r2, r2
 8005a56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a58:	415b      	adcs	r3, r3
 8005a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a60:	4641      	mov	r1, r8
 8005a62:	1851      	adds	r1, r2, r1
 8005a64:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a66:	4649      	mov	r1, r9
 8005a68:	414b      	adcs	r3, r1
 8005a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a78:	4659      	mov	r1, fp
 8005a7a:	00cb      	lsls	r3, r1, #3
 8005a7c:	4651      	mov	r1, sl
 8005a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a82:	4651      	mov	r1, sl
 8005a84:	00ca      	lsls	r2, r1, #3
 8005a86:	4610      	mov	r0, r2
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	189b      	adds	r3, r3, r2
 8005a90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a94:	464b      	mov	r3, r9
 8005a96:	460a      	mov	r2, r1
 8005a98:	eb42 0303 	adc.w	r3, r2, r3
 8005a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005aac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ab0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	18db      	adds	r3, r3, r3
 8005ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aba:	4613      	mov	r3, r2
 8005abc:	eb42 0303 	adc.w	r3, r2, r3
 8005ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ac2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ac6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005aca:	f7fb f863 	bl	8000b94 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b08 <UART_SetConfig+0x2d4>)
 8005ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	2164      	movs	r1, #100	@ 0x64
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	3332      	adds	r3, #50	@ 0x32
 8005ae6:	4a08      	ldr	r2, [pc, #32]	@ (8005b08 <UART_SetConfig+0x2d4>)
 8005ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f003 0207 	and.w	r2, r3, #7
 8005af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4422      	add	r2, r4
 8005afa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005afc:	e106      	b.n	8005d0c <UART_SetConfig+0x4d8>
 8005afe:	bf00      	nop
 8005b00:	40011000 	.word	0x40011000
 8005b04:	40011400 	.word	0x40011400
 8005b08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b1e:	4642      	mov	r2, r8
 8005b20:	464b      	mov	r3, r9
 8005b22:	1891      	adds	r1, r2, r2
 8005b24:	6239      	str	r1, [r7, #32]
 8005b26:	415b      	adcs	r3, r3
 8005b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b2e:	4641      	mov	r1, r8
 8005b30:	1854      	adds	r4, r2, r1
 8005b32:	4649      	mov	r1, r9
 8005b34:	eb43 0501 	adc.w	r5, r3, r1
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	00eb      	lsls	r3, r5, #3
 8005b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b46:	00e2      	lsls	r2, r4, #3
 8005b48:	4614      	mov	r4, r2
 8005b4a:	461d      	mov	r5, r3
 8005b4c:	4643      	mov	r3, r8
 8005b4e:	18e3      	adds	r3, r4, r3
 8005b50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b54:	464b      	mov	r3, r9
 8005b56:	eb45 0303 	adc.w	r3, r5, r3
 8005b5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	008b      	lsls	r3, r1, #2
 8005b7e:	4621      	mov	r1, r4
 8005b80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b84:	4621      	mov	r1, r4
 8005b86:	008a      	lsls	r2, r1, #2
 8005b88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b8c:	f7fb f802 	bl	8000b94 <__aeabi_uldivmod>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4b60      	ldr	r3, [pc, #384]	@ (8005d18 <UART_SetConfig+0x4e4>)
 8005b96:	fba3 2302 	umull	r2, r3, r3, r2
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	011c      	lsls	r4, r3, #4
 8005b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ba8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	1891      	adds	r1, r2, r2
 8005bb6:	61b9      	str	r1, [r7, #24]
 8005bb8:	415b      	adcs	r3, r3
 8005bba:	61fb      	str	r3, [r7, #28]
 8005bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bc0:	4641      	mov	r1, r8
 8005bc2:	1851      	adds	r1, r2, r1
 8005bc4:	6139      	str	r1, [r7, #16]
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	414b      	adcs	r3, r1
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bd8:	4659      	mov	r1, fp
 8005bda:	00cb      	lsls	r3, r1, #3
 8005bdc:	4651      	mov	r1, sl
 8005bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005be2:	4651      	mov	r1, sl
 8005be4:	00ca      	lsls	r2, r1, #3
 8005be6:	4610      	mov	r0, r2
 8005be8:	4619      	mov	r1, r3
 8005bea:	4603      	mov	r3, r0
 8005bec:	4642      	mov	r2, r8
 8005bee:	189b      	adds	r3, r3, r2
 8005bf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	460a      	mov	r2, r1
 8005bf8:	eb42 0303 	adc.w	r3, r2, r3
 8005bfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c18:	4649      	mov	r1, r9
 8005c1a:	008b      	lsls	r3, r1, #2
 8005c1c:	4641      	mov	r1, r8
 8005c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c22:	4641      	mov	r1, r8
 8005c24:	008a      	lsls	r2, r1, #2
 8005c26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c2a:	f7fa ffb3 	bl	8000b94 <__aeabi_uldivmod>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4611      	mov	r1, r2
 8005c34:	4b38      	ldr	r3, [pc, #224]	@ (8005d18 <UART_SetConfig+0x4e4>)
 8005c36:	fba3 2301 	umull	r2, r3, r3, r1
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	2264      	movs	r2, #100	@ 0x64
 8005c3e:	fb02 f303 	mul.w	r3, r2, r3
 8005c42:	1acb      	subs	r3, r1, r3
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	3332      	adds	r3, #50	@ 0x32
 8005c48:	4a33      	ldr	r2, [pc, #204]	@ (8005d18 <UART_SetConfig+0x4e4>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c54:	441c      	add	r4, r3
 8005c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c64:	4642      	mov	r2, r8
 8005c66:	464b      	mov	r3, r9
 8005c68:	1891      	adds	r1, r2, r2
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	415b      	adcs	r3, r3
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c74:	4641      	mov	r1, r8
 8005c76:	1851      	adds	r1, r2, r1
 8005c78:	6039      	str	r1, [r7, #0]
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	414b      	adcs	r3, r1
 8005c7e:	607b      	str	r3, [r7, #4]
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c8c:	4659      	mov	r1, fp
 8005c8e:	00cb      	lsls	r3, r1, #3
 8005c90:	4651      	mov	r1, sl
 8005c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c96:	4651      	mov	r1, sl
 8005c98:	00ca      	lsls	r2, r1, #3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	189b      	adds	r3, r3, r2
 8005ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	460a      	mov	r2, r1
 8005caa:	eb42 0303 	adc.w	r3, r2, r3
 8005cae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cba:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	f04f 0300 	mov.w	r3, #0
 8005cc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005cc8:	4649      	mov	r1, r9
 8005cca:	008b      	lsls	r3, r1, #2
 8005ccc:	4641      	mov	r1, r8
 8005cce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cd2:	4641      	mov	r1, r8
 8005cd4:	008a      	lsls	r2, r1, #2
 8005cd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cda:	f7fa ff5b 	bl	8000b94 <__aeabi_uldivmod>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8005d18 <UART_SetConfig+0x4e4>)
 8005ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	2164      	movs	r1, #100	@ 0x64
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	3332      	adds	r3, #50	@ 0x32
 8005cf6:	4a08      	ldr	r2, [pc, #32]	@ (8005d18 <UART_SetConfig+0x4e4>)
 8005cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	f003 020f 	and.w	r2, r3, #15
 8005d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4422      	add	r2, r4
 8005d0a:	609a      	str	r2, [r3, #8]
}
 8005d0c:	bf00      	nop
 8005d0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d12:	46bd      	mov	sp, r7
 8005d14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d18:	51eb851f 	.word	0x51eb851f

08005d1c <memset>:
 8005d1c:	4402      	add	r2, r0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d100      	bne.n	8005d26 <memset+0xa>
 8005d24:	4770      	bx	lr
 8005d26:	f803 1b01 	strb.w	r1, [r3], #1
 8005d2a:	e7f9      	b.n	8005d20 <memset+0x4>

08005d2c <__libc_init_array>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005d64 <__libc_init_array+0x38>)
 8005d30:	4c0d      	ldr	r4, [pc, #52]	@ (8005d68 <__libc_init_array+0x3c>)
 8005d32:	1b64      	subs	r4, r4, r5
 8005d34:	10a4      	asrs	r4, r4, #2
 8005d36:	2600      	movs	r6, #0
 8005d38:	42a6      	cmp	r6, r4
 8005d3a:	d109      	bne.n	8005d50 <__libc_init_array+0x24>
 8005d3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005d6c <__libc_init_array+0x40>)
 8005d3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005d70 <__libc_init_array+0x44>)
 8005d40:	f000 f896 	bl	8005e70 <_init>
 8005d44:	1b64      	subs	r4, r4, r5
 8005d46:	10a4      	asrs	r4, r4, #2
 8005d48:	2600      	movs	r6, #0
 8005d4a:	42a6      	cmp	r6, r4
 8005d4c:	d105      	bne.n	8005d5a <__libc_init_array+0x2e>
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d54:	4798      	blx	r3
 8005d56:	3601      	adds	r6, #1
 8005d58:	e7ee      	b.n	8005d38 <__libc_init_array+0xc>
 8005d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d5e:	4798      	blx	r3
 8005d60:	3601      	adds	r6, #1
 8005d62:	e7f2      	b.n	8005d4a <__libc_init_array+0x1e>
 8005d64:	08005eb0 	.word	0x08005eb0
 8005d68:	08005eb0 	.word	0x08005eb0
 8005d6c:	08005eb0 	.word	0x08005eb0
 8005d70:	08005eb4 	.word	0x08005eb4
 8005d74:	00000000 	.word	0x00000000

08005d78 <floor>:
 8005d78:	ec51 0b10 	vmov	r0, r1, d0
 8005d7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d84:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005d88:	2e13      	cmp	r6, #19
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	4605      	mov	r5, r0
 8005d8e:	4680      	mov	r8, r0
 8005d90:	dc34      	bgt.n	8005dfc <floor+0x84>
 8005d92:	2e00      	cmp	r6, #0
 8005d94:	da17      	bge.n	8005dc6 <floor+0x4e>
 8005d96:	a332      	add	r3, pc, #200	@ (adr r3, 8005e60 <floor+0xe8>)
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f7fa fa3a 	bl	8000214 <__adddf3>
 8005da0:	2200      	movs	r2, #0
 8005da2:	2300      	movs	r3, #0
 8005da4:	f7fa fe7c 	bl	8000aa0 <__aeabi_dcmpgt>
 8005da8:	b150      	cbz	r0, 8005dc0 <floor+0x48>
 8005daa:	2c00      	cmp	r4, #0
 8005dac:	da55      	bge.n	8005e5a <floor+0xe2>
 8005dae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005db2:	432c      	orrs	r4, r5
 8005db4:	2500      	movs	r5, #0
 8005db6:	42ac      	cmp	r4, r5
 8005db8:	4c2b      	ldr	r4, [pc, #172]	@ (8005e68 <floor+0xf0>)
 8005dba:	bf08      	it	eq
 8005dbc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	e023      	b.n	8005e0e <floor+0x96>
 8005dc6:	4f29      	ldr	r7, [pc, #164]	@ (8005e6c <floor+0xf4>)
 8005dc8:	4137      	asrs	r7, r6
 8005dca:	ea01 0307 	and.w	r3, r1, r7
 8005dce:	4303      	orrs	r3, r0
 8005dd0:	d01d      	beq.n	8005e0e <floor+0x96>
 8005dd2:	a323      	add	r3, pc, #140	@ (adr r3, 8005e60 <floor+0xe8>)
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f7fa fa1c 	bl	8000214 <__adddf3>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2300      	movs	r3, #0
 8005de0:	f7fa fe5e 	bl	8000aa0 <__aeabi_dcmpgt>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d0eb      	beq.n	8005dc0 <floor+0x48>
 8005de8:	2c00      	cmp	r4, #0
 8005dea:	bfbe      	ittt	lt
 8005dec:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005df0:	4133      	asrlt	r3, r6
 8005df2:	18e4      	addlt	r4, r4, r3
 8005df4:	ea24 0407 	bic.w	r4, r4, r7
 8005df8:	2500      	movs	r5, #0
 8005dfa:	e7e1      	b.n	8005dc0 <floor+0x48>
 8005dfc:	2e33      	cmp	r6, #51	@ 0x33
 8005dfe:	dd0a      	ble.n	8005e16 <floor+0x9e>
 8005e00:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005e04:	d103      	bne.n	8005e0e <floor+0x96>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	f7fa fa03 	bl	8000214 <__adddf3>
 8005e0e:	ec41 0b10 	vmov	d0, r0, r1
 8005e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e16:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005e1a:	f04f 37ff 	mov.w	r7, #4294967295
 8005e1e:	40df      	lsrs	r7, r3
 8005e20:	4207      	tst	r7, r0
 8005e22:	d0f4      	beq.n	8005e0e <floor+0x96>
 8005e24:	a30e      	add	r3, pc, #56	@ (adr r3, 8005e60 <floor+0xe8>)
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f7fa f9f3 	bl	8000214 <__adddf3>
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2300      	movs	r3, #0
 8005e32:	f7fa fe35 	bl	8000aa0 <__aeabi_dcmpgt>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d0c2      	beq.n	8005dc0 <floor+0x48>
 8005e3a:	2c00      	cmp	r4, #0
 8005e3c:	da0a      	bge.n	8005e54 <floor+0xdc>
 8005e3e:	2e14      	cmp	r6, #20
 8005e40:	d101      	bne.n	8005e46 <floor+0xce>
 8005e42:	3401      	adds	r4, #1
 8005e44:	e006      	b.n	8005e54 <floor+0xdc>
 8005e46:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	40b3      	lsls	r3, r6
 8005e4e:	441d      	add	r5, r3
 8005e50:	4545      	cmp	r5, r8
 8005e52:	d3f6      	bcc.n	8005e42 <floor+0xca>
 8005e54:	ea25 0507 	bic.w	r5, r5, r7
 8005e58:	e7b2      	b.n	8005dc0 <floor+0x48>
 8005e5a:	2500      	movs	r5, #0
 8005e5c:	462c      	mov	r4, r5
 8005e5e:	e7af      	b.n	8005dc0 <floor+0x48>
 8005e60:	8800759c 	.word	0x8800759c
 8005e64:	7e37e43c 	.word	0x7e37e43c
 8005e68:	bff00000 	.word	0xbff00000
 8005e6c:	000fffff 	.word	0x000fffff

08005e70 <_init>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	bf00      	nop
 8005e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e76:	bc08      	pop	{r3}
 8005e78:	469e      	mov	lr, r3
 8005e7a:	4770      	bx	lr

08005e7c <_fini>:
 8005e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7e:	bf00      	nop
 8005e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e82:	bc08      	pop	{r3}
 8005e84:	469e      	mov	lr, r3
 8005e86:	4770      	bx	lr
